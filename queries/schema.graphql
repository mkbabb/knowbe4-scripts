"""An account"""
type Account implements Identifier & Timestamps {
  accountAdminTimeout: Int!
  accountOwner: User
  accountOwners: [User!]!
  accountRiskScoreHistories(fullHistory: Boolean = false): [AccountRiskScoreHistory!]!
  accountSettingsFlagNames: [String!]!
  accountSettingsKcm: Kcm
  accountType: String
  actualSubscription: Subscription
  adiRateLimited: Boolean!
  allowAnalytics: Boolean!
  allowUsersToSignup: Boolean!
  allowedDomains: [AllowedDomain!]!
  anonymizePhishing: Boolean!
  anonymizedGroupSize: Int!
  apiEnabled: Boolean
  apiLimit: ApiLimit
  apiToken: String
  archived: Boolean!
  benchmarkCompanySize: BenchmarkCompanySize!
  benchmarkIndustryId: Int
  benchmarkTimeframe: BenchmarkTimeframes
  betaEnabled: Boolean
  billingType: AccountBillingTypes!
  businessDays: [Int!]!
  businessHoursEndHour: Time!
  businessHoursStartHour: Time!
  canDownloadModules: Boolean
  cannotBeDeleted: Boolean!
  ccmUrl: String!
  certBackgroundFileName: String
  certBackgroundUrl: String
  certPreviewUrl: String!
  certSize: String!
  city: String
  companyName: String
  country: String
  courseFormat: String!
  createdAt: ISO8601DateTime!
  currentPpp: Float!
  customPhishingHeaderEnabled: Boolean
  customPhishingHeaderName: String
  customPhishingHeaderValue: String
  customTrainingHeaderEnabled: Boolean
  customTrainingHeaderName: String
  customTrainingHeaderValue: String
  defaultLandingDomain: LandingDomain!
  defaultLandingPage: LandingPage!
  defaultLocale: String!
  deletionRequestedAt: ISO8601DateTime
  deletionRequestedByEmail: String
  deletionRequestedById: Int
  disableOpenTracking: Boolean
  disablePasslessForAdmins: Boolean!
  disablePhishTestHeader: Boolean
  disableReturnPathHeader: Boolean
  disableReturnPathHeaderForTraining: Boolean!
  displayName: String!
  displayNameWithDomain: String!
  dmiEnabled: Boolean
  dmiFailed: Boolean
  domain: String!
  eecSettings: AccountSettingsEec!
  enablePstTokenHeader: Boolean
  extension: String
  freeDeletable: Boolean!
  freePrtStarted: Boolean!
  freePstStarted: Boolean!
  freeQrtStarted: Boolean!
  freeSptStarted: Boolean!
  gamification: Gamification
  groups: [Group!]!
  hasAidaBlue: Boolean!
  hasApi: Boolean!
  hasAsapStarted: Boolean
  hasFreePrt: Boolean!
  hasFreePst: Boolean!
  hasFreeQrt: Boolean!
  hasFreeSpt: Boolean!
  hasFreeUsb: Boolean!
  hasIvr: Boolean
  hasLdap: Boolean!
  hasOnlyStaleContent: Boolean
  hasPassless: Boolean!
  hasPasswordIq: Boolean
  hasPermissions: Boolean!
  hasPhishing: Boolean
  hasPhysicalQr: Boolean
  hasSecondChance: Boolean
  hasSei: Boolean
  hasSharedDomains: Boolean
  hasTraining: Boolean
  hasUsb: Boolean
  hasUserEventApi: Boolean!
  hasWebhooks: Boolean!
  hiddenCategoriesUuids: [String!]
  hiddenEmailTemplatesUuids: [String!]
  id: Int!
  idpCertFingerprint: String
  idpCertFormat: IdpCertificationFormats!
  idpSsoTargetUrl: String
  includeArchivedUsersInReports: Boolean!
  industry: Industry
  industryId: Int
  ipRestrictionSettings: AccountSettingsIpRestriction
  languageSettings: AccountSettingsLanguageDefault

  """Get language stats based on group selection"""
  languageStats(groupIds: [Int!] = []): [AccountLanguageStats!]
  latestRiskScore: Float
  ldapEnabled: Boolean
  ldapToken: String
  learnerExperienceSettings: AccountSettingsLearnerExperience
  limitLandingPagesHits: Boolean!
  lmsForceAvailable: Boolean!
  logo: String
  logoCoords: String
  logoDownloadUrl: String
  logoOriginalUrl: String
  logoUrl: String
  maxLandingPagesHits: Int!
  minimumPasswordLength: Int!
  notesSettings: Notes
  numberOfSeats: String
  oofFromOverride: Boolean!
  partnerAccessExpiration: ISO8601DateTime
  partnerDisplayName: String
  partnerDomain: String
  partnerEmail: String!
  partnerHasSfid: Boolean!
  partnerId: String!
  partnerSubscriptionHasApi: Boolean
  partnerSubscriptionHasUserEventApi: Boolean
  partnersUsableSfid: String
  passlessExpiresIn: String!
  passwordIqEnabled: Boolean
  percentageUsersPhished: String!
  percentageUsersTrained: String!
  phishPronePercentage: String!
  phishalertEnabled: Boolean
  phishalertSettings: [PhishalertSetting!]!
  phisherBeta: Boolean!
  phisherEnabled: Boolean!
  phisherPlusEnabled: Boolean!
  phisherSubscriptionEndDate: ISO8601Date
  phishingCampaignRunCount: Int!
  phishingCampaigns: [PhishingCampaign!]!
  phishingDkimConfig: DkimConfig
  phishingSettings: AccountSettingsPhishing
  phoneNumber: String
  placeholderSettings: Placeholder
  popcornTheaterReduceMotion: Boolean!
  ppp: Float!
  primaryColor: String!
  prtMax: String!
  prtSenderEmail: String
  prtSenderName: String
  pstCount: Int
  pstMax: String!
  pstToken: String
  purchasedCourseCount: Int
  purchasedSkus: [AccountPurchasedSku!]!
  qrtMax: String!
  refid: String
  riskScore: String!
  salesforceSettings: Salesforce
  samlEnabled: Boolean!
  samlSettings: AccountSettingsSaml
  samlUserProvisioningEnabled: Boolean!
  secondChanceSettings: AccountSettingsSecondChanceSetting
  sfid: String
  smartGroupsEnabled: Boolean!
  sptMax: String!
  ssoBypass: String!
  ssoCallback: String
  ssoIn: String
  ssoMetadata: String
  ssoOriginalStatus: Boolean!
  ssoOut: String
  ssoSlug: String
  state: String
  streetAddress1: String
  streetAddress2: String
  subscriptionEndDate: ISO8601Date
  subscriptionId: Int
  subscriptionObject: Subscription
  subscriptionObjectId: Int
  suiteNumber: String
  timeZone: TimeZones!
  trainingCampaignCount: Int!
  trainingCampaigns: [TrainingCampaign!]!
  trainingDkimConfig: DkimConfig
  trainingSettings: AccountSettingsTraining
  trialExpirationDate: ISO8601Date
  updatedAt: ISO8601DateTime!
  upnFailed: Boolean
  upnFailedTimeframe: Int
  userCategoriesUuids: [String!]
  userCount: Int
  userHasPhisherAccount: Boolean!
  userMoves: AccountSettingsUserMoves
  userProvisioning: UserProvisioning!
  userProvisioningNotification: UserProvisioningNotification
  userTimeout: Int!
  usersSettings: Users
  usingPhishingTopics: Boolean
  validDeletionRequest: Boolean!
  zipCode: String
}

input AccountAttributes {
  companyName: String
  logoUrl: String
  logo: String
  logoCoords: String
  logoOriginalUrl: String
  logoFileName: String
  domain: String
  country: String
  streetAddress1: String
  streetAddress2: String
  suiteNumber: String
  city: String
  state: String
  zipCode: String
  phoneNumber: String
  extension: String
  defaultLocale: String
  businessHoursStartHour: Time
  businessHoursEndHour: Time
  businessDays: [Int!]
  timeZone: TimeZones
  samlEnabled: Boolean
  samlUserProvisioningEnabled: Boolean
  idpSsoTargetUrl: String
  idpCertFormat: IdpCertificationFormats
  idpCertFingerprint: String
  allowUsersToSignup: Boolean
  hasPassless: Boolean
  disablePasslessForAdmins: Boolean
  passlessExpiresIn: String
  accountAdminTimeout: Int
  userTimeout: Int
  minimumPasswordLength: Int
  courseFormat: String
  disableOpenTracking: Boolean
  includeArchivedUsersInReports: Boolean
  defaultLandingPageId: Int
  defaultLandingDomainId: Int
  phishingSettings: AccountPhishingSettingsAttributes
  purchasedSkus: [AccountPurchasedSkusAttributes!]
  trainingSettings: AccountTrainingSettingsAttributes
  oofFromOverride: Boolean
  disableReturnPathHeader: Boolean
  disablePhishTestHeader: Boolean
  enablePstTokenHeader: Boolean
  customPhishingHeaderEnabled: Boolean
  customPhishingHeaderName: String
  customPhishingHeaderValue: String
  hasSecondChance: Boolean
  secondChanceSettings: SecondChanceSettingAttributes
  apiEnabled: Boolean
  phishalertEnabled: Boolean
  phishalertSettings: [PhishalertSettingAttributes!]
  disableReturnPathHeaderForTraining: Boolean
  customTrainingHeaderEnabled: Boolean
  customTrainingHeaderName: String
  customTrainingHeaderValue: String
  primaryColor: String
  certBackgroundFileName: String
  certBackground: String
  popcornTheaterReduceMotion: Boolean
  badgesEnabled: Boolean
  gamification: GamificationAttributes
  userProvisioning: UserProvisioningAttributes
  userProvisioningNotification: UserProvisioningNotificationAttributes
  learnerExperienceSettings: AccountLearnerExperienceSettingsAttributes
  eecSettings: AccountEecSettingsAttributes
  userMoves: UserMovesSettingAttributes
  benchmarkIndustryId: Int
  benchmarkCompanySize: BenchmarkCompanySize
  benchmarkTimeframe: BenchmarkTimeframes
  ldapEnabled: Boolean
  ldapTestMode: Boolean
  showGroupDomain: Boolean
  languageSettings: DefaultLanguages
  samlSettings: SamlSettingsAttributes
  ipRestrictionSettings: AccountIpRestrictionSettingsAttributes
  placeholderSettings: PlaceholderSettingsAttributes
  salesforceSettings: SalesforceAttributes
  accountSettingsKcm: KcmAttributes
  notesSettings: NotesAttributes
  usersSettings: UsersAttributes
  apiLimit: ApiLimitSettingsAttributes
  hasPasswordIq: Boolean
  passwordIqEnabled: Boolean
  hasWebhooks: Boolean
  billingType: AccountBillingTypes
  accountType: String
  trialExpirationDate: String
  subscriptionEndDate: String
  numberOfSeats: String
  industryId: Int
  accountOwner: UserAttributes
  smartGroupsEnabled: Boolean
  hasPermissions: Boolean
  hasIvr: Boolean
  hasUsb: Boolean
  hasPhysicalQr: Boolean
  allowAnalytics: Boolean
  partnerId: String
  subscriptionObjectId: Int
  hasApi: Boolean
  hasUserEventApi: Boolean
  hasPhishing: Boolean
  pstMax: String
  prtMax: String
  sptMax: String
  hasSei: Boolean
  hasTraining: Boolean
  lmsForceAvailable: Boolean
  phisherEnabled: Boolean
  phisherPlusEnabled: Boolean
  phisherSubscriptionEndDate: String
  accountSettingsFlagNames: [String!]
  hasSharedDomains: Boolean
  canDownloadModules: Boolean
  sfid: String
  hasLdap: Boolean
  adiRateLimited: Boolean
  anonymizePhishing: Boolean
  anonymizedGroupSize: Int
  betaEnabled: Boolean
  limitLandingPagesHits: Boolean
  maxLandingPagesHits: Int
  phisherBeta: Boolean
}

enum AccountBillingTypes {
  ANY
  PAID
  TRIAL
  FREE
}

input AccountEecSettingsAttributes {
  scanDayOfMonth: Int!
  lastScannedAt: ISO8601DateTime
}

input AccountIpRestrictionSettingsAttributes {
  id: Int
  enforceSameIp: Boolean
  ipAllowList: String
  restrictConsoleSession: Boolean
}

"""The aggregated language stats of an account"""
type AccountLanguageStats {
  languageCode: String
  numberOfUsers: Int
}

input AccountLearnerExperienceSettingsAttributes {
  id: Int
  customHelpEnabled: Boolean
  customHelpUrl: String
  dashboardEnabled: Boolean
  dashboardShowsPhishingStatistics: Boolean
  dashboardShowsRiskStatistics: Boolean
  optionalTrainingEnabled: Boolean
  aidaOptionalTrainingEnabled: Boolean
  aidaOptionalTrainingAvailable: Boolean
  mobileAppEnabled: Boolean
  managerPhishingEnabled: Boolean
  managerTrainingEnabled: Boolean
  managerRiskScoreEnabled: Boolean
  managerUserInfoEnabled: Boolean
  disableTour: Boolean
}

"""An account"""
type AccountMultiInstance implements Identifier & Timestamps {
  accountAdminTimeout: Int!
  accountOwner: User
  accountOwners: [User!]!
  accountRiskScoreHistories(fullHistory: Boolean = false): [AccountRiskScoreHistory!]!
  accountSettingsFlagNames: [String!]!
  accountSettingsKcm: Kcm
  accountType: String
  actualSubscription: Subscription
  adiRateLimited: Boolean!
  allowAnalytics: Boolean!
  allowUsersToSignup: Boolean!
  allowedDomains: [AllowedDomain!]!
  anonymizePhishing: Boolean!
  anonymizedGroupSize: Int!
  apiEnabled: Boolean
  apiLimit: ApiLimit
  apiToken: String
  archived: Boolean!
  benchmarkCompanySize: BenchmarkCompanySize!
  benchmarkIndustryId: Int
  benchmarkTimeframe: BenchmarkTimeframes
  betaEnabled: Boolean
  billingType: AccountBillingTypes!
  businessDays: [Int!]!
  businessHoursEndHour: Time!
  businessHoursStartHour: Time!
  canDownloadModules: Boolean
  cannotBeDeleted: Boolean!
  ccmUrl: String!
  certBackgroundFileName: String
  certBackgroundUrl: String
  certPreviewUrl: String!
  certSize: String!
  city: String
  companyName: String
  country: String
  courseFormat: String!
  createdAt: ISO8601DateTime!
  currentPpp: Float!
  customPhishingHeaderEnabled: Boolean
  customPhishingHeaderName: String
  customPhishingHeaderValue: String
  customTrainingHeaderEnabled: Boolean
  customTrainingHeaderName: String
  customTrainingHeaderValue: String
  defaultLandingDomain: LandingDomain!
  defaultLandingPage: LandingPage!
  defaultLocale: String!
  deletionRequestedAt: ISO8601DateTime
  deletionRequestedByEmail: String
  deletionRequestedById: Int
  disableOpenTracking: Boolean
  disablePasslessForAdmins: Boolean!
  disablePhishTestHeader: Boolean
  disableReturnPathHeader: Boolean
  disableReturnPathHeaderForTraining: Boolean!
  displayName: String!
  displayNameWithDomain: String!
  dmiEnabled: Boolean
  dmiFailed: Boolean
  domain: String!
  eecSettings: AccountSettingsEec!
  enablePstTokenHeader: Boolean
  extension: String
  freeDeletable: Boolean!
  freePrtStarted: Boolean!
  freePstStarted: Boolean!
  freeQrtStarted: Boolean!
  freeSptStarted: Boolean!
  gamification: Gamification
  groups: [Group!]!
  hasAidaBlue: Boolean!
  hasApi: Boolean!
  hasAsapStarted: Boolean
  hasFreePrt: Boolean!
  hasFreePst: Boolean!
  hasFreeQrt: Boolean!
  hasFreeSpt: Boolean!
  hasFreeUsb: Boolean!
  hasIvr: Boolean
  hasLdap: Boolean!
  hasOnlyStaleContent: Boolean
  hasPassless: Boolean!
  hasPasswordIq: Boolean
  hasPermissions: Boolean!
  hasPhishing: Boolean
  hasPhysicalQr: Boolean
  hasSecondChance: Boolean
  hasSei: Boolean
  hasSharedDomains: Boolean
  hasTraining: Boolean
  hasUsb: Boolean
  hasUserEventApi: Boolean!
  hasWebhooks: Boolean!
  hiddenCategoriesUuids: [String!]
  hiddenEmailTemplatesUuids: [String!]
  id: Int!
  idpCertFingerprint: String
  idpCertFormat: IdpCertificationFormats!
  idpSsoTargetUrl: String
  includeArchivedUsersInReports: Boolean!
  industry: Industry
  industryId: Int
  ipRestrictionSettings: AccountSettingsIpRestriction
  languageSettings: AccountSettingsLanguageDefault

  """Get language stats based on group selection"""
  languageStats(groupIds: [Int!] = []): [AccountLanguageStats!]
  latestRiskScore: Float
  ldapEnabled: Boolean
  ldapToken: String
  learnerExperienceSettings: AccountSettingsLearnerExperience
  limitLandingPagesHits: Boolean!
  lmsForceAvailable: Boolean!
  logo: String
  logoCoords: String
  logoDownloadUrl: String
  logoOriginalUrl: String
  logoUrl: String
  maxLandingPagesHits: Int!
  minimumPasswordLength: Int!
  notesSettings: Notes
  numberOfSeats: String
  oofFromOverride: Boolean!
  partnerAccessExpiration: ISO8601DateTime
  partnerDisplayName: String
  partnerDomain: String
  partnerEmail: String!
  partnerHasSfid: Boolean!
  partnerId: String!
  partnerSubscriptionHasApi: Boolean
  partnerSubscriptionHasUserEventApi: Boolean
  partnersUsableSfid: String
  passlessExpiresIn: String!
  passwordIqEnabled: Boolean
  percentageUsersPhished: String!
  percentageUsersTrained: String!
  phishPronePercentage: String!
  phishalertEnabled: Boolean
  phishalertSettings: [PhishalertSetting!]!
  phisherBeta: Boolean!
  phisherEnabled: Boolean!
  phisherPlusEnabled: Boolean!
  phisherSubscriptionEndDate: ISO8601Date
  phishingCampaignRunCount: Int!
  phishingCampaigns: [PhishingCampaign!]!
  phishingDkimConfig: DkimConfig
  phishingSettings: AccountSettingsPhishing
  phoneNumber: String
  placeholderSettings: Placeholder
  popcornTheaterReduceMotion: Boolean!
  ppp: Float!
  primaryColor: String!
  prtMax: String!
  prtSenderEmail: String
  prtSenderName: String
  pstCount: Int
  pstMax: String!
  pstToken: String
  purchasedCourseCount: Int
  purchasedSkus: [AccountPurchasedSku!]!
  qrtMax: String!
  refid: String
  riskScore: String!
  salesforceSettings: Salesforce
  samlEnabled: Boolean!
  samlSettings: AccountSettingsSaml
  samlUserProvisioningEnabled: Boolean!
  secondChanceSettings: AccountSettingsSecondChanceSetting
  sfid: String
  smartGroupsEnabled: Boolean!
  sptMax: String!
  ssoBypass: String!
  ssoCallback: String
  ssoIn: String
  ssoMetadata: String
  ssoOriginalStatus: Boolean!
  ssoOut: String
  ssoSlug: String
  state: String
  streetAddress1: String
  streetAddress2: String
  subscriptionEndDate: ISO8601Date
  subscriptionId: Int
  subscriptionObject: Subscription
  subscriptionObjectId: Int
  suiteNumber: String
  timeZone: TimeZones!
  trainingCampaignCount: Int!
  trainingCampaigns: [TrainingCampaign!]!
  trainingDkimConfig: DkimConfig
  trainingSettings: AccountSettingsTraining
  trialExpirationDate: ISO8601Date
  updatedAt: ISO8601DateTime!
  upnFailed: Boolean
  upnFailedTimeframe: Int
  userCategoriesUuids: [String!]
  userCount: Int
  userHasPhisherAccount: Boolean!
  userMoves: AccountSettingsUserMoves
  userProvisioning: UserProvisioning!
  userProvisioningNotification: UserProvisioningNotification
  userTimeout: Int!
  usersSettings: Users
  usingPhishingTopics: Boolean
  validDeletionRequest: Boolean!
  zipCode: String
}

enum AccountPartnerAccessPeriods {
  DISABLED
  FOUR_HOURS
  ONE_DAY
  FIVE_DAYS
  FOREVER
}

enum AccountPartnerInclusions {
  ALL
  CHILDREN_ONLY
  GRANDCHILDREN_ONLY
  GREAT_GRANDCHILDREN_ONLY
  NON_CHILDREN
}

input AccountPhishingSettingsAttributes {
  id: Int
  disabledTemplateAttackVectors: [PhishingAttackVectors!]
  customDomainPlaceholderEnabled: Boolean
  customDomainPlaceholder: String
  overrideRphAddress: Boolean
  aidaSelectedAvailable: Boolean
  templateExclusions: JSON
  callbackPhishingEnabled: Boolean
}

"""Purchased SKU, added to an Account"""
type AccountPurchasedSku {
  active: Boolean!
  expiresAt: ISO8601Date
  gracePeriod: Boolean!
  skuCode: String!
  status: AccountPurchaseStatuses
  title: String!
}

input AccountPurchasedSkusAttributes {
  skuCode: String!
  title: String!
  expiresAt: ISO8601DateTime
  status: AccountPurchaseStatuses!
}

enum AccountPurchaseStatuses {
  paid
  preview
  trial
}

"""Risk score for an account"""
type AccountRiskScoreHistory implements Identifier {
  account: Account!
  createdAt: ISO8601DateTime!
  id: Int!
  riskScore: Float
}

"""Autogenerated return type of AccountsConfirmDeletion"""
type AccountsConfirmDeletionPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountsCreatePabInstance"""
type AccountsCreatePabInstancePayload {
  errors: [Error!]
  node: PhishalertSetting
}

"""Autogenerated return type of AccountsCreate"""
type AccountsCreatePayload {
  errors: [Error!]
  node: Account
}

type AccountsCursor {
  nodes: [Account!]!
  pagination: Pagination!
}

"""Autogenerated return type of AccountsDeleteCert"""
type AccountsDeleteCertPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountsDeleteFree"""
type AccountsDeleteFreePayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountsDeleteLogo"""
type AccountsDeleteLogoPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountsDeletePabIcon"""
type AccountsDeletePabIconPayload {
  errors: [Error!]
  node: PhishalertSetting
}

"""Autogenerated return type of AccountsDeletePabInstance"""
type AccountsDeletePabInstancePayload {
  errors: [Error!]
  node: PhishalertSetting
}

"""Autogenerated return type of AccountsDeletePhisher"""
type AccountsDeletePhisherPayload {
  errors: [Error!]
  node: Account
}

"""EEC Settings"""
type AccountSettingsEec implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  enabled: Boolean
  id: Int!
  lastScannedAt: ISO8601DateTime
  scanDayOfMonth: Int!
  updatedAt: ISO8601DateTime!
}

"""IP Restriction Settings"""
type AccountSettingsIpRestriction implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  enforceSameIp: Boolean!
  id: Int!
  ipAllowList: String
  restrictConsoleSession: Boolean!
  updatedAt: ISO8601DateTime!
}

"""Account Language Settings"""
type AccountSettingsLanguageDefault implements Identifier & Timestamps {
  adminLocale: String
  createdAt: ISO8601DateTime!
  id: Int!
  phishingLocale: String
  trainingLocale: String
  updatedAt: ISO8601DateTime!
}

"""The Learner Experience Account Settings"""
type AccountSettingsLearnerExperience implements Identifier & Timestamps {
  aidaOptionalTrainingAvailable: Boolean
  aidaOptionalTrainingEnabled: Boolean
  createdAt: ISO8601DateTime!
  customHelpEnabled: Boolean
  customHelpUrl: String
  dashboardEnabled: Boolean!
  dashboardShowsPhishingStatistics: Boolean!
  dashboardShowsRiskStatistics: Boolean!
  disableTour: Boolean
  id: Int!
  managerPhishingEnabled: Boolean
  managerRiskScoreEnabled: Boolean
  managerTrainingEnabled: Boolean
  managerUserInfoEnabled: Boolean
  mobileAppEnabled: Boolean
  optionalTrainingEnabled: Boolean
  updatedAt: ISO8601DateTime!
}

"""The Phishing Account Settings"""
type AccountSettingsPhishing implements Identifier & Timestamps {
  aidaSelectedAvailable: Boolean
  callbackPhishingEnabled: Boolean
  createdAt: ISO8601DateTime!
  customDomainPlaceholder: String
  customDomainPlaceholderEnabled: Boolean!
  disabledTemplateAttackVectors: [PhishingAttackVectors!]!
  id: Int!
  overrideRphAddress: Boolean!
  templateExclusions: JSON
  updatedAt: ISO8601DateTime!
}

"""Autogenerated return type of AccountSettingsPrivacyUpdateAccess"""
type AccountSettingsPrivacyUpdateAccessPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountSettingsSalesforceDisconnect"""
type AccountSettingsSalesforceDisconnectPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountSettingsSalesforceFetch"""
type AccountSettingsSalesforceFetchPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountSettingsSalesforceScheduleFetch"""
type AccountSettingsSalesforceScheduleFetchPayload {
  errors: [Error!]
  node: Account
}

"""The Saml Account Settings"""
type AccountSettingsSaml implements Identifier & Timestamps {
  allowAdminWithMfaLoginBypass: Boolean
  createdAt: ISO8601DateTime!
  disableNonSamlLogins: Boolean
  entityId: String
  id: Int!
  signSamlRequests: Boolean
  updatedAt: ISO8601DateTime!
}

"""Second Chance Account Settings"""
type AccountSettingsSecondChanceSetting implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  overviewDays: Int!
  updatedAt: ISO8601DateTime!
}

"""The Training Account Settings"""
type AccountSettingsTraining implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  enableLocalizedNotifications: Boolean
  enableSurveysDefault: Boolean!
  id: Int!
  updatedAt: ISO8601DateTime!
}

"""User Moves Settings"""
type AccountSettingsUserMoves implements Identifier {
  autofixUserDupError: Boolean!
  id: Int!
}

"""
Autogenerated return type of AccountSettingsUserProvisioningForceSyncScim
"""
type AccountSettingsUserProvisioningForceSyncScimPayload {
  errors: [Error!]
  node: UserProvisioning
}

"""
Autogenerated return type of AccountSettingsUserProvisioningPurgeScimV2
"""
type AccountSettingsUserProvisioningPurgeScimV2Payload {
  errors: [Error!]
  node: UserProvisioning
}

"""
Autogenerated return type of AccountSettingsUserProvisioningRegenerateScimToken
"""
type AccountSettingsUserProvisioningRegenerateScimTokenPayload {
  errors: [Error!]
  node: UserProvisioning
}

"""
Autogenerated return type of AccountSettingsUserProvisioningRevokeScimToken
"""
type AccountSettingsUserProvisioningRevokeScimTokenPayload {
  errors: [Error!]
  node: UserProvisioning
}

"""Autogenerated return type of AccountsInvokeReseed"""
type AccountsInvokeReseedPayload {
  errors: [Error!]
  node: Boolean
}

enum AccountSortFields {
  ORGANIZATION
  DOMAIN
  BILLING_TYPE
  ADMIN_LOCALE
  DATE_CREATED
  END_DATE
  PURCHASED_ADDONS
  SEATS
  USERS
  COURSES
  RISK_SCORE
  PHISH_PRONE
  PSTS
  USERS_PHISHED
  USERS_TRAINED
  VALID_DELETION_REQUEST
  PHISHER_ENABLED
}

"""Autogenerated return type of AccountsRefreshData"""
type AccountsRefreshDataPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountsRegenerateToken"""
type AccountsRegenerateTokenPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountsRequestDeletion"""
type AccountsRequestDeletionPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountsResetFreeCampaign"""
type AccountsResetFreeCampaignPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountsRevokeToken"""
type AccountsRevokeTokenPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountsStartEec"""
type AccountsStartEecPayload {
  errors: [Error!]
  node: Account
}

enum AccountStatuses {
  ALL
  ACTIVE
  ARCHIVED
}

"""Autogenerated return type of AccountsToggleArchived"""
type AccountsToggleArchivedPayload {
  errors: [Error!]
  node: Account
}

"""Autogenerated return type of AccountsUpdate"""
type AccountsUpdatePayload {
  errors: [Error!]
  node: Account
}

enum AccountTokens {
  api_token
  pst_token
  ldap_token
  entity_id
}

input AccountTrainingSettingsAttributes {
  id: Int
  enableSurveysDefault: Boolean
  enableLocalizedNotifications: Boolean
}

type ActiveRulesReport {
  csv: String!
  timeframe: ReportTimeframe
}

type ActiveRulesStatistics {
  repeatedUsers: Int
  ruleDetections: Int
  totalDetections: Int
  totalUsers: Int
}

type ActiveRulesTopRisky {
  count: Int
  email: String
}

type ActiveRulesTopRules {
  usersCount: Int
  workflowId: String
  workflowName: String
}

enum ActiveStatuses {
  ALL
  ACTIVE
  ARCHIVED
}

type AggregateChart {
  categories: [AggregateChartCategories!]!
  pfp: Float!
  ppp: Float!
  prp: Float!
  series: AggregateChartSeries!
  timeframe: ReportTimeframe
  totals: AggregateChartTotals!
}

type AggregateChartCategories {
  bounced: Int
  categories: String
  delivered: Int
  frequencyPeriod: Frequencies
  groups: String
  name: String
  startedAt: ISO8601DateTime
  timeframe: ReportTimeframe
}

type AggregateChartSeries {
  attachments: [AggregateChartSeriesData!]
  callbackCalled: [AggregateChartSeriesData!]
  callbackData: [AggregateChartSeriesData!]
  clicks: [AggregateChartSeriesData!]
  data: [AggregateChartSeriesData!]
  macros: [AggregateChartSeriesData!]
  ppp: [AggregateChartSeriesData!]
  qrCodes: [AggregateChartSeriesData!]
  replies: [AggregateChartSeriesData!]
  reports: [AggregateChartSeriesData!]
  timeframe: ReportTimeframe
}

type AggregateChartSeriesData {
  id: Int
  runId: Int
  timeframe: ReportTimeframe
  y: Int
}

type AggregateChartTotals {
  attachments: Int
  callbackCalled: Int
  callbackData: Int
  clicks: Int
  data: Int
  macros: Int
  qrCodes: Int
  replies: Int
  reports: Int
  timeframe: ReportTimeframe
}

type AggregateColumns {
  aggregateDetectionColumns: [ReportsSecurityCoachActivityRtcAggregateAggregateDetectionColumns!]
  timeframe: ReportTimeframe
  userColumns: [ReportsUserColumns!]
  userIdpDataColumns: [ReportsUserIdpDataColumns!]
}

type AggregateCsv {
  csv: String!
  timeframe: ReportTimeframe
}

type AggregateData {
  id: String
  maxRiskLevel: String
  sabUser: Int
  uniqueWorkflowCount: Int
  user: User
  workflowuserlogCount: Int
}

type AggregateResponse {
  columns: SecurityCoachDetectionRulesActivityAggregateColumns
  count: Int!
  next: String
  pageSize: Int!
  pagination: Pagination!
  previous: String
  results: [AggregateData!]!
  timeframe: ReportTimeframe!
  totalPages: Int!
}

type AggregateTable {
  attachmentOpenCount: Int!
  bouncedCount: Int!
  callbackDataEnteredCount: Int!
  calledCount: Int!
  clickedCount: Int!
  dataEnteredCount: Int!
  deliveredCount: Int!
  failuresCount: Int!
  macroEnabledCount: Int!
  openedCount: Int!
  ppp: Float!
  qrCodeScannedCount: Int!
  repliedCount: Int!
  reportedCount: Int!
  scheduledCount: Int!
  timeframe: ReportTimeframe
  user: User
}

type AliasData {
  alias: String
  aliasType: String
}

type AllDetectionEvents {
  alertType: String
  appClass: String
  appUsed: String
  clientIpaddress: String
  detectionCmdline: String
  detectionCount: String
  detectionDatetime: String
  detectionDescription: String
  detectionDeviceClass: String
  detectionDstCountry: String
  detectionEventName: String
  detectionFilePasswdProtected: String
  detectionFilename: String
  detectionFilepath: String
  detectionId: String
  detectionProcess: String
  detectionScenario: String
  detectionSource: String
  detectionSourceIp: String
  detectionTactic: String
  detectionThreatCategory: String
  detectionThreatCategoryLevel2: String
  detectionThreatName: String
  detectionThreatSeverity: String
  detectionThreatTechnique: String
  detectionThreatType: String
  detectionUrl: String
  detectionUserId: String
  detectionWebCountry: String
  deviceId: String
  directionality: String
  dlpRule: String
  emailSubject: String
  eventType: String
  fileSize: String
  fileType: String
  hostIpaddress: String
  hostName: String
  hostOsName: String
  hostOsPlatform: String
  hostOsVersion: String
  objectName: String
  policy: String
  securityProductContentDetails: String
  securityProductStatus: String
  securityProductThreatAction: String
  securityProductVersion: String
  senderEmailAddress: String
  usedProtocol: String
  userActivity: String
  userEmail: String
  userLocation: String
  userName: String
  userdataEmail: String
  vendorCodeName: String
  visitedDomainName: String
  visitedUrl: String
}

type AllDetections {
  events: [AllDetectionEvents!]
  totalEvents: Int
}

type AllDetectionsSummary {
  count: Int
  field: String
}

type AllDetectionStatistics {
  activeIntegrations: Int
  allDetections: Int
  allThreatCategories: Int
  avgDetectionsPerDay: Int
}

"""Allowed Domain"""
type AllowedDomain implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  isPrimary: Boolean!
  name: String!
  updatedAt: ISO8601DateTime!
  verificationStatus: AllowedDomainVerificationStatuses!
}

"""Autogenerated return type of AllowedDomainsCreate"""
type AllowedDomainsCreatePayload {
  errors: [Error!]
  node: AllowedDomain
}

type AllowedDomainsCursor {
  nodes: [AllowedDomain!]!
  pagination: Pagination!
}

"""Autogenerated return type of AllowedDomainsDelete"""
type AllowedDomainsDeletePayload {
  errors: [Error!]
  node: AllowedDomain
}

"""Autogenerated return type of AllowedDomainsImport"""
type AllowedDomainsImportPayload {
  errors: [Error!]
  node: [Int!]!
}

"""Autogenerated return type of AllowedDomainsVerify"""
type AllowedDomainsVerifyPayload {
  errors: [Error!]
  node: AllowedDomain
}

enum AllowedDomainTypes {
  domain
  subdomain
}

enum AllowedDomainVerificationStatuses {
  VERIFIED
  PENDING
}

type ApiEndpointData {
  cloudEndpointList: [String!]!
}

"""A API key basic auth config"""
type ApiKey {
  key: String!
  type: ApiKeyTypes!
  value: String!
}

enum ApiKeyTypes {
  headers
  query_params
}

"""The API Limit Account Settings"""
type ApiLimit implements Identifier & Timestamps {
  burstLimit: Int
  createdAt: ISO8601DateTime!
  dailyLimit: Int
  id: Int!
  updatedAt: ISO8601DateTime!
}

input ApiLimitSettingsAttributes {
  id: Int
  burstLimit: Int
  dailyLimit: Int
}

enum ApiScopes {
  kmsat
  phisher
  kcm
  piq
  mobile
  delta_share
}

"""An API Token"""
type ApiToken implements Timestamps {
  active: Boolean!
  createdAt: ISO8601DateTime!
  expiresOn: ISO8601DateTime
  id: Int!
  jwt: String!
  name: String!
  scopes: [ApiScopes!]!
  shareProfile: JSON
  sharedSecret: String
  updatedAt: ISO8601DateTime!
  user: User
  uuid: String!
}

input ApiTokenAttributes {
  name: String!
  active: Boolean!
  userId: Int!
  expiresOn: ISO8601Date
  scopes: [ApiScopes!]
}

"""Autogenerated return type of ApiTokensCreate"""
type ApiTokensCreatePayload {
  errors: [Error!]
  node: ApiToken
}

type ApiTokensCursor {
  nodes: [ApiToken!]!
  pagination: Pagination!
}

"""Autogenerated return type of ApiTokensDelete"""
type ApiTokensDeletePayload {
  errors: [Error!]
  node: ApiToken
}

"""Autogenerated return type of ApiTokensReassign"""
type ApiTokensReassignPayload {
  errors: [Error!]
  nodes: [ApiToken!]
}

"""Autogenerated return type of ApiTokensUpdate"""
type ApiTokensUpdatePayload {
  errors: [Error!]
  node: ApiToken
}

"""An API Token"""
type ApiTokenValidation {
  accountId: Int
  accountName: String
  petJwt: String
  reason: String
  skus: [AccountPurchasedSku!]!
  userId: Int
  valid: Boolean!
}

"""A group criterion argument"""
union Argument = Assessments | BreachEvent | CustomEvent | PasswordIqEvent | PasswordIqState | PhishEvent | PhishFlipEvent | PostTrainingEvent | SecurityCoach | SecurityCoachRealTimeCoaching | Training | UserDate | UserField | VishEvent

"""Modstore store item artwork"""
type Artwork {
  coverImage: String
  headerImage: String
}

"""Autogenerated return type of AsapCreateProgram"""
type AsapCreateProgramPayload {
  errors: [Error!]
  node: AsapProgram
}

"""Autogenerated return type of AsapCreateProgramTask"""
type AsapCreateProgramTaskPayload {
  errors: [Error!]
  node: AsapProgramTask
}

"""Autogenerated return type of AsapDeleteProgram"""
type AsapDeleteProgramPayload {
  errors: [Error!]
  node: AsapProgram
}

"""ASAP program"""
type AsapProgram implements Timestamps {
  createdAt: ISO8601DateTime!
  endDate: ISO8601DateTime
  hasProgramTasks: Boolean
  id: Int
  programProfile: AsapProgramProfile!
  programTasks: [AsapProgramTask!]!
  startDate: ISO8601DateTime
  title: String
  updatedAt: ISO8601DateTime!
}

input AsapProgramAttributes {
  endDate: ISO8601Date
  programProfile: AsapProgramProfileAttributes
  programTasks: [AsapProgramTaskAttributes!]
  startDate: ISO8601Date
}

"""ASAP program profile"""
type AsapProgramProfile implements Timestamps {
  answers: JSON
  behaviorChanges: [Int!]
  companySize: String
  compliance: [Int!]
  createdAt: ISO8601DateTime!
  defaultAssessmentPolymorphicId: String
  defaultCultureSurveyPolymorphicId: String
  defaultLocales: AccountSettingsLanguageDefault
  endDate: ISO8601DateTime
  goals: [String!]
  id: Int
  industry: Industry
  maturity: Float
  numberOfSeats: Int
  presentationTypes: [Int!]
  programTasks: [AsapProgramTask!]!
  readiness: Float
  roles: [Int!]
  startDate: ISO8601DateTime
  updatedAt: ISO8601DateTime!
  userPhishingLanguages: [Languages!]
  userTrainingLanguages: [Languages!]
}

input AsapProgramProfileAttributes {
  answers: JSON
  behaviorChanges: [Int!]
  compliance: [Int!]
  goals: [String!]
  maturity: Float
  presentationTypes: [Int!]
  roles: [Int!]
  readiness: Float
}

"""One ASAP program task"""
type AsapProgramTask implements Identifier & Timestamps {
  calendarDays: Int
  completedDate: ISO8601Date
  createdAt: ISO8601DateTime!
  description: String
  endDate: ISO8601Date
  estimatedDuration: String
  estimatedDurationInMinutes: Int
  id: Int!
  position: Int!
  programId: Int!
  programTaskActions: [AsapProgramTaskAction!]!
  startDate: ISO8601Date
  status: AsapTaskStatuses!
  subtitle: String
  taskCategory: AsapTaskCategories!
  taskClass: String
  title: String
  updatedAt: ISO8601DateTime!
  variant: Int
}

"""An action associated with a program task"""
type AsapProgramTaskAction {
  campaignId: Int
  id: Int!
  trainingCampaignId: Int
  type: String!
  usbCampaignId: Int
  vishingCampaignId: Int
}

input AsapProgramTaskActionAttributes {
  campaignId: Int
  trainingCampaignId: Int
  vishingCampaignId: Int
  usbCampaignId: Int
  id: Int
  type: String!
  _destroy: Boolean
}

input AsapProgramTaskAttributes {
  id: Int
  calendarDays: Int
  completedDate: ISO8601Date
  description: String
  endDate: ISO8601Date
  estimatedDuration: String
  estimatedDurationInMinutes: Int
  position: Int
  programTaskActions: [AsapProgramTaskActionAttributes!]
  startDate: ISO8601Date
  status: AsapTaskStatuses
  subtitle: String
  taskCategory: AsapTaskCategories
  taskClass: String
  title: String
  variant: Int
}

enum AsapTaskCategories {
  PRE_WORK
  KICK_OFF
  ONGOING_TRAINING
  SOCIAL_ENGINEERING
  MEASUREMENTS_AND_REVIEW
}

enum AsapTaskStatuses {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

"""Autogenerated return type of AsapUpdateProgram"""
type AsapUpdateProgramPayload {
  errors: [Error!]
  node: AsapProgram
}

"""Autogenerated return type of AsapUpdateProgramTask"""
type AsapUpdateProgramTaskPayload {
  errors: [Error!]
  node: AsapProgramTask
}

"""An assessment domain"""
type AssessmentDomain implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  name: String!
  updatedAt: ISO8601DateTime!
}

input AssessmentDomainArgument {
  id: Int!
  name: String!
}

"""An assessment domain/dimension result"""
type AssessmentDomainResult {
  name: String!
  score: Float!
}

enum AssessmentDomains {
  ATTITUDES
  BEHAVIOR
  COGNITION
  COMMUNICATION
  COMPLIANCE
  EMAIL_SECURITY
  FREQUENCY_OF_TRAINING
  INCIDENT_REPORTING
  INDCOL
  INTERNET_USE
  LEVEL_OF_CONFIDENCE
  LEVEL_OF_CONFIDENCE_HUMAN_FIREWALL
  MOBILE_DEVICES
  NORMS
  PASSWORDS_AUTHENTICATION
  RESPONSIBILITY
  SOCIAL_MEDIA
  HUMAN_FIREWALL
}

"""Assessment Benchmarking data for an industry"""
type AssessmentIndustryBenchmark implements Identifier & Timestamps {
  assessmentIndustryBenchmarkDomains: [AssessmentIndustryBenchmarkDomain!]!
  createdAt: ISO8601DateTime!
  id: Int!
  industry: Industries!
  industryAverageId: Int
  scoreLarge: Float!
  scoreMedium: Float!
  scoreSmall: Float!
  updatedAt: ISO8601DateTime!
}

"""Assessment Benchmarking domain"""
type AssessmentIndustryBenchmarkDomain implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  domain: AssessmentDomains!
  id: Int!
  scoreLarge: Float!
  scoreMedium: Float!
  scoreSmall: Float!
  updatedAt: ISO8601DateTime!
}

"""Security Culture Assessment results"""
type AssessmentResults {
  domains: [AssessmentDomainResult!]!
  score: Float!
}

type Assessments implements Identifier {
  boolean: Booleans!
  comparison: EventComparisons!
  count: Int!
  domains: [AssessmentDomain!]!
  id: Int!
  inclusion: TrainingAssessmentInclusions!
  timeframe: Timeframe!
}

input AssessmentsArgument {
  bool: Booleans!
  countType: EventComparisons!
  inclusionType: TrainingAssessmentInclusions!
  domains: [AssessmentDomainArgument!]!
  count: Int!
  timeframe: TimeframeArgument!
}

enum AssessmentTypes {
  KNOWLEDGE
  CULTURE
}

"""ModStore Asset Property"""
type AssetProperty {
  capability: String
  description: String
  id: Int!
  name: String
}

"""A type of attachment"""
type Attachment {
  ext: String!
  name: String!
}

"""Audit Event Details"""
type AuditDetails {
  action: String
  eventTypeDescription: String
  eventTypeName: String
}

type AuditLog {
  data: String
  datetime: String
  metadata: String
  status: String
}

type AuditLogData {
  count: Int
  errors: Boolean
  logs: [AuditLog!]
}

type AuditLogS3Data {
  data: String
  errors: Boolean
}

input AuditLogsDateRange {
  startDate: ISO8601Date!
  endDate: ISO8601Date!
}

input AuditLogsPaginationAttributes {
  per: Int!
  searchAfter: ISO8601DateTime
}

"""Audit metadata for an event"""
type AuditMetadata {
  auditDetails: AuditDetails
  campaignName: String
  companyName: String
  userEmail: String
  userType: String
}

"""A type of webhook auth"""
union AuthMethod = ApiKey | Basic | Bearer

enum AutoPrependEmailBannerTypes {
  MANUAL
  DMI_ONLY
  ALWAYS
}

enum AutoPrependSubjectPrefixTypes {
  MANUAL
  DMI_ONLY
  ALWAYS
}

"""A detailed badge for gamification"""
type Badge {
  acknowledgedAt: ISO8601DateTime
  description: String!
  earnedAt: ISO8601DateTime
  icon: String!
  id: Int
  title: String!
  type: String
  viewedAt: ISO8601DateTime
}

enum Badges {
  CYBERHEROBADGE
  EAGERBEAVERBADGE
  EAGLEEYEBADGE
  EARLYBIRDBADGE
  GRADUATEBADGE
  HATTRICKBADGE
  LIGHTNINGFASTBADGE
  LINGUISTBADGE
  NEWRECRUITBADGE
  NIGHTOWLBADGE
  ONTHEGOBADGE
  PIONEERBADGE
}

"""Autogenerated return type of BadgesAcknowledge"""
type BadgesAcknowledgePayload {
  errors: [Error!]
  nodes: [Badge!]
}

"""Autogenerated return type of BadgesEarn"""
type BadgesEarnPayload {
  errors: [Error!]
  nodes: [Badge!]
}

"""Autogenerated return type of BadgesView"""
type BadgesViewPayload {
  errors: [Error!]
  nodes: [Badge!]
}

"""A Webhook basic auth config"""
type Basic {
  password: String!
  username: String!
}

"""A Bearer auth config"""
type Bearer {
  token: String!
}

enum BenchmarkCompanySize {
  SMALL
  MEDIUM
  LARGE
}

enum BenchmarkTimeframes {
  BASELINE
  DAYS90
  YEAR
}

"""
Represents non-fractional signed whole numeric values. Since the value may
exceed the size of a 32-bit integer, it's encoded as a string.
"""
scalar BigInt

enum Booleans {
  MUST
  MUST_NOT
}

"""Breach Metadata for an event"""
type BounceMetadata implements EventMetadataInterface {
  bounceCode: String
  bounceReason: String
  templateId: Int
  templateName: String
  templateType: String
  templateUuid: String
}

"""Breach Event Details"""
type BreachDetails {
  description: String
  targetEmail: String
  title: String
  type: String
}

type BreachEvent implements Identifier {
  boolean: Booleans!
  comparison: EventComparisons!
  count: Int!
  event: BreachEvents!
  id: Int!
  timeframe: Timeframe!
}

input BreachEventArgument {
  bool: Booleans!
  event: BreachEvents!
  countType: EventComparisons!
  count: Int!
  timeframe: TimeframeArgument!
}

enum BreachEvents {
  BREACHED
}

"""Breach Metadata for an event"""
type BreachMetadata {
  breach: BreachDetails
}

"""Browser metadata for an event"""
type BrowserMetadata implements EventMetadataInterface {
  browser: String
  browserVersion: String
  templateId: Int
  templateName: String
  templateType: String
  templateUuid: String
}

type BulkVendorStatusData {
  vendors: [VendorRegistrationStatus!]
}

type ByCampaign {
  csv: String!
  data: [ByCampaignData!]!
  timeframe: ReportTimeframe
}

type ByCampaignData {
  courseName: String
  length: Float!
  name: String
  style: Float!
  surveyCount: Int!
  timeframe: ReportTimeframe
  trainingCampaignId: Int
  value: Float!
}

type ByCourse {
  csv: String!
  data: [ByCourseData!]!
  timeframe: ReportTimeframe
}

type ByCourseData {
  courseName: String
  id: Int
  length: Float!
  style: Float!
  surveyCount: Int!
  timeframe: ReportTimeframe
  value: Float!
}

"""Common Fields for Callback Phishing Audio Templates"""
interface CallbackPhishingAudioTemplateInterface {
  callbackPhishingAudioTemplateMessages: [CallbackPhishingAudioTemplateMessage!]!
  languageCode: String!
  persona: String!
  storeItemUuid: String
  templateTranslationUuid: String
  title: String!
}

"""A Callback Phishing Audio Template Message"""
type CallbackPhishingAudioTemplateMessage implements Identifier & Timestamps {
  audioStepCode: String!
  createdAt: ISO8601DateTime!
  id: Int!
  stage: String!
  textToSpeech: String!
  updatedAt: ISO8601DateTime!
}

"""A Callback Phishing Greeting Audio Template"""
type CallbackPhishingGreetingTemplate implements Identifier & Timestamps & CallbackPhishingAudioTemplateInterface {
  callbackPhishingAudioTemplateMessages: [CallbackPhishingAudioTemplateMessage!]!
  createdAt: ISO8601DateTime!
  id: Int!
  languageCode: String!
  persona: String!
  storeItemUuid: String
  templateTranslationUuid: String
  title: String!
  updatedAt: ISO8601DateTime!
}

"""A Phone Number for Callback Phishing"""
type CallbackPhishingPhoneNumber implements Identifier & Timestamps {
  areaCode: String
  awsArn: String
  countryCode: String
  createdAt: ISO8601DateTime!
  dedicated: Boolean
  doNotDelete: Boolean!
  id: Int!
  lastUsedAt: ISO8601DateTime
  phoneNumber: String
  recipientCount: Int
  regionName: String!
  status: CallbackPhishingPhoneNumberStatuses
  tollFree: Boolean
  updatedAt: ISO8601DateTime!
}

enum CallbackPhishingPhoneNumberRegions {
  DID_US
  TF_US
  DID_BE
  DID_CA
  DID_CZ
  DID_FR
  DID_DE
  DID_MX
  DID_GB
}

type CallbackPhishingPhoneNumbersCursor {
  nodes: [CallbackPhishingPhoneNumber!]!
  pagination: Pagination!
}

enum CallbackPhishingPhoneNumberSortFields {
  AREA_CODE
  AWS_ARN
  CREATED_AT
  COUNTRY_CODE
  DEDICATED
  DO_NOT_DELETE
  LAST_USED_AT
  PHONE_NUMBER
  RECIPIENT_COUNT
  STATUS
  TOLL_FREE
}

enum CallbackPhishingPhoneNumberStatuses {
  ALL
  AVAILABLE
  ACTIVE
  FULL
  COOLDOWN
  ARCHIVED
}

"""
Autogenerated return type of CallbackPhishingPhoneNumbersToggleDeletion
"""
type CallbackPhishingPhoneNumbersToggleDeletionPayload {
  errors: [Error!]
  node: CallbackPhishingPhoneNumber
}

"""A Callback Phishing Response Audio Template"""
type CallbackPhishingResponseTemplate implements Identifier & Timestamps & CallbackPhishingAudioTemplateInterface {
  callbackPhishingAudioTemplateMessages: [CallbackPhishingAudioTemplateMessage!]!
  createdAt: ISO8601DateTime!
  id: Int!
  languageCode: String!
  persona: String!
  storeItemUuid: String
  templateTranslationUuid: String
  title: String!
  updatedAt: ISO8601DateTime!
}

"""Email Templates for Phishing"""
type CallbackPhishingTemplate implements EmailTemplateInterface {
  archived: Boolean!
  contentHtml: String
  createdAt: ISO8601DateTime!
  from: String!
  fromDisplayName: String
  fromSanitized: String!
  fromWithDomain: String!
  hidden: Boolean!
  id: Int!
  languageCode: String
  markedAsUpdatedAt: ISO8601DateTime
  name: String
  rating: EmailTemplateDifficultyRatings
  ratingRaw: Int
  replyTo: String
  replyToDisplayName: String
  subject: String!
  subjectSanitized: String!
  templateTranslationUuid: String!
  topics: [TemplateTopic!]
  translations: [PhishingTemplateTranslation!]
  type: CallbackPhishingTemplateTypes!
  updatedAt: ISO8601DateTime!
}

type CallbackPhishingTemplatesCursor {
  nodes: [PhishingTemplate!]!
  pagination: Pagination!
}

enum CallbackPhishingTemplateTypes {
  CALLBACK_PHISHING
  CALLBACK_PHISHING_SYSTEM
}

"""Autogenerated return type of CallbackPhishingTestEmailsCreate"""
type CallbackPhishingTestEmailsCreatePayload {
  errors: [Error!]
  node: Int
}

"""A message campaign"""
type Campaign implements Identifier & Timestamps {
  active: Boolean!
  allUsers: Boolean!
  authoredBy: User
  campaignTopics: [MessageTopic!]
  campaignType: MessagesCampaignTypes
  createdAt: ISO8601DateTime!
  frequency: MessagesCampaignFrequencyTypes
  groups: [Group!]
  id: Int!
  messageContents: [MessageContent!]
  messagesRuns: [Run!]
  name: String
  nextRun: ISO8601DateTime
  recurring: Boolean!
  sendEmail: Boolean!
  status: MessagesCampaignStatuses
  updatedAt: ISO8601DateTime!
  useCompanyLogo: Boolean!
}

type CampaignCount {
  count: Int
  name: String
}

"""CampaignDeliveryMethod type"""
type CampaignDeliveryMethod {
  deliverableId: Int!
  deliverableType: String!
  deliveryMethod: CampaignDeliveryMethodTypes!
  domain: String!
}

"""CampaignDeliveryMethodTypes"""
enum CampaignDeliveryMethodTypes {
  PSM
  DMI
}

type CampaignOverview {
  coachingDelivered: Int
  detectionData: [DetectionData!]
  newUsersCoached: Int
  repeatedOffenders: Int
  riskiestUsers: [TopRiskyUsers!]
  totalUsersCoached: Int
}

enum CampaignRecipientStatuses {
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  DROPPED
  PROCESSED
  ATTACHMENT_OPEN
  MACRO_ENABLED
  DATA_ENTERED
  REPORTED
  QR_CODE_SCANNED
  CALLED
  CALLBACK_DATA_ENTERED
  REPLIED
}

type CampaignsCursor {
  nodes: [Campaign!]!
  pagination: Pagination!
}

enum CampaignStatuses {
  active
  inactive
}

"""CCM store item"""
type CcmItem implements StoreItemInterface {
  artwork: Artwork!
  description: String
  expectedDurationInMinutes: Int
  id: Int!
  mobileAppCompatible: Boolean!
  publishedAt: ISO8601DateTime
  title: String!
  translations: [Translation!]!
  type: String!
  uuid: String!
}

type CdrmsCategories {
  count: Int
  next: String
  previous: String
  results: [CdrmsCategory!]
}

type CdrmsCategory {
  created: String
  id: String
  modified: String
  name: String
}

type CdrmsRule {
  category: CompositeField
  code: String
  configureFrequency: Int
  created: String
  deliveryFrequency: Int
  description: String
  id: String
  modified: String
  name: String
  riskLevel: String
  rtcCoachingMessage: String
  rule: TeachableMomentRule
  severity: String
  stage: String
  techContentReviewedName: String
  topics: [CompositeField!]
  vendorCodeName: String
}

type CdrmsRules {
  count: Int
  next: String
  previous: String
  results: [CdrmsRule!]
}

type CdrmsTopic {
  created: String
  id: String
  modified: String
  name: String
}

type CdrmsTopics {
  count: Int
  next: String
  previous: String
  results: [CdrmsTopic!]
}

type CdrmsVendor {
  created: String
  id: String
  logType: String
  modified: String
  name: String
  vendorCodeName: String
  vendorType: String
}

type CdrmsVendors {
  count: Int
  next: String
  previous: String
  results: [CdrmsVendor!]
}

type Channel {
  id: String
  status: MsTeamsStatus
  workspace: String
}

type ChildrensLibraryAccountsCursor {
  nodes: [Account!]!
  pagination: Pagination!
}

type CloneRuleResponse {
  newTms: [TeachableMomentRules!]
  updatedTms: [TeachableMomentRules!]
}

"""An int, or a string coerced to an int"""
scalar CoercedInt

union Columns = AggregateColumns | GlobalPhishingAggregateColumns | GlobalPhishingRawColumns | GlobalTrainingAggregateColumns | GlobalTrainingRawColumns | LearnerPlatformRawColumns | RawColumns | SecurityCoachDetectionRulesActivityAggregateColumns | SecurityCoachDetectionRulesActivityRawColumns

"""Common Metadata for an event"""
type CommonMetadata implements EventMetadataInterface {
  templateId: Int
  templateName: String
  templateType: String
  templateUuid: String
}

enum Comparisons {
  EQUAL
  CONTAINS
  STARTS_WITH
  ENDS_WITH
  GREATER_THAN
  LESS_THAN
}

type CompositeField {
  id: String
  name: String
}

union Configurations = ReportsConfigurationsAccountReportCard | ReportsConfigurationsActiveRulesReport | ReportsConfigurationsAssessmentScoreByKnowledgeArea | ReportsConfigurationsAssessmentScoreByKnowledgeAreaOverTime | ReportsConfigurationsEmailsSentByGroup | ReportsConfigurationsEmailsSentByTemplate | ReportsConfigurationsFailureTypeUserCounts | ReportsConfigurationsFailureTypesBarChart | ReportsConfigurationsFailuresByPhishingTemplate | ReportsConfigurationsGlobalPhishingAggregate | ReportsConfigurationsGlobalPhishingRaw | ReportsConfigurationsGlobalTrainingAggregate | ReportsConfigurationsGlobalTrainingRaw | ReportsConfigurationsGroupReportCard | ReportsConfigurationsIncompleteTraining | ReportsConfigurationsInitialPpp | ReportsConfigurationsLearnerPlatformRaw | ReportsConfigurationsNoTrainingAssigned | ReportsConfigurationsOverallPppByAccount | ReportsConfigurationsOverallPppByCampaign | ReportsConfigurationsOverallPppByGroup | ReportsConfigurationsOverallPppByTrainingTime | ReportsConfigurationsPabUserActivity | ReportsConfigurationsPhishFailurePercentageByCampaigns | ReportsConfigurationsPhishFailurePercentageOverall | ReportsConfigurationsPhishingSecurityTests | ReportsConfigurationsPppDistribution | ReportsConfigurationsRiskScoreByAssessment | ReportsConfigurationsRiskScoreByGroup | ReportsConfigurationsRiskScoreByLocation | ReportsConfigurationsRiskScoreBySurvey | ReportsConfigurationsRiskScoreByUser | ReportsConfigurationsSecurityCoachActivityRtcAggregate | ReportsConfigurationsSecurityCoachActivityRtcRaw | ReportsConfigurationsSecurityCoachDetectionRulesActivityAggregate | ReportsConfigurationsSecurityCoachDetectionRulesActivityRaw | ReportsConfigurationsSurveyScoreByDimension | ReportsConfigurationsSurveyScoreByDimensionOverTime | ReportsConfigurationsTrainingCampaignEnrollments | ReportsConfigurationsTrainingCampaignSurveys | ReportsConfigurationsTrainingComparisonByPpp | ReportsConfigurationsTrainingComparisonByRiskScore | ReportsConfigurationsTrainingHours | ReportsConfigurationsTrainingInteractionsByGroup | ReportsConfigurationsTrainingInteractionsByPurchasedCourse | ReportsConfigurationsTrainingNotStarted | ReportsConfigurationsTrainingStatusByCampaign | ReportsConfigurationsTrainingStatusByCourse | ReportsConfigurationsTrainingStatusByGroup | ReportsConfigurationsTrainingStatusesByCampaign | ReportsConfigurationsTrainingSurveysByCampaign | ReportsConfigurationsTrainingSurveysByCourse | ReportsConfigurationsUnphishedUsers | ReportsConfigurationsUserCountByAssessment | ReportsConfigurationsUserCountBySurvey | ReportsConfigurationsUserCounts | ReportsConfigurationsUserReportCard | ReportsConfigurationsUserSignIns | ReportsConfigurationsUsersList

"""Modstore content type"""
type Content {
  code: String!
  description: String
  icon: String
  id: Int
  name: String
  translationKey: String!
}

type ContentTheme {
  colorPrimary: String!
  defaultForAccount: Boolean!
  defaultTranslation: ThemeTranslation
  id: Int
  logoDataUrl: String!
  logoUrl: String!
  name: String!
  trainingCampaigns: [TrainingCampaign!]!
  translations: [ThemeTranslation!]
  updatedAt: ISO8601DateTime
}

"""Autogenerated return type of ContentThemeAssignToTrainingCampaign"""
type ContentThemeAssignToTrainingCampaignPayload {
  errors: [Error!]
  node: ContentTheme
}

input ContentThemeAttributes {
  name: String!
  colorPrimary: String!
  logo: File
  email: String
  phoneNumber: String
  documentLinks: [DocumentsLinkAttributes!]
  socialMediaLinks: [SocialMediaLinkAttributes!]
  introSlide: ThemeSlideAttributes
  outroSlide: ThemeSlideAttributes
}

"""Autogenerated return type of ContentThemeClone"""
type ContentThemeClonePayload {
  errors: [Error!]
  node: ContentTheme
}

"""Autogenerated return type of ContentThemeCreate"""
type ContentThemeCreatePayload {
  errors: [Error!]
  node: ContentTheme
}

"""Autogenerated return type of ContentThemeDelete"""
type ContentThemeDeletePayload {
  errors: [Error!]
  node: ContentTheme
}

"""Autogenerated return type of ContentThemeRemoveDefault"""
type ContentThemeRemoveDefaultPayload {
  errors: [Error!]
  node: ContentTheme
}

"""Autogenerated return type of ContentThemeRemoveFromTrainingCampaign"""
type ContentThemeRemoveFromTrainingCampaignPayload {
  errors: [Error!]
  node: TrainingCampaign
}

type ContentThemesCursor {
  nodes: [ContentTheme!]!
  pagination: Pagination!
}

"""Autogenerated return type of ContentThemeSetDefault"""
type ContentThemeSetDefaultPayload {
  errors: [Error!]
  node: ContentTheme
}

"""Autogenerated return type of ContentThemeUpdate"""
type ContentThemeUpdatePayload {
  errors: [Error!]
  node: ContentTheme
}

type Count {
  configurationGroups: [PiqWidgetConfigurationGroup!]!
  detection: DetectionTypes!
  groups: [Group!]!
  title: String
  type: PiqWidget!
  userType: PiqUserTypes
}

"""A training Campaign Asset"""
union Course = Policy | PurchasedCourse

"""Course alternative for archived or retired course"""
type CourseAlternative implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  status: String
  title: String!
  updatedAt: ISO8601DateTime!
  uuid: String!
}

enum CourseTypes {
  COURSE
  POLICY
  ASSESSMENT
}

type CsvError {
  codes: [String!]!
  row: CsvRowDetail
  rowIndex: Int!
}

type CsvRowDetail {
  email: String
  hostname: String
  username: String
}

type CsvStatusDetails {
  errors: [CsvError!]!
  failedRowCount: Int
  successRowCount: Int!
  totalRowCount: Int!
}

"""Autogenerated return type of CurrentActorsSignOut"""
type CurrentActorsSignOutPayload {
  errors: [Error!]
  node: Boolean
}

type CustomEvent implements Identifier {
  boolean: Booleans!
  comparison: EventComparisons!
  count: Int!
  description: String
  event: CustomEventDefinition!
  externalIds: [String!]!
  id: Int!
  source: CustomEventDefinition
  timeframe: Timeframe!
}

input CustomEventArgument {
  bool: Booleans!
  countType: EventComparisons!
  event: CustomEventDefinitionArgument!
  count: Int!
  source: CustomEventDefinitionArgument
  externalId: [String!]!
  description: String
  timeframe: TimeframeArgument!
}

type CustomEventDefinition {
  id: BigInt!
  label: String!
}

input CustomEventDefinitionArgument {
  id: BigInt
  label: String
}

"""Custom Event"""
type CustomEventTypesAndSources {
  sources: [EventSource!]
  types: [Event!]
}

"""Custom notification"""
type CustomNotification {
  createdAt: ISO8601DateTime!
  customTranslations: [CustomTranslation!]
  id: String!
  languageCount: Int!
  name: String!
  notificationType: String!
  status: CustomNotificationStatuses!
  updatedAt: ISO8601DateTime!
}

input CustomNotificationFormAttributes {
  name: String
  status: CustomNotificationFormStatuses
}

enum CustomNotificationFormStatuses {
  draft
  active
  archived
}

type CustomNotificationsCursor {
  nodes: [CustomNotification!]!
  pagination: Pagination!
}

input CustomNotificationsListAttributes {
  languages: [Languages!] = []
  languagesCombined: Boolean = false
  search: String
  sortDirection: SortDirections = ASCENDING
  sortField: CustomNotificationSortFields = name
  status: CustomNotificationStatuses
}

enum CustomNotificationSortFields {
  name
  language_count
  updated_at
}

enum CustomNotificationStatuses {
  draft
  active
  archived
  all
}

type CustomTerm {
  baseTerm: String!
  id: ID!
  swapTerm: String!
}

input CustomTermAttributes {
  baseTerm: String!
  swapTerm: String!
}

"""Custom translation"""
type CustomTranslation {
  contentHtml: String
  contentText: String
  createdAt: ISO8601DateTime!
  customNotificationId: Int!
  from: String!
  fromDisplayName: String
  id: Int!
  languageCode: Languages!
  replyTo: String
  replyToDisplayName: String
  subject: String!
  updatedAt: ISO8601DateTime!
}

input CustomTranslationFormAttributes {
  languageCode: Languages
  from: String!
  fromDisplayName: String
  replyTo: String
  replyToDisplayName: String
  subject: String!
  contentHtml: String!
  customNotificationId: Int
}

type DataPoint {
  timeframe: ReportTimeframe
  x: Float
  y: Float
}

type DataSeries {
  data: [DataPoint!]!
  name: String!
  timeframe: ReportTimeframe
}

enum DateFields {
  CREATED_AT
  LAST_SIGN_IN_AT
  EMPLOYEE_START_DATE
  CUSTOM_DATE_1
  CUSTOM_DATE_2
  LAST_PASSWORD_CHANGE_DATE_TIME
}

enum DateUnits {
  MONTH
  DAY
  WEEK
  MINUTE
  HOUR
}

input DefaultLanguages {
  adminLocale: String
  phishingLocale: String
  trainingLocale: String
}

enum Delimiters {
  space
  underscore
  period
  hyphen
  empty
}

"""Delivery Channels"""
type DeliveryChannel {
  channel: DeliveryMethods!
  deliveryChannelId: String!
  workspaceId: String!
}

enum DeliveryMethods {
  slack
  teams
}

"""Password IQ Detection Type"""
type Detection {
  name: String!
}

type DetectionComparison {
  configurationGroups: [PiqWidgetConfigurationGroup!]!
  detection: DetectionTypes!
  groups: [Group!]!
  title: String
  type: PiqWidget!
  userType: PiqUserTypes
}

"""Password IQ Detection Count Data"""
type DetectionCountData {
  counts: DetectionCounts!
  lastScan: ISO8601DateTime
}

enum DetectionCountFilters {
  ANY
  EQUALS_ONE
  GREATER_THAN_ONE
  GREATER_THAN_FIVE
}

"""Password IQ Detection Counts"""
type DetectionCounts {
  AD_PW_CLEAR_TEXT: Int
  AD_PW_EMPTY: Int
  AD_PW_FOUND_IN_BREACH: Int
  AD_PW_NEVER_EXPIRES: Int
  AD_PW_NOT_REQD: Int
  AD_PW_SHARED: Int
  AD_PW_WEAK: Int
  AD_USER_AES_ENCRYPTION_NOT_SET: Int
  AD_USER_DES_ONLY_ENCRYPTION: Int
  AD_USER_HAS_PREAUTHENTICATION: Int
  AD_USER_USES_LM_HASH: Int
  ALL: Int
}

type DetectionData {
  count: Int
  createdAt: ISO8601Date
}

enum DetectionDeliveryMethods {
  email
  slack
  teams
}

type DetectionsCursor {
  nodes: [SecurityCoachDetection!]!
  pagination: Pagination!
}

enum DetectionTypes {
  AD_PW_WEAK
  AD_PW_SHARED
  AD_PW_EMPTY
  AD_PW_CLEAR_TEXT
  AD_PW_NOT_REQD
  AD_PW_NEVER_EXPIRES
  AD_USER_USES_LM_HASH
  AD_USER_AES_ENCRYPTION_NOT_SET
  AD_USER_DES_ONLY_ENCRYPTION
  AD_USER_HAS_PREAUTHENTICATION
  AD_PW_FOUND_IN_BREACH
}

"""Linked device details"""
type DeviceDetails implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  deviceId: String!
  fcmToken: String
  id: Int!
  label: String
  updatedAt: ISO8601DateTime!
}

input DeviceDetailsAttributes {
  label: String!
  deviceId: String!
  apiTokenId: Int!
  fcmToken: String
}

"""Autogenerated return type of DeviceDetailsCreate"""
type DeviceDetailsCreatePayload {
  errors: [Error!]
  node: DeviceDetails
}

"""Autogenerated return type of DeviceDetailsDelete"""
type DeviceDetailsDeletePayload {
  errors: [Error!]
  node: DeviceDetails
}

"""Autogenerated return type of DeviceDetailsUpdate"""
type DeviceDetailsUpdatePayload {
  errors: [Error!]
  node: DeviceDetails
}

type DimensionPoint {
  timeframe: ReportTimeframe
  x: SurveyDimensions!
  y: Float!
}

type DimensionSeries {
  data: [DimensionPoint!]!
  name: String!
  timeframe: ReportTimeframe
}

type DimensionSeriesCollection {
  csv: String!
  dataseries: [DimensionSeries!]!
  timeframe: ReportTimeframe
}

type DimensionTimeSeries {
  data: [TimePoint!]!
  name: SurveyDimensions!
  timeframe: ReportTimeframe
}

type DimensionTimeSeriesCollection {
  csv: String!
  timeframe: ReportTimeframe
  timeseries: [DimensionTimeSeries!]!
}

"""Direct report statistics"""
type DirectReport implements Identifier & Timestamps {
  completeEnrollments: [Enrollment!]!
  createdAt: ISO8601DateTime!
  dueSoonEnrollments: [Enrollment!]!
  email: String!
  failures: [PhishingCampaignRecipient!]
  hasDirectReports: Boolean!
  id: Int!
  jobTitle: String
  name: String!
  optionalEnrollments: [Enrollment!]!
  pastDueEnrollments: [Enrollment!]!
  phishingStatistics: UserPhishingStatistics
  trainingPercentComplete: Float!
  updatedAt: ISO8601DateTime!
}

type DirectReportsCursor {
  nodes: [DirectReport!]!
  pagination: Pagination!
}

type DistributionCollection {
  csv: String!
  dataseries: [DataSeries!]!
  timeframe: ReportTimeframe
}

"""DKIM Config"""
type DkimConfig implements Identifier & Timestamps {
  allowedDomainId: Int
  createdAt: ISO8601DateTime!
  custom: Boolean!
  dnsTxt: String
  domain: String!
  emailType: DkimEmailTypes!
  enabled: Boolean!
  fqdn: String
  id: Int!
  selector: String!
  updatedAt: ISO8601DateTime!
  validatedAt: ISO8601DateTime
}

input DkimConfigAttributes {
  id: Int
  custom: Boolean
  emailType: DkimEmailTypes
  enabled: Boolean
  allowedDomainId: Int
}

"""Autogenerated return type of DkimConfigsCreate"""
type DkimConfigsCreatePayload {
  errors: [Error!]
  node: DkimConfig
}

"""Autogenerated return type of DkimConfigsDelete"""
type DkimConfigsDeletePayload {
  errors: [Error!]
  node: DkimConfig
}

"""Autogenerated return type of DkimConfigsUpdate"""
type DkimConfigsUpdatePayload {
  errors: [Error!]
  node: DkimConfig
}

"""Autogenerated return type of DkimConfigsValidate"""
type DkimConfigsValidatePayload {
  errors: [Error!]
  node: DkimConfig
}

enum DkimEmailTypes {
  phishing
  training
}

"""Direct Message Injection Config"""
type DmiConfig implements Identifier & Timestamps {
  allowedDomainIds: [Int!]
  connectionType: DmiConfigConnectionTypes!
  createdAt: ISO8601DateTime!
  dmiDomains: [DmiDomain!]
  emailToTest: String
  enabled: Boolean!
  id: Int!
  name: String!
  notifyEmails: [String!]
  statusCode: String
  statusInfo: String
  statusUpdatedAt: ISO8601DateTime
  tenantId: String!
  tenantStatus: String
  testDeliveredAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

input DmiConfigAttributes {
  id: Int
  name: String!
  notifyEmails: [String!]
  enabled: Boolean!
  allowedDomainIds: [Int!]
  connectionType: DmiConfigConnectionTypes
  emailToTest: String
}

enum DmiConfigConnectionTypes {
  M365
  GOOGLE
}

"""Autogenerated return type of DmiConfigsCreate"""
type DmiConfigsCreatePayload {
  errors: [Error!]
  node: DmiConfig
}

type DmiConfigsCursor {
  nodes: [DmiConfig!]!
  pagination: Pagination!
}

"""Autogenerated return type of DmiConfigsDelete"""
type DmiConfigsDeletePayload {
  errors: [Error!]
  node: DmiConfig
}

"""Autogenerated return type of DmiConfigsReconnect"""
type DmiConfigsReconnectPayload {
  errors: [Error!]
  node: DmiConfig
}

"""Autogenerated return type of DmiConfigsUpdate"""
type DmiConfigsUpdatePayload {
  errors: [Error!]
  node: DmiConfig
}

"""DMI Configured Domain"""
type DmiDomain implements Identifier & Timestamps {
  allowedDomainId: Int!
  createdAt: ISO8601DateTime!
  id: Int!
  name: String!
  updatedAt: ISO8601DateTime!
}

type Docs {
  _raw: RawDocs
  organization: Organization
  teamId: String
  userId: String
  userName: String
}

type DocumentLink {
  createdAt: ISO8601DateTime
  documentType: String
  icon: String
  id: Int
  linkText: String
  linkUrl: String
  updatedAt: ISO8601DateTime
}

enum DocumentLinkIcon {
  file
  file_alt
  file_pdf
}

input DocumentsLinkAttributes {
  documentType: DocumentLinkIcon!
  linkUrl: String!
  linkText: String!
}

"""Download"""
type Download implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  downloadCount: Int!
  downloadedAt: ISO8601DateTime
  failedAt: ISO8601DateTime
  failureReason: String
  fileType: DownloadFileTypes!
  filenamePrefix: String
  generatedAt: ISO8601DateTime
  id: Int!
  isCompleted: Boolean!
  isDownloaded: Boolean!
  isViewed: Boolean!
  path: String
  retryAvailable: Boolean!
  type: Downloadable!
  updatedAt: ISO8601DateTime!
  viewedAt: ISO8601DateTime
}

union Downloadable = ExecReportsReport | PasswordIqReport | Report | SecurityCoachUnmappedEventsReport

enum DownloadablesCategories {
  ACCOUNT_PHISH_FAILURE_PERCENTAGE
  ACCOUNT_PHISH_PRONE_PERCENTAGE
  ACCOUNT_REPORT_CARD
  CULTURE_SURVEY_REPORTS
  EMAILS_SENT
  FAILURE_TYPES
  FAILURES_BY_PHISHING_TEMPLATE
  GLOBAL_PHISHING
  GLOBAL_TRAINING
  KNOWLEDGE_ASSESSMENT_REPORTS
  LEARNER_PLATFORM
  OVERALL_USER_COUNTS
  PHISH_FAILURE_PERCENTAGE
  PHISH_PRONE_PERCENTAGE
  PHISH_PRONE_PERCENTAGE_BY_USER_COUNT
  REPORT_CARDS
  RISK_SCORE
  SECURITY_COACH_ACTIVITY_RTC
  SECURITY_COACH_DETECTION_RULES_ACTIVITY
  TEMPLATE_FAILURES
  TRAINING_COMPARISON
  TRAINING_COVERAGE
  TRAINING_HOURS
  TRAINING_INTERACTIONS
  TRAINING_STATUS
  TRAINING_STATUSES_BY_CAMPAIGN
  TRAINING_SURVEYS
  USER_COUNT_BY_PHISH_PRONE_PERCENTAGE
  USER_LISTINGS
  EXEC_REPORTS
  PASSWORD_IQ
  SECURITY_COACH
  TRAINING_CAMPAIGN_SURVEYS
  TRAINING_CAMPAIGN_ENROLLMENTS
  PHISHING_SECURITY_TESTS
  USERS_LIST
  ACTIVE_RULES_REPORT
  PAB_USER_ACTIVITY
}

enum DownloadablesTypes {
  ASSESSMENT_SCORE_BY_KNOWLEDGE_AREA_OVER_TIME
  OVERALL_PPP_BY_ACCOUNT
  OVERALL_PPP_BY_GROUP
  OVERALL_PPP_BY_TRAINING_TIME
  OVERALL_PPP_BY_CAMPAIGN
  TRAINING_COMPARISON_BY_PPP
  TRAINING_STATUS_BY_CAMPAIGN
  USER_COUNT_BY_ASSESSMENT
  USER_COUNT_BY_SURVEY
  ASSESSMENT_SCORE_BY_KNOWLEDGE_AREA
  SURVEY_SCORE_BY_DIMENSION
  SURVEY_SCORE_BY_DIMENSION_OVER_TIME
  PPP_DISTRIBUTION
  TRAINING_COMPARISON_BY_RISK_SCORE
  TRAINING_STATUS_BY_COURSE
  FAILURES_BY_PHISHING_TEMPLATE
  RISK_SCORE_BY_GROUP
  RISK_SCORE_BY_LOCATION
  RISK_SCORE_BY_USER
  RISK_SCORE_BY_ASSESSMENT
  RISK_SCORE_BY_SURVEY
  FAILURE_TYPE_USER_COUNTS
  TRAINING_STATUS_BY_GROUP
  USER_COUNTS
  INITIAL_PPP
  TRAINING_HOURS
  TRAINING_INTERACTIONS_BY_PURCHASED_COURSE
  TRAINING_INTERACTIONS_BY_GROUP
  UNPHISHED_USERS
  INCOMPLETE_TRAINING
  NO_TRAINING_ASSIGNED
  TRAINING_NOT_STARTED
  USER_SIGN_INS
  TRAINING_STATUSES_BY_CAMPAIGN
  PHISH_FAILURE_PERCENTAGE_OVERALL
  PHISH_FAILURE_PERCENTAGE_BY_CAMPAIGNS
  EMAILS_SENT_BY_GROUP
  EMAILS_SENT_BY_TEMPLATE
  FAILURE_TYPES_BAR_CHART
  USER_REPORT_CARD
  GROUP_REPORT_CARD
  ACCOUNT_REPORT_CARD
  TRAINING_CAMPAIGN_SURVEYS
  TRAINING_CAMPAIGN_ENROLLMENTS
  PHISHING_SECURITY_TESTS
  USERS_LIST
  GLOBAL_PHISHING_RAW
  GLOBAL_PHISHING_AGGREGATE
  GLOBAL_TRAINING_RAW
  GLOBAL_TRAINING_AGGREGATE
  LEARNER_PLATFORM_RAW
  ACTIVE_RULES_REPORT
  SECURITY_COACH_ACTIVITY_RTC_RAW
  SECURITY_COACH_DETECTION_RULES_ACTIVITY_RAW
  SECURITY_COACH_DETECTION_RULES_ACTIVITY_AGGREGATE
  SECURITY_COACH_ACTIVITY_RTC_AGGREGATE
  TRAINING_SURVEYS_BY_CAMPAIGN
  TRAINING_SURVEYS_BY_COURSE
  PAB_USER_ACTIVITY
  PASSWORD_IQ_CSV
  PASSWORD_IQ_PDF
  SECURITY_COACH_UNMAPPED_EVENTS_CSV
  EXEC_REPORTS_PDF
}

"""
Autogenerated return type of DownloadCenterCustomReportsActiveRulesReport
"""
type DownloadCenterCustomReportsActiveRulesReportPayload {
  errors: [Error!]
  node: Boolean
}

"""
Autogenerated return type of DownloadCenterCustomReportsPabUserActivity
"""
type DownloadCenterCustomReportsPabUserActivityPayload {
  errors: [Error!]
  node: Boolean
}

"""
Autogenerated return type of DownloadCenterCustomReportsPhishingSecurityTests
"""
type DownloadCenterCustomReportsPhishingSecurityTestsPayload {
  errors: [Error!]
  node: Boolean
}

"""
Autogenerated return type of DownloadCenterCustomReportsTrainingCampaignEnrollments
"""
type DownloadCenterCustomReportsTrainingCampaignEnrollmentsPayload {
  errors: [Error!]
  node: Boolean
}

"""
Autogenerated return type of DownloadCenterCustomReportsTrainingCampaignSurveys
"""
type DownloadCenterCustomReportsTrainingCampaignSurveysPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of DownloadCenterCustomReportsUsersList"""
type DownloadCenterCustomReportsUsersListPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of DownloadCenterDownloadDelete"""
type DownloadCenterDownloadDeletePayload {
  errors: [Error!]
  node: [Download!]
}

"""Autogenerated return type of DownloadCenterDownloadReportRetry"""
type DownloadCenterDownloadReportRetryPayload {
  errors: [Error!]
  node: Download
}

"""Autogenerated return type of DownloadCenterDownloadViewed"""
type DownloadCenterDownloadViewedPayload {
  ids: [Int!]!
}

enum DownloadFileTypes {
  CSV
  PDF
}

type DownloadsReportConfigFiltersCursor {
  nodes: [Group!]!
  pagination: Pagination!
}

enum DownloadsSortFields {
  CATEGORY
  DOWNLOADED_AT
  GENERATED_AT
  NAME
  VIEWED_AT
}

enum Durations {
  """Business days"""
  DAYS

  """weeks"""
  WEEKS

  """months"""
  MONTHS
}

"""Autogenerated return type of EchelonApiCreateKey"""
type EchelonApiCreateKeyPayload {
  errors: [Error!]
  node: Key
}

"""Autogenerated return type of EchelonApiDeleteKey"""
type EchelonApiDeleteKeyPayload {
  id: Int
}

"""Email Alias"""
type EmailAlias implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  email: String!
  id: Int!
  primary: Boolean
  updatedAt: ISO8601DateTime!
}

"""Autogenerated return type of EmailAliasesCreate"""
type EmailAliasesCreatePayload {
  errors: [Error!]
  node: EmailAlias
}

"""Autogenerated return type of EmailAliasesDelete"""
type EmailAliasesDeletePayload {
  errors: [Error!]
  node: EmailAlias
}

enum EmailForwardFormats {
  EML
  MSG
}

type EmailsSentByGroupCursor {
  columns: Columns
  nodes: [EmailsSentCounts!]!
  pagination: Pagination!
  timeframe: ReportTimeframe
}

type EmailsSentByTemplateCursor {
  columns: Columns
  nodes: [EmailsSentCountsByTemplate!]!
  pagination: Pagination!
  timeframe: ReportTimeframe
}

type EmailsSentCounts {
  clickedCount: Int!
  clickedRate: Float
  deliveredCount: Int!
  failureCount: Int!
  id: Int
  name: String
  reportedCount: Int!
  sentCount: Int!
  userCount: Int
}

type EmailsSentCountsByTemplate {
  clickedCount: Int!
  clickedRate: Float
  deliveredCount: Int!
  failureCount: Int!
  id: Int
  name: String
  reportedCount: Int!
  sentCount: Int!
  userCount: Int
}

type EmailsSentCountsByTemplateCsv {
  csv: String!
  timeframe: ReportTimeframe
}

type EmailsSentCountsCsv {
  csv: String!
  timeframe: ReportTimeframe
}

"""Autogenerated return type of EmailTemplateDelete"""
type EmailTemplateDeletePayload {
  errors: [Error!]
  node: PhishingTemplate
}

enum EmailTemplateDifficultyRatings {
  UNRATED
  BASIC
  LIMITED
  MODERATE
  SIGNIFICANT
  ADVANCED
}

"""Email Templates for Common Fields"""
interface EmailTemplateInterface {
  archived: Boolean!
  contentHtml: String
  createdAt: ISO8601DateTime!
  from: String!
  fromDisplayName: String
  fromWithDomain: String!
  hidden: Boolean!
  id: Int!
  languageCode: String
  markedAsUpdatedAt: ISO8601DateTime
  name: String
  replyTo: String
  replyToDisplayName: String
  subject: String!
  subjectSanitized: String!
  templateTranslationUuid: String!
  updatedAt: ISO8601DateTime!
}

enum EmailTemplateSortFields {
  SUBJECT
  UPDATED
  DIFFICULTY
  CATEGORY_NAME
  TOPIC_NAME
}

enum EmailTemplateTypes {
  SYSTEM
  USER
  COMMUNITY
  TRAINING
  TRAINING_SYSTEM
  MANAGED
  TRAINING_MANAGED
  MESSAGES
  MESSAGES_SYSTEM
  PHYSICAL_QR
  PHYSICAL_QR_SYSTEM
  CALLBACK_PHISHING
  CALLBACK_PHISHING_SYSTEM
}

type EmployeesReceivingDetections {
  atleast1: Int
  greaterThan1: Int
  greaterThan5: Int
}

enum Engines {
  alias_engine
  rule_engine
  correlation_engine
  nlp_engine
  ad_engine
}

type EngineStatus {
  ad_engine: Boolean!
  alias_engine: Boolean!
  correlation_engine: Boolean!
  id: Int!
  nlp_engine: Boolean!
  orgId: Int
  rule_engine: Boolean!
}

"""An Enrollment"""
type Enrollment implements Identifier & Timestamps {
  acknowledgeable: Boolean!
  active: Boolean!
  certifiable: Boolean!
  certificateUrl: String
  completed: Boolean!
  completedAt: ISO8601DateTime
  completionStatus: EnrollmentCompletionStatuses!
  createdAt: ISO8601DateTime!
  duration: Int
  enrollmentItem: EnrollmentItem!
  enrollmentItemType: String!
  enrollmentPlatforms: EnrollmentPlatformsActual
  expiresAt: ISO8601DateTime
  extendedExpiresAt: ISO8601DateTime
  id: Int!
  lastStartedAt: ISO8601DateTime
  lastUsedLanguage: String
  orderedLanguageOptions: [Languages!]!
  passingScore: Float
  pastDue: Boolean!
  pastDueExtended: Boolean!
  policyAcknowledged: Boolean!
  policyAcknowledgedAt: ISO8601DateTime
  policyEnrollment: PolicyEnrollment
  score: Float
  scoreRaw: Int
  scoreToDisplay: Float
  selectedLanguage: String
  showScore: Boolean
  started: Boolean!
  startedAt: ISO8601DateTime
  state: String
  status: EnrollmentStatuses!
  statusString: String!
  successStatus: String
  survey: Survey
  theme: JSON
  timeSpentInSeconds: String
  totalScore: Float
  totalTime: String
  trackableCourse: Boolean
  trainingCampaign: TrainingCampaign
  type: EnrollmentTypes!
  updatedAt: ISO8601DateTime!
  user: User
}

"""Autogenerated return type of EnrollmentAcceptUrlPolicy"""
type EnrollmentAcceptUrlPolicyPayload {
  errors: [Error!]
  node: Enrollment
}

"""A basic enrollment for a trainee"""
type EnrollmentBasic implements Identifier {
  completionStatus: EnrollmentCompletionStatuses!
  id: Int!
  policyEnrollment: PolicyEnrollmentBasic
  totalTime: String
}

"""
Authentication information required by non-web clients to display enrollments
"""
type EnrollmentClientAuth {
  cloudfrontCookies: JSON!
  jwt: String!
}

enum EnrollmentCompletionStatuses {
  UNKNOWN
  INCOMPLETE
  COMPLETED
}

"""Autogenerated return type of EnrollmentCreate"""
type EnrollmentCreatePayload {
  errors: [Error!]
  mobileAuthentication: EnrollmentClientAuth
  node: Enrollment
}

"""An enrollment event for an enrollment"""
type EnrollmentEvent implements Identifier {
  enrollmentId: Int!
  event: EnrollmentEvents!
  id: Int!
}

enum EnrollmentEvents {
  INDIVIDUAL_ENROLLED
  OPTIONAL_ENROLLED
  CSV_ENROLLED
  BTB_TEST_OUT_REQUESTED
  BTB_TEST_OUT_FAILED
  BTB_TEST_OUT_SUCCESS
}

"""An Enrollment Item"""
union EnrollmentItem = Policy | PurchasedCourse

"""Enrollment Metadata for an event"""
type EnrollmentMetadata implements EventMetadataInterface {
  certifiable: Boolean
  completedAt: String
  duration: String
  enrollmentId: Int
  label: String
  pastDue: Boolean
  replaced: Boolean
  replacedReason: String
  score: Float
  startedAt: String
  templateId: Int
  templateName: String
  templateType: String
  templateUuid: String
  title: String
  trainingCampaign: TrainingCampaignDetails
  type: String
}

"""Number of enrollment completions per platform"""
type EnrollmentPlatforms {
  learnerApp: Int
  learnerExperience: Int
  learnerExperienceMobile: Int
}

"""Platform where Enrollment was started and completed"""
type EnrollmentPlatformsActual {
  completedPlatform: EnrollmentPlatformTypes
  startedPlatform: EnrollmentPlatformTypes
}

enum EnrollmentPlatformTypes {
  ALL
  LX_WEB
  LX_WEB_MOBILE
  MOBILE_APP
}

enum EnrollmentScopes {
  incomplete
  not_started
  in_progress
  complete
  past_due
}

"""Autogenerated return type of EnrollmentStart"""
type EnrollmentStartPayload {
  errors: [Error!]
  mobileAuthentication: EnrollmentClientAuth
  node: Enrollment
}

type EnrollmentStats {
  """Absolute number of completed enrollments"""
  completed: Int!

  """Absolute number of in progress enrollments"""
  inProgress: Int!
  timeframe: ReportTimeframe

  """Absolute number of total enrollments"""
  total: Int!
}

enum EnrollmentStatuses {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  INCOMPLETE
}

"""A user enrollment totals"""
type EnrollmentTotals implements Identifier & Timestamps {
  completed: Int
  completedPastDue: Int
  createdAt: ISO8601DateTime!
  enrolled: Int
  id: Int!
  inProgress: Int
  inProgressPastDue: Int
  notStarted: Int
  notStartedPastDue: Int
  scoreAverage: Float
  timeSpent: Int
  timeSpentOfCompleted: Int
  updatedAt: ISO8601DateTime!
  user: User
}

enum EnrollmentTypes {
  COURSE
  POLICY
  ASSESSMENT
}

enum EnrollmentUpdateActions {
  RESET
  FORCE_PASS
}

"""Autogenerated return type of EnrollmentUpdate"""
type EnrollmentUpdatePayload {
  errors: [Error!]
  nodes: [Enrollment!]
}

type Error {
  field: String!
  placeholders: JSON
  reason: String!
  recordId: Int
}

"""Event Type"""
type Event {
  description: String
  id: BigInt!
  name: String
}

enum EventComparisons {
  EQUAL
  GREATER_THAN
  LESS_THAN
}

"""fields common to various event metadata"""
interface EventMetadataInterface {
  templateId: Int
  templateName: String
  templateType: String
  templateUuid: String
}

"""Event pagination metadata"""
type EventPagination {
  page: Int!
  pages: Int!
  per: Int!
  totalCount: Int!
}

input EventQueryArguments {
  userId: Int!
  eventType: [String!]
  source: [String!]
  rangeType: String
  startDate: ISO8601Date
  endDate: ISO8601Date
  per: Int
  page: Int
}

"""Event Source"""
type EventSource {
  id: Int!
  name: String
}

enum EventStatuses {
  CREATED
  REVIEWED
  RESOLVED
}

"""fields common between Kmsat and External event types"""
interface EventTypeInterface {
  description: String
  id: BigInt!
}

enum EventTypes {
  STATUS_CHANGE
  INITIAL_SCAN
}

"""Event Type Union"""
union EventTypeUnion = ExternalEvent | KmsatEvent | PiqEchelonEvent | SecurityCoachEvent

"""Event User"""
type EventUser {
  archived: Boolean!
  email: String!
  id: Int!
}

type Ever {
  ever: Boolean!
}

type ExecReportsConfigurationsPhishingActivities {
  aggregation: String!
  dateInterval: String
  description: String!
  disableNonePlaceholderCategory: Boolean
  disableNonePlaceholderGroupBy: Boolean
  endDate: ISO8601DateTime
  graphType: String!
  groupBy: String!
  groupFiltersEnabled: Boolean
  groupIds: [Int!]
  includeArchivedUsers: Boolean!
  legendPosition: String!
  overrideReportDateSettings: Boolean
  overrideReportGroupSettings: Boolean
  startDate: ISO8601DateTime
  title: String!
  topN: Int
  type: ExecReportsWidget!
  xAxis: String!
}

type ExecReportsConfigurationsRiskScore {
  aggregation: String!
  dateInterval: String
  description: String!
  disableNonePlaceholderCategory: Boolean
  disableNonePlaceholderGroupBy: Boolean
  endDate: ISO8601DateTime
  graphType: String!
  groupBy: String!
  groupFiltersEnabled: Boolean
  groupIds: [Int!]
  includeArchivedUsers: Boolean!
  legendPosition: String!
  overrideReportDateSettings: Boolean
  overrideReportGroupSettings: Boolean
  startDate: ISO8601DateTime
  title: String!
  topN: Int
  type: ExecReportsWidget!
  xAxis: String!
}

type ExecReportsConfigurationsText {
  content: String!
  description: String!
  title: String!
  type: ExecReportsWidget!
}

type ExecReportsConfigurationsTitle {
  content: String!
  description: String!
  showLogo: Boolean!
  title: String!
  type: ExecReportsWidget!
}

type ExecReportsConfigurationsTrainingActivities {
  aggregation: String!
  dateInterval: String
  description: String!
  disableNonePlaceholderCategory: Boolean
  disableNonePlaceholderGroupBy: Boolean
  endDate: ISO8601DateTime
  graphType: String!
  groupBy: String!
  groupFiltersEnabled: Boolean
  groupIds: [Int!]
  includeArchivedUsers: Boolean!
  legendPosition: String!
  overrideReportDateSettings: Boolean
  overrideReportGroupSettings: Boolean
  startDate: ISO8601DateTime
  title: String!
  topN: Int
  type: ExecReportsWidget!
  xAxis: String!
}

"""Autogenerated return type of ExecReportsDashboardCreate"""
type ExecReportsDashboardCreatePayload {
  errors: [Error!]
  node: ExecReportsExecReportsDashboard
}

"""Autogenerated return type of ExecReportsDashboardDelete"""
type ExecReportsDashboardDeletePayload {
  errors: [Error!]
  node: ExecReportsExecReportsDashboard
}

"""Autogenerated return type of ExecReportsDashboardUpdate"""
type ExecReportsDashboardUpdatePayload {
  errors: [Error!]
  node: ExecReportsExecReportsDashboard
}

input ExecReportsDashboardWidget {
  startColumn: Int!
  endColumn: Int!
  startRow: Int!
  endRow: Int!
  type: ExecReportsWidget!
  title: String
  description: String
  content: String
  showLogo: Boolean
  aggregation: String
  dateInterval: String
  endDate: ISO8601DateTime
  graphType: String
  groupBy: String
  includeArchivedUsers: Boolean
  startDate: ISO8601DateTime
  xAxis: String
  legendPosition: String
  topN: Int
  groupIds: [Int!]
  overrideReportDateSettings: Boolean
  overrideReportGroupSettings: Boolean
  disableNonePlaceholderGroupBy: Boolean
  disableNonePlaceholderCategory: Boolean
  groupFiltersEnabled: Boolean
}

union ExecReportsDownloadMetadata = ExecReportsPdfConfiguration | PasswordIqCsvConfiguration | PasswordIqPdfConfiguration

type ExecReportsExecReport {
  createdAt: ISO8601DateTime
  creatorId: Int!
  creatorType: String!
  dashboardId: String!
  dashboardName: String
  id: ID
  name: String
  ownerType: String!
  updatedAt: ISO8601DateTime
}

type ExecReportsExecReportsDashboard {
  createdAt: ISO8601DateTime
  creator: User!
  fontColor: String
  fontSize: String
  fontStyle: String
  groupIds: [Int!]
  id: Int!
  name: String!
  timeframe: ReportTimeframe
  updatedAt: ISO8601DateTime
  widgets: [ExecReportsExecReportsDashboardWidget!]!
}

type ExecReportsExecReportsDashboards {
  dashboards: [ExecReportsExecReportsDashboard!]!
  zenkaToken: String!
}

type ExecReportsExecReportsDashboardWidget {
  createdAt: ISO8601DateTime
  execReportsWidgetConfiguration: ExecReportsWidgetConfigurations
  height: Int!
  id: ID
  startColumn: Int!
  startRow: Int!
  updatedAt: ISO8601DateTime
  width: Int!
}

type ExecReportsExecReportsWidgetsConfiguration {
  content: String!
  description: String!
  title: String!
  type: ExecReportsWidget!
}

input ExecReportsPdf {
  dashboardId: String
}

type ExecReportsPdfConfiguration {
  dashboardName: String
  widgets: [ExecReportsExecReportsWidgetsConfiguration!]!
}

"""Autogenerated return type of ExecReportsPDF"""
type ExecReportsPDFPayload {
  errors: [Error!]
  node: Download
}

"""Executive Reports Phishing Activities Widget Data"""
type ExecReportsPhishingActivitiesData {
  aggregation: String!
  dateInterval: String
  description: String!
  disableNonePlaceholderCategory: Boolean
  disableNonePlaceholderGroupBy: Boolean
  endDate: ISO8601DateTime
  graphType: String!
  groupBy: String!
  groupFiltersEnabled: Boolean
  groupIds: [Int!]
  includeArchivedUsers: Boolean!
  legendPosition: String!
  overrideReportDateSettings: Boolean
  overrideReportGroupSettings: Boolean
  startDate: ISO8601DateTime
  title: String!
  topN: Int
  xAxis: String!
}

"""Report download"""
type ExecReportsReport {
  category: DownloadablesCategories!
  configuration: ExecReportsDownloadMetadata!
  createdAt: ISO8601DateTime!
  id: Int!
  impersonatingUser: User
  sharedBy: String
  type: DownloadablesTypes!
  updatedAt: ISO8601DateTime!
}

"""Executive Reports Risk Score Widget Data"""
type ExecReportsRiskScoreData {
  aggregation: String!
  dateInterval: String
  description: String!
  disableNonePlaceholderCategory: Boolean
  disableNonePlaceholderGroupBy: Boolean
  endDate: ISO8601DateTime
  graphType: String!
  groupBy: String!
  groupFiltersEnabled: Boolean
  groupIds: [Int!]
  includeArchivedUsers: Boolean!
  legendPosition: String!
  overrideReportDateSettings: Boolean
  overrideReportGroupSettings: Boolean
  startDate: ISO8601DateTime
  title: String!
  topN: Int
  xAxis: String!
}

"""Executive Reports Text Widget Data"""
type ExecReportsTextData {
  content: String!
  description: String!
  title: String!
}

"""Executive Reports Title Widget Data"""
type ExecReportsTitleData {
  content: String!
  description: String!
  logoUrl: String
  showLogo: Boolean
  title: String!
}

"""Executive Reports Phishing Activities Widget Data"""
type ExecReportsTrainingActivitiesData {
  aggregation: String!
  dateInterval: String
  description: String!
  disableNonePlaceholderCategory: Boolean
  disableNonePlaceholderGroupBy: Boolean
  endDate: ISO8601DateTime
  graphType: String!
  groupBy: String!
  groupFiltersEnabled: Boolean
  groupIds: [Int!]
  includeArchivedUsers: Boolean!
  legendPosition: String!
  overrideReportDateSettings: Boolean
  overrideReportGroupSettings: Boolean
  startDate: ISO8601DateTime
  title: String!
  topN: Int
  xAxis: String!
}

enum ExecReportsWidget {
  ExecReportsPhishingActivitiesWidget
  ExecReportsTextWidget
  ExecReportsTitleWidget
  ExecReportsTrainingActivitiesWidget
  ExecReportsRiskScoreWidget
}

"""A Widget Configuration type"""
union ExecReportsWidgetConfigurations = ExecReportsConfigurationsPhishingActivities | ExecReportsConfigurationsRiskScore | ExecReportsConfigurationsText | ExecReportsConfigurationsTitle | ExecReportsConfigurationsTrainingActivities

type ExportUnmappedEventsMessage {
  queued: Boolean
}

enum Extensions {
  """Word Document"""
  DOCX

  """Word Document With Macro (DOC)"""
  DOCM

  """Word Document With Macro (DOCM)"""
  DOCM2

  """Powerpoint Document"""
  PPTX

  """Powerpoint Document With Macro"""
  PPSM

  """Excel Document"""
  XLSX

  """Excel Document With Macro (XLS)"""
  XLSM

  """Excel Document With Macro (XLSM)"""
  XLSM2

  """PDF"""
  PDF

  """Zipped Word Document"""
  ZIPDOCX

  """Zipped Word Document With Macro"""
  ZIPDOCM

  """Zipped Powerpoint Document"""
  ZIPPPTX

  """Zipped Powerpoint Document With Macro"""
  ZIPPPSM

  """Zipped Excel Document"""
  ZIPXLSX

  """Zipped Excel Document With Macro"""
  ZIPXLSM

  """Zipped PDF"""
  ZIPPDF

  """HTML"""
  HTML

  """HTML with link"""
  HTMLA
}

"""External Event Type"""
type ExternalEvent implements EventTypeInterface {
  description: String
  externalName: String!
  id: BigInt!
}

type FailuresByPhishingTemplate {
  csv: String!
  data: [FailuresByPhishingTemplateData!]!
  timeframe: ReportTimeframe
}

type FailuresByPhishingTemplateData {
  campaign: String
  count: Int!
  countName: String!
  template: String
}

type FailureTypeByUserCount {
  csv: String!
  data: [FailureTypeUserCountsData!]!
  timeframe: ReportTimeframe
}

type FailureTypesBarChart {
  csv: String!
  currentPpp: Float!
  series: [FailureTypesBarChartSeries!]!
  timeframe: ReportTimeframe
}

type FailureTypesBarChartSeries {
  data: [FailureTypesBarChartSeriesData!]!
  date: ISO8601Date
  timeframe: ReportTimeframe
}

type FailureTypesBarChartSeriesData {
  attachmentOpen: Int
  callbackCalled: Int
  callbackData: Int
  clicks: Int
  dataEntered: Int
  delivered: Int
  macroEnabled: Int
  name: String!
  ppp: String!
  qrCodeScanned: Int
  replied: Int
  timeframe: ReportTimeframe
}

type FailureTypesCount {
  attachmentOpen: Int
  callbackCalled: Int
  callbackData: Int
  clicks: Int
  dataEntered: Int
  macroEnabled: Int
  qrCodeScanned: Int
  replied: Int
  timeframe: ReportTimeframe
}

type FailureTypeUserCountsData {
  failures: FailureTypesCount!
  groupName: String!
  timeframe: ReportTimeframe
}

"""A join table between Users and FeatureReleases"""
type FeatureReleaseView implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated return type of FeatureReleaseViewDelete"""
type FeatureReleaseViewDeletePayload {
  errors: [Error!]
  node: FeatureReleaseView
}

scalar File

"""Data for the Free PST wizard"""
type FreeToolData {
  allowedDomains: [String!]!
  landingPageOpts: [FreeToolLandingPageOpt!]!
  maxRecipients: Int!
  privacyPolicyUrl: String
  recipientsFromPrt: [String!]!
  recipientsFromPst: [String!]!
  recipientsFromQrt: [String!]!
  recipientsFromSpt: [String!]!
  supportUrl: String
  translatedTemplateOpts: [FreeToolTranslatedTemplateOpt!]!
}

"""Landing page opt for free tools"""
type FreeToolLandingPageOpt {
  image: String!
  name: String
  uuid: String!
}

"""Free Tool report data"""
type FreeToolReportData {
  campaignId: Int!
  campaignRunId: Int!
  locales: [String!]!
  ppp: String!
  pppIndustry: String!
  startedAt: ISO8601DateTime
  status: PhishingCampaignRunStatuses!
  totalClicked: Int!
  totalDataEntered: Int!
  totalDelivered: Int!
  totalQrCodeScanned: Int!
  totalReplied: Int!
}

"""Free Tool result data"""
type FreeToolResult implements Identifier {
  campaignRun: PhishingCampaignRun
  emailTemplateUuid: String
  id: Int!
  landingPageUuid: String
  name: String!
}

"""Autogenerated return type of FreeToolsFreeToolLaunch"""
type FreeToolsFreeToolLaunchPayload {
  errors: [Error!]
  node: PhishingCampaign
}

"""Autogenerated return type of FreeToolsPrtCreate"""
type FreeToolsPrtCreatePayload {
  errors: [Error!]
  node: PhishingCampaign
}

"""Autogenerated return type of FreeToolsPstCreate"""
type FreeToolsPstCreatePayload {
  errors: [Error!]
  node: PhishingCampaign
}

"""Autogenerated return type of FreeToolsQrtCreate"""
type FreeToolsQrtCreatePayload {
  errors: [Error!]
  node: PhishingCampaign
}

"""Autogenerated return type of FreeToolsSptCreate"""
type FreeToolsSptCreatePayload {
  errors: [Error!]
  node: PhishingCampaign
}

"""Template data for free tools"""
type FreeToolTranslatedTemplate implements Identifier {
  id: Int!
  position: Int!
  templateTranslationUuid: String!
}

"""Template opt with language and templates for free tools"""
type FreeToolTranslatedTemplateOpt {
  language: Languages!
  templates: [FreeToolTranslatedTemplate!]!
}

enum FreeToolTypes {
  PST
  PRT
  SPT
  QRT
}

enum Frequencies {
  ONETIME
  WEEK
  BIWEEK
  MONTH
  QUARTER
}

"""The Gamification of an account"""
type Gamification implements GamificationInterface & Identifier & Timestamps {
  badges: Boolean
  badgesEnabled: Boolean
  badgesEnabledList: [Badges!]!
  badgesList: [Badge!]
  createdAt: ISO8601DateTime!
  enabled: Boolean
  id: Int!
  leaderboard: Leaderboard @deprecated(reason: "To be deprecated once multiple leaderboards are supported")
  leaderboardGroups: [Group!]!
  leaderboardTimeWindow: LeaderboardPeriods!
  leaderboardType: LeaderboardTypes @deprecated(reason: "Please use the leaderboard field")
  leaderboardTypes: [LeaderboardTypes!]
  leaderboards: [LeaderboardNew!]
  leaderboardsEnabled: Boolean
  leaderboardsIgnoreOptionalTraining: Boolean
  updatedAt: ISO8601DateTime!
}

input GamificationAttributes {
  id: Int
  badgesEnabled: Boolean
  badgesEnabledList: [Badges!]
  leaderboardsEnabled: Boolean
  leaderboardType: LeaderboardTypes
  leaderboardTypes: [LeaderboardTypes!]
  leaderboardTimeWindow: LeaderboardPeriods
  leaderboardGroupIds: [Int!]
  leaderboardsIgnoreOptionalTraining: Boolean
}

"""Common fields between User Gamification and Account Gamification"""
interface GamificationInterface {
  badges: Boolean
  badgesEnabled: Boolean
  badgesEnabledList: [Badges!]!
  badgesList: [Badge!]
  leaderboard: Leaderboard @deprecated(reason: "To be deprecated once multiple leaderboards are supported")
  leaderboardGroups: [Group!]!
  leaderboardTimeWindow: LeaderboardPeriods!
  leaderboardType: LeaderboardTypes @deprecated(reason: "Please use the leaderboard field")
  leaderboardTypes: [LeaderboardTypes!]
  leaderboards: [LeaderboardNew!]
  leaderboardsEnabled: Boolean
}

type GlobalPhishingAggregateColumns {
  phishingTotalsColumns: [ReportsGlobalPhishingAggregatePhishingTotalsColumns!]
  timeframe: ReportTimeframe
  userColumns: [ReportsUserColumns!]
}

type GlobalPhishingAggregateTableCursor {
  columns: Columns
  nodes: [AggregateTable!]!
  pagination: Pagination!
  timeframe: ReportTimeframe
}

type GlobalPhishingRawColumns {
  emailTemplateColumns: [ReportsGlobalPhishingRawEmailTemplateColumns!]
  phishingCampaignColumns: [ReportsGlobalPhishingRawPhishingCampaignColumns!]
  phishingCampaignRecipientColumns: [ReportsGlobalPhishingRawPhishingCampaignRecipientColumns!]
  timeframe: ReportTimeframe
  userColumns: [ReportsUserColumns!]
}

type GlobalPhishingRawTableCursor {
  columns: Columns
  nodes: [PhishingCampaignRecipient!]!
  pagination: Pagination!
  timeframe: ReportTimeframe
}

type GlobalTrainingAggregateChart {
  series: GlobalTrainingAggregateChartSeries
  timeframe: ReportTimeframe
}

type GlobalTrainingAggregateChartSeries {
  completed: Int
  completedPastDue: Int
  enrolled: Int
  inProgress: Int
  inProgressPastDue: Int
  notStarted: Int
  notStartedPastDue: Int
  timeframe: ReportTimeframe
}

type GlobalTrainingAggregateColumns {
  enrollmentTotalsColumns: [ReportsGlobalTrainingAggregateEnrollmentTotalsColumns!]
  timeframe: ReportTimeframe
  userColumns: [ReportsUserColumns!]
}

type GlobalTrainingAggregateCsv {
  csv: String!
  timeframe: ReportTimeframe
}

type GlobalTrainingAggregateTableCursor {
  columns: Columns
  nodes: [EnrollmentTotals!]!
  pagination: Pagination!
  timeframe: ReportTimeframe
}

type GlobalTrainingRawChart {
  series: [GlobalTrainingRawChartSeries!]
  timeframe: ReportTimeframe
}

type GlobalTrainingRawChartSeries {
  data: [GlobalTrainingRawChartSeriesData!]
  date: ISO8601Date
  timeframe: ReportTimeframe
}

type GlobalTrainingRawChartSeriesData {
  completed: Int
  created: Int
  started: Int
  timeframe: ReportTimeframe
}

type GlobalTrainingRawColumns {
  enrollmentColumns: [ReportsGlobalTrainingRawEnrollmentColumns!]
  enrollmentItemColumns: [ReportsGlobalTrainingRawEnrollmentItemColumns!]
  storeItemColumns: [ReportsGlobalTrainingRawStoreItemColumns!]
  timeframe: ReportTimeframe
  trainingCampaignColumns: [ReportsGlobalTrainingRawTrainingCampaignColumns!]
  userColumns: [ReportsUserColumns!]
}

type GlobalTrainingRawCsv {
  csv: String!
  timeframe: ReportTimeframe
}

type GlobalTrainingRawTableCursor {
  columns: Columns
  nodes: [Enrollment!]!
  pagination: Pagination!
  timeframe: ReportTimeframe
}

"""Autogenerated return type of GpabCsvEmail"""
type GpabCsvEmailPayload {
  errors: [Error!]
}

"""Autogenerated return type of GpabQuickEmail"""
type GpabQuickEmailPayload {
  errors: [Error!]
  nodes: [User!]
}

"""A collection of groups"""
type Group implements Identifier & Timestamps {
  accountId: Int
  accountName: String!
  accountNameWithDomain: String!
  createdAt: ISO8601DateTime!
  criterions: [GroupCriterion!]!
  displayName: String!
  groupRiskScoreHistories(fullHistory: Boolean = false): [GroupRiskScoreHistory!]!
  groupType: GroupTypes!
  hasCampaignRuns: Boolean!
  id: Int!
  ldapObjectGuid: String
  memberCount: Int!
  name: String!
  percentDone: Float
  processing: Boolean!
  riskBooster: RiskBoosterLevels
  riskScore: Float
  riskScoreHistories: [TimeData!]!
  securityRoles: [SecurityRole!]!
  status: GroupStatuses!
  updatedAt: ISO8601DateTime!
  userPhishingLocales: [String!]
}

"""Attributes for creating or updating a group"""
input GroupAttributes {
  name: String
  groupType: GroupTypes
  riskBooster: RiskBoosterLevels
  securityRoles: [Int!]
}

"""A group criterion"""
type GroupCriterion implements Identifier {
  argument: Argument!
  id: Int!
  type: Types!
}

input GroupCriterionAttributes {
  id: BigInt!
  type: Types!
  userField: UserFieldArgument
  training: TrainingArgument
  postTrainingEvent: PostTrainingArgument
  vishEvent: VishEventArgument
  breachEvent: BreachEventArgument
  userDate: UserDateArgument
  assessments: AssessmentsArgument
  phishEvent: PhishEventArgument
  phishFlipEvent: PhishFlipEventArgument
  customEvent: CustomEventArgument
  passwordIqEvent: PasswordIqEventArgument
  passwordIqState: PasswordIqStateArgument
  securityCoach: SecurityCoachArgument
  securityCoachRealTimeCoaching: SecurityCoachRealTimeCoachingArgument
}

"""A group leaderboard participant"""
type GroupLeader implements LeaderInterface {
  id: Int!
  includesCurrentUser: Boolean
  name: String!
  score: Int
}

enum GroupPermissionScopes {
  PHISHING
  TRAINING
  USERS
  TRAINING_REPORTS
  ADVANCED_REPORTING
}

"""Risk score for a group"""
type GroupRiskScoreHistory implements Identifier {
  createdAt: ISO8601DateTime!
  group: Group!
  id: Int!
  riskScore: Float
}

"""Autogenerated return type of GroupsArchive"""
type GroupsArchivePayload {
  errors: [Error!]
  nodes: [Group!]!
}

"""Autogenerated return type of GroupsArchiveUsers"""
type GroupsArchiveUsersPayload {
  group: Group
}

"""Autogenerated return type of GroupsBulkDelete"""
type GroupsBulkDeletePayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of GroupsClone"""
type GroupsClonePayload {
  errors: [Error!]
  node: Group
}

"""Autogenerated return type of GroupsCreate"""
type GroupsCreatePayload {
  errors: [Error!]
  node: Group
}

type GroupsCursor {
  nodes: [Group!]!
  pagination: Pagination!
}

"""Autogenerated return type of GroupsDelete"""
type GroupsDeletePayload {
  nodes: [Group!]!
}

enum GroupSortFields {
  NAME
  CREATED_AT
  RISK_BOOSTER
  MEMBER_COUNT
}

"""Autogenerated return type of GroupsRemoveUsers"""
type GroupsRemoveUsersPayload {
  group: Group
}

"""Autogenerated return type of GroupsSaveCriterions"""
type GroupsSaveCriterionsPayload {
  errors: [Error!]
  node: Group
}

enum GroupStatuses {
  ACTIVE
  ARCHIVED
  ALL
}

"""Autogenerated return type of GroupsUpdate"""
type GroupsUpdatePayload {
  errors: [Error!]
  node: Group
}

enum GroupTypes {
  CONSOLE
  SMART
  ADI_MANAGED
  CLASSIC
}

type HiddenPage {
  id: ID!
  uuid: String!
}

input HiddenPageAttributes {
  uuid: String!
}

type HostNameEmailsData {
  hostName: String
  userName: String
}

"""Unique remote identifier to fetch the node"""
interface Identifier {
  id: Int!
}

enum IdpCertificationFormats {
  SHA1
  SHA2
}

type IdpData implements Identifier & Timestamps {
  companyName: String
  country: String
  createdAt: ISO8601DateTime!
  employeeType: String
  externalId: String
  id: Int!
  lastPasswordChangeDateTime: ISO8601DateTime
  mailNickname: String
  onPremisesSamAccountName: String
  onPremisesSecurityIdentifier: String
  updatedAt: ISO8601DateTime!
  userPrincipalName: String
}

"""An individual leaderboard participant"""
type IndividualLeader implements LeaderInterface {
  id: Int!
  includesCurrentUser: Boolean
  name: String!
  rank: Int
  score: Int
}

enum Industries {
  ALL_INDUSTRIES
  BANKING
  BUSINESS_SERVICES
  CONSTRUCTION
  CONSULTING
  CONSUMER_SERVICES
  EDUCATION
  ENERGY_AND_UTILITIES
  FINANCIAL_SERVICES
  GOVERNMENT
  HEALTHCARE_AND_PHARMACEUTICALS
  HOSPITALITY
  INSURANCE
  LEGAL
  MANUFACTURING
  NONPROFIT
  OTHER
  RETAIL_AND_WHOLESALE
  TECHNOLOGY
  TRANSPORTATION
  NOT_FOR_PROFIT
}

type IndustriesCursor {
  nodes: [Industry!]!
  pagination: Pagination!
}

"""A collection of industries"""
type Industry implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  enumName: String!
  id: Int!
  name: String!
  updatedAt: ISO8601DateTime!
}

"""Benchmarking data for an industry"""
type IndustryBenchmark implements Identifier {
  baseline: IndustryBenchmarkSizes!
  days90: IndustryBenchmarkSizes!
  id: Int!
  industry: Industries!
  year: IndustryBenchmarkSizes!
}

"""Benchmarking data sizes"""
type IndustryBenchmarkSizes {
  large: Float!
  medium: Float!
  small: Float!
}

type IntegrationDetectionTrend {
  distribution: JSON
  trend: JSON
}

type IntegrationSummary {
  mappedDetections: Int
  totalDetections: Int
  uniqueUsers: Int
  unmappedDetections: Int
}

"""An IP range"""
type IpRange implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  createdByEmail: String
  friendlyIpEnd: String!
  friendlyIpStart: String!
  id: Int!
  label: String!
  monthClicks: Int!
  quarterClicks: Int!
  updatedAt: ISO8601DateTime!
}

input IpRangeAttributes {
  label: String!
  friendlyIpStart: String!
  friendlyIpEnd: String!
}

enum IpRangePurgeTimePeriods {
  DAYS_30
  DAYS_90
}

"""Autogenerated return type of IpRangesCreate"""
type IpRangesCreatePayload {
  errors: [Error!]
  node: IpRange
}

type IpRangesCursor {
  nodes: [IpRange!]!
  pagination: Pagination!
}

"""Autogenerated return type of IpRangesDelete"""
type IpRangesDeletePayload {
  errors: [Error!]
  node: IpRange
}

"""Autogenerated return type of IpRangesPurge"""
type IpRangesPurgePayload {
  errors: [Error!]
  node: IpRange
}

enum IpRangesSortFields {
  LABEL
  START
  CREATEDAT
  CREATEDBYEMAIL
}

"""Autogenerated return type of IpRangesUpdate"""
type IpRangesUpdatePayload {
  errors: [Error!]
  node: IpRange
}

"""An ISO 8601-encoded date"""
scalar ISO8601Date

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""Stringified JSON object to be parsed as non typed"""
scalar JSON

"""The Kcm Account Settings"""
type Kcm implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  kcmEnabled: Boolean!
  kcmSubscriptionEndDate: ISO8601Date
  updatedAt: ISO8601DateTime!
}

input KcmAttributes {
  id: Int
  kcmEnabled: Boolean
  kcmSubscriptionEndDate: ISO8601DateTime
}

"""User Event API key"""
type Key {
  id: Int!
  jwt: String!
  name: String!
}

"""A Webhook definition"""
type KeyValue implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  key: String!
  updatedAt: ISO8601DateTime!
  value: String!
}

"""Kmsat Event Type"""
type KmsatEvent implements EventTypeInterface {
  description: String
  id: BigInt!
  name: TimelineEventTypes!
}

enum KnowledgeAreas {
  PASSWORDS_AUTHENTICATION
  EMAIL_SECURITY
  INTERNET_USE
  SOCIAL_MEDIA
  MOBILE_DEVICES
  INCIDENT_REPORTING
  HUMAN_FIREWALL
}

type KnowledgePoint {
  timeframe: ReportTimeframe
  x: KnowledgeAreas!
  y: Float!
}

type KnowledgeSeries {
  data: [KnowledgePoint!]!
  name: String!
  timeframe: ReportTimeframe
}

type KnowledgeSeriesCollection {
  csv: String!
  dataseries: [KnowledgeSeries!]!
  timeframe: ReportTimeframe
}

type KnowledgeTimeSeries {
  data: [TimePoint!]!
  name: KnowledgeAreas!
  timeframe: ReportTimeframe
}

type KnowledgeTimeSeriesCollection {
  csv: String!
  timeframe: ReportTimeframe
  timeseries: [KnowledgeTimeSeries!]!
}

"""Landing Domain"""
type LandingDomain implements Identifier & Timestamps {
  active: Boolean
  createdAt: ISO8601DateTime!
  id: Int!
  isDefault: Boolean!
  name: String!
  previewDefault: Boolean!
  updatedAt: ISO8601DateTime!
}

input LandingDomainAttributes {
  name: String
  isDefault: Boolean
  previewDefault: Boolean
}

"""Autogenerated return type of LandingDomainsCreate"""
type LandingDomainsCreatePayload {
  errors: [Error!]
  node: LandingDomain
}

type LandingDomainsCursor {
  nodes: [LandingDomain!]!
  pagination: Pagination!
}

"""Autogenerated return type of LandingDomainsDelete"""
type LandingDomainsDeletePayload {
  errors: [Error!]
  node: LandingDomain
}

enum LandingDomainSortFields {
  NAME
  PREVIEW_DEFAULT
  IS_DEFAULT
}

"""Autogenerated return type of LandingDomainsToggleArchived"""
type LandingDomainsToggleArchivedPayload {
  errors: [Error!]
  node: LandingDomain
}

"""Autogenerated return type of LandingDomainsUpdate"""
type LandingDomainsUpdatePayload {
  errors: [Error!]
  node: LandingDomain
}

"""Email Templates for Phishing"""
type LandingPage implements Identifier & Timestamps {
  category: LandingPageCategory
  contentHtml: String!
  createdAt: ISO8601DateTime!
  id: Int!
  markedAsUpdatedAt: ISO8601DateTime
  previewUrl: String!
  shortLivedPublicPreviewUrl: String
  slug: String!
  title: String!
  type: LandingPageTypes!
  updatedAt: ISO8601DateTime!
  url: String!
}

input LandingPageAttributes {
  title: String!
  contentHtml: String!
}

"""An unpaginated list of Landing Page Categories"""
type LandingPageCategories {
  nodes: [LandingPageCategory!]!
}

"""Category object to filter LandingPage nodes"""
type LandingPageCategory implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  landingPageCount: Int!
  landingPages: [LandingPage!]!
  name: String!
  type: LandingPageCategoryTypes!
  updatedAt: ISO8601DateTime!
}

input LandingPageCategoryAttributes {
  name: String!
}

"""Autogenerated return type of LandingPageCategoryCreate"""
type LandingPageCategoryCreatePayload {
  errors: [Error!]
  node: LandingPageCategory
}

"""Autogenerated return type of LandingPageCategoryDelete"""
type LandingPageCategoryDeletePayload {
  errors: [Error!]
  node: LandingPageCategory
}

enum LandingPageCategoryTypes {
  ALL
  SYSTEM
  USER
  MANAGED
}

"""Autogenerated return type of LandingPageCategoryUpdate"""
type LandingPageCategoryUpdatePayload {
  errors: [Error!]
  node: LandingPageCategory
}

"""Landing Page Drafts"""
type LandingPageCounts {
  allCount: Int!
  draftsCount: Int!
}

"""Autogenerated return type of LandingPageCreate"""
type LandingPageCreatePayload {
  errors: [Error!]
  node: LandingPage
}

"""Autogenerated return type of LandingPageImport"""
type LandingPageImportPayload {
  errors: [Error!]
  nodes: [LandingPage!]
}

type LandingPagesCursor {
  nodes: [LandingPage!]!
  pagination: Pagination!
}

enum LandingPageSortFields {
  TITLE
  UPDATED
  CATEGORY_NAME
}

enum LandingPageTypes {
  ALL
  SYSTEM
  USER
  MANAGED
}

"""Autogenerated return type of LandingPageUpdate"""
type LandingPageUpdatePayload {
  errors: [Error!]
  node: LandingPage
}

"""Modstore languages"""
type Language {
  code: String!
  icon: String!
  id: Int!
  name: String!
  translationKey: String!
}

enum Languages {
  AF_ZA
  SQ_AL
  AM_ET
  AR
  AR_MOD
  AR_DZ
  AR_BH
  AR_EG
  AR_IQ
  AR_JO
  AR_KW
  AR_LB
  AR_LY
  AR_MA
  AR_OM
  AR_QA
  AR_SA
  AR_SY
  AR_TN
  AR_AE
  AR_YE
  HY_AM
  AS_IN
  AZ_AZ
  EU_ES
  BE_BY
  BN_IN
  BS_BA
  BG_BG
  MY_MM
  CA_ES
  ZH
  ZH_HK
  ZH_MO
  ZH_CN
  ZH_TW
  ZH_SG
  HR_HR
  CS_CZ
  DA_DK
  NL_BE
  NL_NL
  EN
  EN_AU
  EN_BZ
  EN_CA
  EN_KY
  EN_GB
  EN_IN
  EN_IE
  EN_JM
  EN_NZ
  EN_PH
  EN_SG
  EN_ZA
  EN_TT
  EN_US
  ET_EE
  FA_IR
  FI_FI
  FR
  FR_BE
  FR_CA
  FR_FR
  FR_LU
  FR_CH
  GD_IE
  DE
  DE_AT
  DE_DE
  DE_LI
  DE_LU
  DE_CH
  EL_GR
  GN_PY
  GU_IN
  HE_IL
  HI_IN
  HU_HU
  IS_IS
  ID_ID
  IT_IT
  IT_CH
  JA_JP
  KN_IN
  KK_KZ
  KM_KH
  SW
  KO_KR
  LO_LA
  LV_LV
  LT_LT
  MS
  MS_BN
  MS_MY
  ML_IN
  MT_MT
  MI_NZ
  MR_IN
  MN_MN
  NE_NP
  NO_NO
  NB_NO
  OR_IN
  PL_PL
  PT
  PT_BR
  PT_PT
  PA_PK
  RO_MO
  RO_RO
  RU_RU
  RU_MO
  SA_IN
  SR_RS
  SD_PK
  SI_LK
  SK_SK
  SL_SL
  SO_SO
  ES
  ES_AR
  ES_BO
  ES_CL
  ES_CO
  ES_CR
  ES_DO
  ES_EC
  ES_SV
  ES_GT
  ES_HN
  ES_MX
  ES_NI
  ES_PA
  ES_PY
  ES_PE
  ES_PR
  ES_419
  ES_ES
  ES_UY
  ES_VE
  SW_KE
  SV_FI
  SV_SE
  TG_TJ
  TA_SG
  TE_IN
  TH_TH
  BO_NP
  TR_TR
  TK_TM
  UK_UA
  UR_PK
  UZ_UZ
  VI_VN
  XH_ZA
  YI_IL
  ZU_ZA
  SR_CYRL_RS
  SR_LATN_RS
}

type Latest {
  latest: Boolean!
}

"""
Autogenerated return type of LaunchDarklyDisablePhishingTemplateExclusions
"""
type LaunchDarklyDisablePhishingTemplateExclusionsPayload {
  errors: [Error!]
  node: JSON
}

"""
Autogenerated return type of LaunchDarklyEnablePhishingTemplateExclusions
"""
type LaunchDarklyEnablePhishingTemplateExclusionsPayload {
  errors: [Error!]
  node: JSON
}

"""LDAP Sync Reports"""
type LdapSyncReport implements Identifier & Timestamps {
  clientFileUrl: String
  completedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  groupUpdates: LdapSyncReportUpdates!
  id: Int!
  identityProvider: String
  membershipUpdates: LdapSyncReportUpdates!
  source: UserProvisioningSources!
  status: LdapSyncReportStatuses!
  syncFileUrl: String
  testMode: Boolean!
  truncatedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
  userUpdates: LdapSyncReportUpdates!
}

"""LDAP Sync Report Item"""
type LdapSyncReportItem implements Identifier & Timestamps {
  action: LdapSyncReportItemActions!
  createdAt: ISO8601DateTime!
  email: String
  error: String
  group: String
  guid: String
  hidden: Boolean!
  id: Int!
  ldapObjectGuid: String
  manager: String
  message: String
  name: String
  type: LdapSyncReportItemTypes!
  updatedAt: ISO8601DateTime!
}

enum LdapSyncReportItemActions {
  ARCHIVED
  CHANGED
  CLAIMED
  CREATED
  DELETED
  UNARCHIVED
}

type LdapSyncReportItemsCursor {
  nodes: [LdapSyncReportItem!]!
  pagination: Pagination!
}

enum LdapSyncReportItemStatuses {
  ALL
  SUCCESS
  ERROR
}

enum LdapSyncReportItemTypes {
  GROUP
  USER
  MEMBERSHIP
}

type LdapSyncReportsCursor {
  nodes: [LdapSyncReport!]!
  pagination: Pagination!
}

enum LdapSyncReportSourceFilters {
  ALL
  ADI
  SCIM
  SCIM_V2
}

enum LdapSyncReportStatuses {
  PENDING
  PROCESSING
  COMPLETED
  SKIPPED
}

"""LDAP Sync Reports Updates Counts"""
type LdapSyncReportUpdates {
  archived: Int
  changed: Int
  claimed: Int
  created: Int
  deleted: Int
  errors: Int!
  success: Int!
  unarchived: Int
}

"""A leaderboard for gamification"""
type Leaderboard {
  leaderboardType: LeaderboardTypes
  leaders: [LeaderboardGroup!]
  leadersIndividualByAccount: [LeaderboardIndividualAccount!]
}

"""A leaderboard group for gamification"""
type LeaderboardGroup {
  id: Int!
  includesCurrentUser: Boolean
  name: String!
  score: Int
}

"""An individual leaderboard for the account"""
type LeaderboardIndividualAccount {
  id: Int!
  includesCurrentUser: Boolean
  name: String!
  rank: Int
  score: Int
}

"""A leaderboard for gamification"""
type LeaderboardNew {
  leaderboardType: LeaderboardTypes
  leaders: [LeadersUnion!]
}

enum LeaderboardPeriods {
  PAST_30_DAYS
  PAST_90_DAYS
  CURRENT_QUARTER
  CURRENT_YEAR
  ALL_TIME
}

enum LeaderboardTypes {
  NO_LEADERBOARD
  GROUP_LEADERBOARD
  INDIVIDUAL_LEADERBOARD
}

"""An participant/group on a leaderboard"""
interface LeaderInterface {
  id: Int!
  includesCurrentUser: Boolean
  name: String!
  score: Int
}

"""A Leaderboard Item"""
union LeadersUnion = GroupLeader | IndividualLeader

"""A rendered message intended for a specific recipient"""
type LearnerMessage implements Identifier & Timestamps {
  content: String!
  createdAt: ISO8601DateTime!
  id: Int!
  status: MessagesCampaignRecipientStatuses!
  subject: String!
  updatedAt: ISO8601DateTime!
}

input LearnerMessageAttributes {
  status: MessagesCampaignRecipientStatuses
}

type LearnerPlatformRawChart {
  series: [LearnerPlatformRawChartSeries!]
  timeframe: ReportTimeframe
}

type LearnerPlatformRawChartSeries {
  data: [LearnerPlatformRawChartSeriesData!]
  timeframe: ReportTimeframe
}

type LearnerPlatformRawChartSeriesData {
  completed: Int
  lxWeb: Int
  lxWebMobile: Int
  mobileApp: Int
  timeframe: ReportTimeframe
}

type LearnerPlatformRawColumns {
  enrollmentColumns: [ReportsLearnerPlatformRawEnrollmentColumns!]
  enrollmentItemColumns: [ReportsLearnerPlatformRawEnrollmentItemColumns!]
  enrollmentPlatformColumns: [ReportsLearnerPlatformRawEnrollmentPlatformColumns!]
  storeItemColumns: [ReportsLearnerPlatformRawStoreItemColumns!]
  timeframe: ReportTimeframe
  trainingCampaignColumns: [ReportsLearnerPlatformRawTrainingCampaignColumns!]
  userColumns: [ReportsUserColumns!]
}

type LearnerPlatformRawCsv {
  csv: String!
  timeframe: ReportTimeframe
}

type LearnerPlatformRawTableCursor {
  columns: Columns
  nodes: [Enrollment!]!
  pagination: Pagination!
  timeframe: ReportTimeframe
}

type ListCursor {
  nodes: [SavedReport!]!
  pagination: Pagination!
}

"""Autogenerated return type of LmsCommit"""
type LmsCommitPayload {
  errors: [Error!]
  node: LmsEnrollment
}

"""The training session information for an enrollment"""
type LmsEnrollment {
  completionStatus: String
  exit: String
  learnerId: Int
  learnerName: String
  location: String
  passingScore: Float
  scoreMax: Float
  scoreMin: Float
  scoreRaw: Float
  scoreScaled: Float
  sessionId: String
  sessionTime: String
  successStatus: String
  suspendData: String
  theme: String
  totalTime: String
}

"""Autogenerated return type of LmsInit"""
type LmsInitPayload {
  errors: [Error!]
  node: LmsEnrollment
}

"""Autogenerated return type of LmsTerminate"""
type LmsTerminatePayload {
  errors: [Error!]
  node: LmsEnrollment
}

"""User Locale lists for UI, Phishing, and Training"""
type Locales {
  adminLocales: [String!]!
  phishingLocales: [String!]!
  trainingLocales: [String!]!
}

type Location {
  id: String!
  name: String!
  timeframe: ReportTimeframe
}

type LogProperties {
  eventsCount: Int
  uniqueUsers: Int
}

type LogTypeTrend {
  date: String
  properties: LogProperties
}

"""Managed Training Notification"""
type ManagedNotification implements Identifier & Timestamps & NotificationInterface {
  adminEmailTemplate: NotificationTemplate
  adminEmailTemplateId: Int
  createdAt: ISO8601DateTime!
  deliveryMethod: TrainingNotificationDeliveryMethods
  emailTemplateId: Int
  enabled: Boolean
  enrollmentFilter: [NotificationEnrollmentFilter!]
  id: Int!
  lastEnrollmentId: Int
  managerEmailTemplate: NotificationTemplate
  managerEmailTemplateId: Int
  messageType: TrainingCampaignNotification!
  offsetFrom: String!
  offsetNumDays: Int
  processedAt: ISO8601DateTime
  recipientUserIds: [Int!]
  rescheduleOffset: Int
  updatedAt: ISO8601DateTime!
  userEmailTemplate: NotificationTemplate
}

input ManagedNotificationAttributes {
  messageType: TrainingCampaignNotification!
  enrollmentFilter: NotificationEnrollmentFilter
  id: ID
  timestamp: BigInt
  enabled: Boolean
  offsetNumDays: Int
  rescheduleOffset: Int
  emailTemplateId: Int
  adminEmailTemplateId: Int
  managerEmailTemplateId: Int
  recipientUserIds: [ID!]
  destroy: Boolean
  fallbackEmail: Boolean
  deliveryMethod: TrainingNotificationDeliveryMethods
}

"""A Managed Phishing Campaign"""
type ManagedPhishingCampaign implements Identifier & Timestamps & PhishingCampaignInterface {
  accountIds: [Int!]!
  accounts: [Account!]!
  active: Boolean!
  aidaSelectedTemplate: Boolean
  campaigns: [PhishingCampaign!]!
  createdAt: ISO8601DateTime!
  creator: PartnerAdmin
  emailTemplate: PhishingTemplate
  frequencyPeriod: Frequencies!
  fullRandom: Boolean
  groupIds: [Int!]!
  hideFromReports: Boolean!
  id: Int!
  landingPage: LandingPage
  lastRun: ISO8601DateTime
  localizedCampaign: Boolean
  name: String!
  nextRun: ISO8601DateTime
  phishDomain: PhishDomain
  preventAccountEdits: Boolean
  rating: [EmailTemplateDifficultyRatings!]!
  replyDomainPrefix: String
  replyPhishDomain: PhishDomain
  sendEmailAfterRun: Boolean!
  sendingDuration: Int
  sendingDurationUnits: Durations
  spreadEmails: Boolean
  storeReplyContent: Boolean!
  templateCategories: [PhishingTemplateCategory!]!
  timeZone: TimeZones!
  trackOutOfOfficeReplies: Boolean!
  trackReplies: Boolean!
  trackingDuration: Int!
  trackingDurationUnits: Durations!
  updatedAt: ISO8601DateTime!
}

input ManagedPhishingCampaignAttributes {
  name: String
  frequencyPeriod: Frequencies
  accountIds: [Int!]
  groupIds: [Int!]
  localizedCampaign: Boolean
  lastRun: ISO8601DateTime
  nextRunDate: ISO8601Date
  nextRunTime: Time
  timeZone: TimeZones
  spreadEmails: Boolean
  sendingDuration: Int
  sendingDurationUnits: Durations
  trackingDuration: Int
  trackingDurationUnits: Durations
  trackReplies: Boolean
  replyDomainPrefix: String
  replyPhishDomainId: Int
  storeReplyContent: Boolean
  trackOutOfOfficeReplies: Boolean
  selectedTemplateCategories: [Int!]
  rating: [EmailTemplateDifficultyRatings!]
  phishDomainId: Int
  sendEmailAfterRun: Boolean
  hideFromReports: Boolean
  landingPageId: Int
  emailTemplateId: Int
  preventAccountEdits: Boolean
}

"""Autogenerated return type of ManagedPhishingCampaignsCreate"""
type ManagedPhishingCampaignsCreatePayload {
  errors: [Error!]
  node: ManagedPhishingCampaign
}

type ManagedPhishingCampaignsCursor {
  nodes: [ManagedPhishingCampaign!]!
  pagination: Pagination!
}

"""Autogenerated return type of ManagedPhishingCampaignsDeactivate"""
type ManagedPhishingCampaignsDeactivatePayload {
  errors: [Error!]
  node: ManagedPhishingCampaign
}

"""Autogenerated return type of ManagedPhishingCampaignsDelete"""
type ManagedPhishingCampaignsDeletePayload {
  errors: [Error!]
  node: ManagedPhishingCampaign
}

"""Autogenerated return type of ManagedPhishingCampaignsHideFromReports"""
type ManagedPhishingCampaignsHideFromReportsPayload {
  errors: [Error!]
  node: ManagedPhishingCampaign
}

"""Autogenerated return type of ManagedPhishingCampaignsUpdate"""
type ManagedPhishingCampaignsUpdatePayload {
  errors: [Error!]
  node: ManagedPhishingCampaign
}

"""A Managed Store Purchase"""
type ManagedStorePurchase implements Identifier & Timestamps & StorePurchaseInterface {
  alternatives: [CourseAlternative!]!
  archived: Boolean
  assessment: Boolean
  assessmentType: AssessmentTypes
  assetType: String!
  createdAt: ISO8601DateTime!
  description: String
  duration: Int
  hidden: Boolean
  id: Int!
  polymorphicId: String!
  publishedAt: ISO8601DateTime
  purchasedAt: ISO8601DateTime
  retired: Boolean
  retiringSoon: Boolean
  stats: PurchasedCourseStats!
  storeItem: StoreItemUnion
  storeItemSource: String
  storeItemType: String
  storeItemUuid: String
  title: String!
  trainingCampaigns: [ManagedTrainingCampaign!]!
  updatedAt: ISO8601DateTime!
  uploaded: Boolean
}

input ManagedStorePurchaseAttributes {
  hidden: Boolean
}

"""
Autogenerated return type of ManagedStorePurchasesAddToChildrensLibraries
"""
type ManagedStorePurchasesAddToChildrensLibrariesPayload {
  errors: [Error!]
  node: Int!
}

"""Autogenerated return type of ManagedStorePurchasesCreate"""
type ManagedStorePurchasesCreatePayload {
  errors: [Error!]
  node: ManagedStorePurchase
}

type ManagedStorePurchasesCursor {
  nodes: [ManagedStorePurchase!]!
  pagination: Pagination!
}

"""Autogenerated return type of ManagedStorePurchasesRemove"""
type ManagedStorePurchasesRemovePayload {
  errors: [Error!]
  node: ManagedStorePurchase
}

"""Autogenerated return type of ManagedStorePurchasesUpdate"""
type ManagedStorePurchasesUpdatePayload {
  errors: [Error!]
  node: ManagedStorePurchase
}

"""A Managed Training Campaign"""
type ManagedTrainingCampaign implements Identifier & Timestamps & TrainingCampaignInterface {
  accountIds: [Int!]!
  accounts: [Account!]!
  active: Boolean!
  allowPastDueCompletions: Boolean!
  allowSurveyComments: Boolean!
  allowSurveys: Boolean!
  assets: [TrainingCampaignAsset!]!
  autoEnroll: Boolean
  campaigns: [TrainingCampaign!]!
  createdAt: ISO8601DateTime!
  creator: PartnerAdmin
  deleted: Boolean!
  endCampaignAtDate: ISO8601Date
  endCampaignAtTime: Time
  endCampaignOption: TrainingCampaignEnd
  endsAt: ISO8601DateTime
  enrollmentDuration: Int
  enrollmentDurationType: TrainingCampaignDurations
  groupIds: [Int!]!
  id: Int!
  name: String!
  notifications: [ManagedNotification!]!
  percentComplete: Int!
  preventAccountEdits: Boolean
  resetAutoEnrollments: Boolean
  selectedContent: [String!]
  startCampaignAtDate: ISO8601Date
  startCampaignAtTime: Time
  startsAt: ISO8601DateTime!
  status: TrainingCampaignStatuses!
  timeZone: TimeZones
  trackScores: Boolean
  updatedAt: ISO8601DateTime!
}

input ManagedTrainingCampaignAttributes {
  name: String
  accountIds: [Int!]
  groupIds: [Int!]
  allowPastDueCompletions: Boolean
  allowSurveyComments: Boolean
  allowSurveys: Boolean
  autoEnroll: Boolean
  deleted: Boolean
  endCampaignAtTime: Time
  endCampaignAtDate: ISO8601Date
  enrollmentDuration: Int
  enrollmentDurationType: TrainingCampaignDurations
  resetAutoEnrollments: Boolean
  selectedContent: [String!]
  startCampaignAtTime: Time
  startCampaignAtDate: ISO8601Date
  status: TrainingCampaignStatuses
  timeZone: TimeZones
  trackScores: Boolean
  preventAccountEdits: Boolean
  notifications: [ManagedNotificationAttributes!]!
}

"""Autogenerated return type of ManagedTrainingCampaignsClose"""
type ManagedTrainingCampaignsClosePayload {
  errors: [Error!]
  node: ManagedTrainingCampaign
}

"""Autogenerated return type of ManagedTrainingCampaignsCreate"""
type ManagedTrainingCampaignsCreatePayload {
  errors: [Error!]
  node: ManagedTrainingCampaign
}

type ManagedTrainingCampaignsCursor {
  nodes: [ManagedTrainingCampaign!]!
  pagination: Pagination!
}

"""Autogenerated return type of ManagedTrainingCampaignsDelete"""
type ManagedTrainingCampaignsDeletePayload {
  errors: [Error!]
  node: ManagedTrainingCampaign
}

"""Autogenerated return type of ManagedTrainingCampaignsUpdate"""
type ManagedTrainingCampaignsUpdatePayload {
  errors: [Error!]
  node: ManagedTrainingCampaign
}

"""The result of a course check"""
type ManagedTrainingCourseCheckResult {
  """Accounts that can see some content"""
  partialAccounts: [Account!]!
  storeItems: [StoreItem!]!

  """Accounts that can't see any content"""
  totalAccounts: [Account!]!
}

"""Manager Stats"""
type ManagerReport implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  directReports(id: Int = null): [DirectReport!]
  id: Int!
  mandatoryEnrollmentsCompleteCount: Int!
  mandatoryEnrollmentsCount: Int!
  phishingFailures: Int
  phishingNotReported: Int
  phishingReported: Int
  phishingTotal: Int
  ppp: Float
  riskScore: Float
  totalMembersCount: Int!
  trainingPercentComplete: Float!
  updatedAt: ISO8601DateTime!
  usersWithCompleteEnrollments: [DirectReport!]!
  usersWithCompleteEnrollmentsCount: Int!
  usersWithDueSoonEnrollments: [DirectReport!]!
  usersWithDueSoonEnrollmentsCount: Int!
  usersWithOptionalEnrollments: [DirectReport!]!
  usersWithOptionalEnrollmentsCount: Int!
  usersWithOverDueEnrollments: [DirectReport!]!
  usersWithOverDueEnrollmentsCount: Int!
  usersWithPhishingFailures: [DirectReport!]!
  usersWithPhishingFailuresCount: Int
}

type MappedUserData {
  aliases: [AliasData!]
  antiPhishingScore: Int
  awarenessScore: Int
  createdDate: ISO8601DateTime
  department: String
  email: String
  employeeTitle: String
  firstName: String
  hostNameEmails: [HostNameEmailsData!]
  id: Int
  isActive: Boolean
  lastName: String
  location: String
  managerEmail: String
  managerId: Int
  modifiedDate: ISO8601DateTime
  organizationId: Int
  phishingReportScore: Int
  source: String
  trainingScore: Int
}

type MappedUsersList {
  data: [MappedUserData!]!
  draw: Int!
  recordsFiltered: Int!
  recordsTotal: Int!
}

type MappingRecommendationFilterData {
  id: String
  text: String
}

type MappingRule {
  delimiterList: [Delimiters!]!
  fieldList: [String!]!
  id: ID!
  isActive: Boolean!
  key: String!
  vendorName: String!
  verb: RuleVerb!
}

type MappingRules {
  customRules: [MappingRule!]!
  systemRules: [MappingRule!]!
}

enum MappingRuleTypes {
  custom
  system
}

"""A user membership"""
type Membership implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  group: Group
  id: Int!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""Message content"""
type MessageContent implements Identifier & Timestamps {
  body: String!
  content: String!
  createdAt: ISO8601DateTime!
  emailTemplateId: Int
  id: Int!
  language: String!
  subject: String!
  updatedAt: ISO8601DateTime!
}

input MessageContentAttributes {
  body: String!
  language: String!
  subject: String!
  emailTemplateId: Int
}

input MessagesAttributes {
  messageContentAttributes: MessageContentAttributes!
  campaignType: MessagesCampaignTypes!
  selectedGroups: [Int!]!
  selectedTopics: [Int!]
  allUsers: Boolean!
  useCompanyLogo: Boolean = false
  sendEmail: Boolean
  name: String!
  frequencyPeriod: MessagesCampaignFrequencyTypes
}

enum MessagesCampaignFrequencyTypes {
  WEEK
  BIWEEK
  MONTH
}

enum MessagesCampaignRecipientStatuses {
  CREATED
  DELIVERED
  FETCHED
  READ
}

enum MessagesCampaignStatuses {
  PENDING
  GENERATING
  SCHEDULED
  DELIVERED
  FAILED
}

enum MessagesCampaignTypes {
  CUSTOM
  HINTS_AND_TIPS
  SCAM_OF_THE_WEEK
}

"""Autogenerated return type of MessagesCreateCampaign"""
type MessagesCreateCampaignPayload {
  errors: [Error!]
  node: Campaign
}

type MessageSentData {
  error: String
  jobId: Int
  text: String
}

"""Autogenerated return type of MessagesSetCampaignActiveState"""
type MessagesSetCampaignActiveStatePayload {
  errors: [Error!]
  node: Campaign
}

"""Autogenerated return type of MessagesSetRunArchiveState"""
type MessagesSetRunArchiveStatePayload {
  errors: [Error!]
  node: Run
}

"""Autogenerated return type of MessagesUpdateCampaign"""
type MessagesUpdateCampaignPayload {
  errors: [Error!]
  node: Campaign
}

"""Autogenerated return type of MessagesUpdateMessageRecipient"""
type MessagesUpdateMessageRecipientPayload {
  errors: [Error!]
  node: LearnerMessage
}

"""Message Topic for campaigns and runs"""
type MessageTopic {
  id: Int!
  messagesCampaignId: Int!
  topicId: Int!
}

"""Event Metadata"""
union Metadata = AuditMetadata | BounceMetadata | BreachMetadata | BrowserMetadata | CommonMetadata | EnrollmentMetadata | PiqMetadata | SchMetadata | VishingMetadata

"""A modstore recommendation"""
type ModstoreRecommendation {
  enrollment: Enrollment
  rating: Float!
  storeItem: StoreItem!
  uuid: String!
}

"""All modstore recommendations for an account"""
type ModstoreRecommendations {
  phishingRecommendations: [ModstoreRecommendation!]!
  trainingRecommendations: [ModstoreRecommendation!]!
}

type MostClickedEmailTemplate {
  clicks: Int!
  name: String!
  timeframe: ReportTimeframe
}

enum MsTeamsStatus {
  PENDING_CALLBACK
  PENDING_USER_SYNC
  BOT_NOT_INSTALLED
  ACTIVE
}

"""An account"""
type MultiInstanceResult {
  code: String
  currentInstance: Boolean!
  results: [AccountMultiInstance!]
}

type Mutation {
  """Deletes the account if deletion request is still valid"""
  accountConfirmDeletion(id: Int!): AccountsConfirmDeletionPayload
  accountCreate(attributes: AccountAttributes!): AccountsCreatePayload
  accountCreatePabInstance(id: Int): AccountsCreatePabInstancePayload
  accountDeleteCert(accountId: Int!): AccountsDeleteCertPayload

  """Deletes an account that can be deleted by only one person."""
  accountDeleteFree(id: Int!): AccountsDeleteFreePayload
  accountDeleteLogo(accountId: Int!): AccountsDeleteLogoPayload
  accountDeletePabIcon(accountId: Int!, id: Int!): AccountsDeletePabIconPayload
  accountDeletePabInstance(accountId: Int!, id: Int!): AccountsDeletePabInstancePayload
  accountDeletePhisher(id: Int!): AccountsDeletePhisherPayload
  accountInvokeReseed(id: Int!): AccountsInvokeReseedPayload
  accountPrivacyUpdateAccess(newAccessExpiration: AccountPartnerAccessPeriods): AccountSettingsPrivacyUpdateAccessPayload
  accountRefreshData(id: Int!): AccountsRefreshDataPayload
  accountRegenerateToken(accountId: Int!, token: AccountTokens!): AccountsRegenerateTokenPayload

  """Marks the account as Requested to be Deleted"""
  accountRequestDeletion(id: Int!): AccountsRequestDeletionPayload
  accountResetFreeCampaign(id: Int!, campaignType: String!): AccountsResetFreeCampaignPayload
  accountRevokeToken(accountId: Int!, token: AccountTokens!): AccountsRevokeTokenPayload
  accountSalesforceDisconnect(sfid: String!): AccountSettingsSalesforceDisconnectPayload

  """Get Salesforce data for account"""
  accountSalesforceFetch(id: Int, sfid: String, partnerSfid: String, fetchFromBothSfid: Boolean): AccountSettingsSalesforceFetchPayload

  """Schedule Salesforce data fetch for account"""
  accountSalesforceScheduleFetch(id: Int!, partnerId: String, sfid: String, timestamp: ISO8601DateTime!, fetchFromBothSfid: Boolean): AccountSettingsSalesforceScheduleFetchPayload
  accountStartEec: AccountsStartEecPayload
  accountToggleArchived(id: Int!): AccountsToggleArchivedPayload
  accountUpdate(id: Int, attributes: AccountAttributes!): AccountsUpdatePayload
  allowedDomainCreate(accountId: Int, name: String!, verificationStatus: AllowedDomainVerificationStatuses!, domainType: AllowedDomainTypes!): AllowedDomainsCreatePayload
  allowedDomainDelete(id: Int!): AllowedDomainsDeletePayload
  allowedDomainImport(accountId: Int!, domains: [String!]!): AllowedDomainsImportPayload
  allowedDomainVerify(id: Int!): AllowedDomainsVerifyPayload

  """Create an API Token"""
  apiTokensCreate(payload: ApiTokenAttributes!): ApiTokensCreatePayload

  """Delete an API Token"""
  apiTokensDelete(id: Int!): ApiTokensDeletePayload

  """Reassign API Token(s) to current admin"""
  apiTokensReassign(apiOwnerId: Int!, primaryAccountOwnerId: Int): ApiTokensReassignPayload

  """Update an API Token"""
  apiTokensUpdate(id: Int!, payload: ApiTokenAttributes!): ApiTokensUpdatePayload

  """Create an ASAP program for the current account"""
  asapCreateProgram(attributes: AsapProgramAttributes): AsapCreateProgramPayload

  """Create an ASAP program task for the current account's program"""
  asapCreateProgramTask(attributes: AsapProgramTaskAttributes!): AsapCreateProgramTaskPayload

  """Delete an ASAP program for the current account"""
  asapDeleteProgram(id: Int!): AsapDeleteProgramPayload

  """Create an ASAP program for the current account"""
  asapUpdateProgram(id: Int!, attributes: AsapProgramAttributes): AsapUpdateProgramPayload

  """Update an ASAP program task"""
  asapUpdateProgramTask(id: Int!, attributes: AsapProgramTaskAttributes!): AsapUpdateProgramTaskPayload

  """See if enrollment unlocks a badge"""
  badgesEarn(enrollmentId: Int): BadgesEarnPayload

  """Marks badges as acknowledged"""
  badgesMarkAsAcknowledged(badgeIds: [Int!]!): BadgesAcknowledgePayload

  """Marks a badge as viewed"""
  badgesMarkAsViewed: BadgesViewPayload
  callbackPhishingPhoneNumberToggleDeletion(id: Int!): CallbackPhishingPhoneNumbersToggleDeletionPayload
  callbackPhishingTestEmailCreate(emailTemplateId: Int!, greetingTemplateUuid: String!, phoneNumberRegion: String!): CallbackPhishingTestEmailsCreatePayload

  """Create a category"""
  cdrmsCreateCategory(name: String!): SecurityCoachCdrmsCreateCategoryPayload

  """Create a rule"""
  cdrmsCreateRule(name: String!, vendorCodeName: String!, code: String!, techContentReviewedName: String!, criteria: TeachableMomentCriteriaPayload!, count: Int!, lookbackDays: Int!, aggregate: Boolean!, category: String!, topics: [String!]!, description: String!, rtcCoachingMessage: String!, riskLevel: String!, severity: String!, stage: String!): SecurityCoachCdrmsCreateRulePayload

  """Create a topic"""
  cdrmsCreateTopic(name: String!): SecurityCoachCdrmsCreateTopicPayload

  """Create a vendor"""
  cdrmsCreateVendor(vendorName: String!, vendorCode: String!, vendorType: String!, logType: String!): SecurityCoachCdrmsCreateVendorPayload

  """Delete a category"""
  cdrmsDeleteCategory(id: String!): SecurityCoachCdrmsDeleteCategoryPayload

  """Delete a rule"""
  cdrmsDeleteRule(id: String!): SecurityCoachCdrmsDeleteRulePayload

  """Delete a topic"""
  cdrmsDeleteTopic(id: String!): SecurityCoachCdrmsDeleteTopicPayload

  """Delete a vendor"""
  cdrmsDeleteVendor(id: String!): SecurityCoachCdrmsDeleteVendorPayload

  """Release a rule"""
  cdrmsReleaseRule(id: String!, email: String!, environment: String!): SecurityCoachCdrmsReleaseRulePayload

  """Release a vendor to production"""
  cdrmsReleaseVendorToProduction(id: String!, vendorName: String!, vendorCode: String!, vendorType: String!, logType: String!): SecurityCoachCdrmsReleaseVendorToProductionPayload

  """Update a category"""
  cdrmsUpdateCategory(id: String!, name: String!): SecurityCoachCdrmsUpdateCategoryPayload

  """Partially update a category"""
  cdrmsUpdatePartialCategory(id: String!, name: String!): SecurityCoachCdrmsUpdatePartialCategoryPayload

  """Partially update a rule"""
  cdrmsUpdatePartialRule(id: String!, name: String!, vendorCodeName: String!, code: String!, techContentReviewedName: String!, criteria: TeachableMomentCriteriaPayload!, count: Int!, lookbackDays: Int!, aggregate: Boolean!, category: String!, topics: [String!]!, description: String!, rtcCoachingMessage: String!, riskLevel: String!, severity: String!, stage: String!): SecurityCoachCdrmsUpdatePartialRulePayload

  """Partially update a topic"""
  cdrmsUpdatePartialTopic(id: String!, name: String!): SecurityCoachCdrmsUpdatePartialTopicPayload

  """Partially update a vendor"""
  cdrmsUpdatePartialVendor(id: String!, vendorName: String!, vendorCode: String!, vendorType: String!, logType: String!): SecurityCoachCdrmsUpdatePartialVendorPayload

  """Update a rule"""
  cdrmsUpdateRule(id: String!, name: String!, vendorCodeName: String!, code: String!, techContentReviewedName: String!, criteria: TeachableMomentCriteriaPayload!, count: Int!, lookbackDays: Int!, aggregate: Boolean!, category: String!, topics: [String!]!, description: String!, rtcCoachingMessage: String!, riskLevel: String!, severity: String!, stage: String!): SecurityCoachCdrmsUpdateRulePayload

  """Update a topic"""
  cdrmsUpdateTopic(id: String!, name: String!): SecurityCoachCdrmsUpdateTopicPayload

  """Update a vendor"""
  cdrmsUpdateVendor(id: String!, vendorName: String!, vendorCode: String!, vendorType: String!, logType: String!): SecurityCoachCdrmsUpdateVendorPayload

  """Assign a content theme to a selected campaign for the current account"""
  contentThemeAssignToTrainingCampaign(contentThemeId: Int!, trainingCampaignId: Int!): ContentThemeAssignToTrainingCampaignPayload

  """Clone a content theme for the current account"""
  contentThemeClone(id: Int!): ContentThemeClonePayload

  """Create a content theme for the current account"""
  contentThemeCreate(attributes: ContentThemeAttributes!, language: String = "en-us"): ContentThemeCreatePayload

  """Delete a content theme for the current account"""
  contentThemeDelete(id: Int!): ContentThemeDeletePayload

  """
  Remove the content theme from a selected campaign for the current account
  """
  contentThemeRemoveDefault: ContentThemeRemoveDefaultPayload

  """
  Remove the content theme from a selected campaign for the current account
  """
  contentThemeRemoveFromTrainingCampaign(trainingCampaignId: Int!): ContentThemeRemoveFromTrainingCampaignPayload

  """Set the default content theme for the current account"""
  contentThemeSetDefault(id: Int!): ContentThemeSetDefaultPayload

  """Update a content theme for the current account"""
  contentThemeUpdate(id: Int!, attributes: ContentThemeAttributes!, language: String = "en-us"): ContentThemeUpdatePayload

  """Sign out current_user, and/or current_partner_admin"""
  currentActorsSignOut(actors: [String!]!): CurrentActorsSignOutPayload

  """Create a linked device"""
  deviceDetailsCreate(payload: DeviceDetailsAttributes!): DeviceDetailsCreatePayload

  """Delete a linked device"""
  deviceDetailsDelete(deviceId: String!): DeviceDetailsDeletePayload

  """Updates a linked device FCM Token"""
  deviceDetailsUpdate(deviceId: String!, fcmToken: String): DeviceDetailsUpdatePayload

  """Remove the current account from the phishing-template-exclusions flag"""
  disablePhishingTemplateExclusions: LaunchDarklyDisablePhishingTemplateExclusionsPayload

  """Create a DKIM config"""
  dkimConfigCreate(attributes: DkimConfigAttributes!): DkimConfigsCreatePayload

  """Delete a DKIM config"""
  dkimConfigDelete(id: Int!): DkimConfigsDeletePayload

  """Update a DKIM config"""
  dkimConfigUpdate(id: Int!, attributes: DkimConfigAttributes!): DkimConfigsUpdatePayload

  """DNS Validate a DKIM config"""
  dkimConfigValidate(id: Int!): DkimConfigsValidatePayload

  """Create a DMI config"""
  dmiConfigCreate(attributes: DmiConfigAttributes!): DmiConfigsCreatePayload

  """Delete a DMI config"""
  dmiConfigDelete(id: Int!): DmiConfigsDeletePayload

  """Reconnect a DMI config"""
  dmiConfigReconnect(id: Int!): DmiConfigsReconnectPayload

  """Update a DMI config"""
  dmiConfigUpdate(id: Int!, attributes: DmiConfigAttributes!): DmiConfigsUpdatePayload

  """Creates a report download"""
  downloadCreateAccountReportCard(configuration: ReportsTypesAccountReportCard!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateActiveRulesReport(configuration: ReportsTypesActiveRulesReport!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateAssessmentScoreByKnowledgeArea(configuration: ReportsTypesAssessmentScoreByKnowledgeArea!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateAssessmentScoreByKnowledgeAreaOverTime(configuration: ReportsTypesAssessmentScoreByKnowledgeAreaOverTime!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateEmailsSentByGroup(configuration: ReportsTypesEmailsSentByGroup!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateEmailsSentByTemplate(configuration: ReportsTypesEmailsSentByTemplate!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateFailureTypeUserCounts(configuration: ReportsTypesFailureTypeUserCounts!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateFailureTypesBarChart(configuration: ReportsTypesFailureTypesBarChart!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateFailuresByPhishingTemplate(configuration: ReportsTypesFailuresByPhishingTemplate!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateGlobalPhishingAggregate(configuration: ReportsTypesGlobalPhishingAggregate!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateGlobalPhishingRaw(configuration: ReportsTypesGlobalPhishingRaw!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateGlobalTrainingAggregate(configuration: ReportsTypesGlobalTrainingAggregate!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateGlobalTrainingRaw(configuration: ReportsTypesGlobalTrainingRaw!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateGroupReportCard(configuration: ReportsTypesGroupReportCard!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateIncompleteTraining(configuration: ReportsTypesIncompleteTraining!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateInitialPpp(configuration: ReportsTypesInitialPpp!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateLearnerPlatformRaw(configuration: ReportsTypesLearnerPlatformRaw!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateNoTrainingAssigned(configuration: ReportsTypesNoTrainingAssigned!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateOverallPppByAccount(configuration: ReportsTypesOverallPppByAccount!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateOverallPppByCampaign(configuration: ReportsTypesOverallPppByCampaign!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateOverallPppByGroup(configuration: ReportsTypesOverallPppByGroup!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateOverallPppByTrainingTime(configuration: ReportsTypesOverallPppByTrainingTime!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreatePabUserActivity(configuration: ReportsTypesPabUserActivity!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreatePhishFailurePercentageByCampaigns(configuration: ReportsTypesPhishFailurePercentageByCampaigns!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreatePhishFailurePercentageOverall(configuration: ReportsTypesPhishFailurePercentageOverall!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreatePhishingSecurityTests(configuration: ReportsTypesPhishingSecurityTests!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreatePppDistribution(configuration: ReportsTypesPppDistribution!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateRiskScoreByAssessment(configuration: ReportsTypesRiskScoreByAssessment!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateRiskScoreByGroup(configuration: ReportsTypesRiskScoreByGroup!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateRiskScoreByLocation(configuration: ReportsTypesRiskScoreByLocation!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateRiskScoreBySurvey(configuration: ReportsTypesRiskScoreBySurvey!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateRiskScoreByUser(configuration: ReportsTypesRiskScoreByUser!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateSecurityCoachActivityRtcAggregate(configuration: ReportsTypesSecurityCoachActivityRtcAggregate!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateSecurityCoachActivityRtcRaw(configuration: ReportsTypesSecurityCoachActivityRtcRaw!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateSecurityCoachDetectionRulesActivityAggregate(configuration: ReportsTypesSecurityCoachDetectionRulesActivityAggregate!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateSecurityCoachDetectionRulesActivityRaw(configuration: ReportsTypesSecurityCoachDetectionRulesActivityRaw!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateSurveyScoreByDimension(configuration: ReportsTypesSurveyScoreByDimension!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateSurveyScoreByDimensionOverTime(configuration: ReportsTypesSurveyScoreByDimensionOverTime!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingCampaignEnrollments(configuration: ReportsTypesTrainingCampaignEnrollments!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingCampaignSurveys(configuration: ReportsTypesTrainingCampaignSurveys!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingComparisonByPpp(configuration: ReportsTypesTrainingComparisonByPpp!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingComparisonByRiskScore(configuration: ReportsTypesTrainingComparisonByRiskScore!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingHours(configuration: ReportsTypesTrainingHours!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingInteractionsByGroup(configuration: ReportsTypesTrainingInteractionsByGroup!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingInteractionsByPurchasedCourse(configuration: ReportsTypesTrainingInteractionsByPurchasedCourse!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingNotStarted(configuration: ReportsTypesTrainingNotStarted!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingStatusByCampaign(configuration: ReportsTypesTrainingStatusByCampaign!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingStatusByCourse(configuration: ReportsTypesTrainingStatusByCourse!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingStatusByGroup(configuration: ReportsTypesTrainingStatusByGroup!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingStatusesByCampaign(configuration: ReportsTypesTrainingStatusesByCampaign!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingSurveysByCampaign(configuration: ReportsTypesTrainingSurveysByCampaign!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateTrainingSurveysByCourse(configuration: ReportsTypesTrainingSurveysByCourse!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateUnphishedUsers(configuration: ReportsTypesUnphishedUsers!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateUserCountByAssessment(configuration: ReportsTypesUserCountByAssessment!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateUserCountBySurvey(configuration: ReportsTypesUserCountBySurvey!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateUserCounts(configuration: ReportsTypesUserCounts!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateUserReportCard(configuration: ReportsTypesUserReportCard!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateUserSignIns(configuration: ReportsTypesUserSignIns!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Creates a report download"""
  downloadCreateUsersList(configuration: ReportsTypesUsersList!, fileType: DownloadFileTypes!, locale: String!): ReportsCreatePayload

  """Permanently delete downloads"""
  downloadDelete(downloadIds: [Int!]!): DownloadCenterDownloadDeletePayload

  """Retries a Report Download"""
  downloadReportRetry(id: Int!, locale: String!): DownloadCenterDownloadReportRetryPayload

  """Download a scheduled report upon request"""
  downloadSavedReport(id: Int!, fileType: DownloadFileTypes!): SavedReportsDownloadPayload

  """Marks downloads as viewed"""
  downloadViewed(ids: [Int!], isDownloaded: Boolean, all: Boolean): DownloadCenterDownloadViewedPayload

  """Creates an Email Alias for the user"""
  emailAliasCreate(userId: Int!, emailAlias: String!): EmailAliasesCreatePayload

  """Deletes an email alias"""
  emailAliasDelete(id: Int!): EmailAliasesDeletePayload

  """Deletes a template from an automation account"""
  emailTemplateDelete(id: Int!): EmailTemplateDeletePayload

  """Add the current account to the phishing-template-exclusions flag"""
  enablePhishingTemplateExclusions: LaunchDarklyEnablePhishingTemplateExclusionsPayload

  """Accept an enrollment url policy"""
  enrollmentAcceptUrlPolicy(id: Int!): EnrollmentAcceptUrlPolicyPayload

  """
  Creates an optional enrollment record for a given ModStore or CCM item UUID
  """
  enrollmentCreate(id: String!, language: String, storeItemSource: StoreItemSource = MODSTORE): EnrollmentCreatePayload

  """Starts an enrollment"""
  enrollmentStart(id: Int!, language: String, storeItemSource: StoreItemSource = MODSTORE): EnrollmentStartPayload

  """Update an enrollment"""
  enrollmentUpdate(trainingCampaignId: Int!, enrollmentIds: [Int!]!, action: EnrollmentUpdateActions!): EnrollmentUpdatePayload

  """Create a Executive Reports Dashboard"""
  execReportsDashboardCreate(name: String!, widgets: [ExecReportsDashboardWidget!]!, fontStyle: String, fontSize: String, fontColor: String, groupIds: [Int!], timeframe: ReportsTimeframe): ExecReportsDashboardCreatePayload

  """Create a Executive Reports Dashboard"""
  execReportsDashboardDelete(id: Int!): ExecReportsDashboardDeletePayload

  """Update a Executive Reports Dashboard"""
  execReportsDashboardUpdate(id: Int!, name: String!, widgets: [ExecReportsDashboardWidget!]!, fontStyle: String, fontSize: String, fontColor: String, groupIds: [Int!], timeframe: ReportsTimeframe): ExecReportsDashboardUpdatePayload

  """Creates a pdf download of the Executive Reports dashboard"""
  execReportsPdf(config: ExecReportsPdf!): ExecReportsPDFPayload

  """
  Deletes (dismisses) one or more feature_release_views for the current_user
  """
  featureReleaseViewDelete(ids: [Int!]!): FeatureReleaseViewDeletePayload

  """Force a new SCIM Sync"""
  forceSyncScim(id: Int): AccountSettingsUserProvisioningForceSyncScimPayload

  """Creates/Updates a free PRT campaign """
  freePrtCreate(name: String, senderName: String!, senderEmail: String!, emailTemplateUuid: String, recipients: [String!]!): FreeToolsPrtCreatePayload

  """Creates/Updates a free PST campaign """
  freePstCreate(name: String, emailTemplateUuid: String, landingPageUuid: String, recipients: [String!]!): FreeToolsPstCreatePayload

  """Creates/Updates a free QRT campaign """
  freeQrtCreate(name: String, emailTemplateUuid: String, landingPageUuid: String, recipients: [String!]!): FreeToolsQrtCreatePayload

  """Creates/Updates a free SPT campaign """
  freeSptCreate(name: String, emailTemplateUuid: String, landingPageUuid: String, recipients: [String!]!): FreeToolsSptCreatePayload

  """Launches a free tool campaign"""
  freeToolLaunch(toolType: FreeToolTypes!): FreeToolsFreeToolLaunchPayload

  """Creates a download for active rules report"""
  generateActiveRulesReport(search: String, from: ISO8601Date, vendor: String, rule: String): DownloadCenterCustomReportsActiveRulesReportPayload

  """Creates a download for the list of users PAB Activity"""
  generatePabUserActivity(search: String, userStatus: UserStatusFilters, activityStatus: UserHasOutlookAddinActivityTypes, activityType: OutlookAddinActivityActivityTypes): DownloadCenterCustomReportsPabUserActivityPayload

  """Creates a download for phishing security tests report"""
  generatePhishingSecurityTests(comparison: String, grouping: String, groups: [Int!], includeNonFailures: Boolean, psts: [Int!], timeframe: ReportsTimeframe!, includePhishFlipCampaigns: String): DownloadCenterCustomReportsPhishingSecurityTestsPayload

  """Creates a download for a training campaign's enrollments"""
  generateTrainingCampaignEnrollments(trainingCampaignId: Int!, assetId: Int, assetType: String, scope: EnrollmentScopes, search: String, includeArchived: Boolean): DownloadCenterCustomReportsTrainingCampaignEnrollmentsPayload

  """creates a download for a training campaign's surveys"""
  generateTrainingCampaignSurveys(trainingCampaignId: Int!): DownloadCenterCustomReportsTrainingCampaignSurveysPayload

  """Creates a download for the list of users"""
  generateUsersList(userStatus: UserStatusFilters!, userType: UserTypeFilters!, search: String, sortBy: UserSortFields!, sortDir: SortDirections!, filterNoGroups: Boolean!, groups: [Int!], groupStatus: GroupStatuses, singleGroup: Boolean): DownloadCenterCustomReportsUsersListPayload

  """Sends GPAB Emails to multiple users from CSV file"""
  gpabCsvEmail(phishalertSettingId: Int!, payload: File! = ""): GpabCsvEmailPayload

  """Sends GPAB Emails to multiple users from email address"""
  gpabQuickEmail(phishalertSettingId: Int!, emails: [String!]!): GpabQuickEmailPayload

  """Archive groups"""
  groupArchive(ids: [Int!]!, archive: Boolean!): GroupsArchivePayload

  """Archive users in a group"""
  groupArchiveUsers(id: Int!): GroupsArchiveUsersPayload

  """Bulk delete groups from a CSV file"""
  groupBulkDelete(file: File!, adminsToNotify: [Int!], notifyRequester: Boolean): GroupsBulkDeletePayload

  """Clone a group"""
  groupClone(id: Int!, name: String!, static: Boolean): GroupsClonePayload

  """Create a group"""
  groupCreate(attributes: GroupAttributes!): GroupsCreatePayload

  """Delete groups"""
  groupDelete(ids: [Int!]!): GroupsDeletePayload

  """Remove users from a group"""
  groupRemoveUsers(id: Int!): GroupsRemoveUsersPayload

  """Save Group Criterions"""
  groupSaveCriterions(groupId: Int!, criterions: [GroupCriterionAttributes!]!): GroupsSaveCriterionsPayload

  """Update a group"""
  groupUpdate(id: Int!, attributes: GroupAttributes!): GroupsUpdatePayload

  """Creates an IP Range for the account"""
  ipRangeCreate(attributes: IpRangeAttributes!): IpRangesCreatePayload

  """Deletes a IP Range for the account"""
  ipRangeDelete(ipRangeId: Int!): IpRangesDeletePayload

  """Purges an IP Range of failures"""
  ipRangePurge(ipRangeId: Int!, timePeriod: IpRangePurgeTimePeriods!): IpRangesPurgePayload

  """Updates a IP Range for the account"""
  ipRangeUpdate(ipRangeId: Int!, attributes: IpRangeAttributes!): IpRangesUpdatePayload

  """Creates a LandingDomain"""
  landingDomainCreate(attributes: LandingDomainAttributes!): LandingDomainsCreatePayload

  """Deletes a LandingDomain for the account"""
  landingDomainDelete(id: Int!): LandingDomainsDeletePayload

  """Archives/unarchives a LandingDomain"""
  landingDomainToggleArchived(id: Int!): LandingDomainsToggleArchivedPayload

  """Updates a LandingDomain"""
  landingDomainUpdate(id: Int!, attributes: LandingDomainAttributes!): LandingDomainsUpdatePayload

  """Creates a Landing Page Category in the current account"""
  landingPageCategoryCreate(attributes: LandingPageCategoryAttributes!): LandingPageCategoryCreatePayload

  """Deletes a Landing Page Category"""
  landingPageCategoryDelete(id: Int!): LandingPageCategoryDeletePayload

  """Updates a Landing Page Category in the current account"""
  landingPageCategoryUpdate(id: Int!, attributes: LandingPageCategoryAttributes!): LandingPageCategoryUpdatePayload

  """Creates a Landing Page in the current context"""
  landingPageCreate(attributes: LandingPageAttributes!): LandingPageCreatePayload

  """Imports multiple templates based on a json format"""
  landingPageImport(payload: String!): LandingPageImportPayload

  """Creates a Landing Page in the current context"""
  landingPageUpdate(id: Int!, attributes: LandingPageAttributes!): LandingPageUpdatePayload

  """Commit LMS data to a learner's enrollment"""
  lmsCommit(enrollmentId: Int!, processedAt: ISO8601DateTime!, payload: String!, sessionId: String!): LmsCommitPayload

  """Initialize a learner's enrollment"""
  lmsInit(enrollmentId: Int!): LmsInitPayload

  """Commit LMS data to a learner's enrollment & terminate session"""
  lmsTerminate(enrollmentId: Int!, processedAt: ISO8601DateTime!, payload: String!, sessionId: String!): LmsTerminatePayload

  """Creates a ManagedPhishingCampaign for the current_partner_admin"""
  managedPhishingCampaignCreate(attributes: ManagedPhishingCampaignAttributes!): ManagedPhishingCampaignsCreatePayload

  """Deactivate/Activate a ManagedPhishingCampaign"""
  managedPhishingCampaignDeactivate(id: Int!, deactivate: Boolean!): ManagedPhishingCampaignsDeactivatePayload

  """Delete a ManagedPhishingCampaign"""
  managedPhishingCampaignDelete(id: Int!): ManagedPhishingCampaignsDeletePayload

  """Hide/Show a ManagedPhishingCampaign from reports"""
  managedPhishingCampaignHideFromReports(id: Int!, hide: Boolean!): ManagedPhishingCampaignsHideFromReportsPayload

  """Update a ManagedPhishingCampaign for the current_partner_admin"""
  managedPhishingCampaignUpdate(id: Int!, attributes: ManagedPhishingCampaignAttributes!): ManagedPhishingCampaignsUpdatePayload

  """Add a single piece of content to multiple accounts underneath partner"""
  managedStorePurchaseAddToChildrensLibraries(managedStorePurchaseId: Int!, accountIds: [Int!]!): ManagedStorePurchasesAddToChildrensLibrariesPayload

  """Creates a ManagedStorePurchases for the partner"""
  managedStorePurchaseCreate(uuid: String!): ManagedStorePurchasesCreatePayload

  """Remove managed store purchase from the current partner"""
  managedStorePurchaseRemove(id: Int!): ManagedStorePurchasesRemovePayload

  """Update managed store purchase from the current partner"""
  managedStorePurchaseUpdate(id: Int!, attributes: ManagedStorePurchaseAttributes): ManagedStorePurchasesUpdatePayload

  """Close a ManagedTrainingCampaign"""
  managedTrainingCampaignClose(id: Int!): ManagedTrainingCampaignsClosePayload

  """Creates a ManagedTrainingCampaign for the current_partner_admin"""
  managedTrainingCampaignCreate(attributes: ManagedTrainingCampaignAttributes!, endCampaignOption: TrainingCampaignEnd!): ManagedTrainingCampaignsCreatePayload

  """Delete a ManagedTrainingCampaign"""
  managedTrainingCampaignDelete(id: Int!): ManagedTrainingCampaignsDeletePayload

  """Update a ManagedTrainingCampaign for the current partner"""
  managedTrainingCampaignUpdate(id: Int!, attributes: ManagedTrainingCampaignAttributes!, endCampaignOption: TrainingCampaignEnd!): ManagedTrainingCampaignsUpdatePayload

  """Creates a learner messaging campaign"""
  messageCampaignCreate(attributes: MessagesAttributes!): MessagesCreateCampaignPayload

  """Updates a learner messaging campaign"""
  messageCampaignUpdate(id: Int!, attributes: MessagesAttributes!): MessagesUpdateCampaignPayload

  """Creates a Notification"""
  notificationCreate(attributes: NotificationAttributes!, campaignId: Int!): NotificationCreatePayload

  """Creates a Notification Template Category in the current account"""
  notificationTemplateCategoryCreate(attributes: NotificationTemplateCategoryAttributes!): NotificationTemplatesCategoryCreatePayload

  """Delete a Notification Template Category"""
  notificationTemplateCategoryDelete(id: Int!): NotificationTemplatesCategoryDeletePayload

  """Hides a notification template category from an account"""
  notificationTemplateCategoryHide(id: Int!, hide: Boolean!): NotificationTemplatesCategoryHidePayload
  notificationTemplateCategoryUpdate(id: Int!, attributes: NotificationTemplateCategoryAttributes!): NotificationTemplatesCategoryUpdatePayload

  """Creates a Notification Template in the current account"""
  notificationTemplateCreate(attributes: NotificationTemplateAttributes!): NotificationTemplatesCreatePayload

  """Hides a notification template from an account"""
  notificationTemplateHide(id: Int!, hide: Boolean!): NotificationTemplatesHidePayload

  """Imports multiple notification templates based on a json format"""
  notificationTemplateImport(payload: String!, type: NotificationTemplateTypes!): NotificationTemplatesImportPayload

  """Updates a notification template"""
  notificationTemplateUpdate(id: Int!, attributes: NotificationTemplateAttributes!): NotificationTemplatesUpdatePayload

  """Creates a Partner Admin for the current partner (or partner under SA)"""
  partnerAdminCreate(partnerId: Int, attributes: PartnerAdminAttributes!): PartnerAdminsCreatePayload

  """Deactivate/Activate MFA on Partner Admin"""
  partnerAdminDeactivateMfa(id: Int!, deactivate: Boolean!): PartnerAdminsDeactivateMfaPayload

  """Delete a Partner Admin"""
  partnerAdminDelete(id: Int!): PartnerAdminsDeletePayload

  """Disables MFA on the partner (if valid)"""
  partnerAdminDisableMfa(partnerId: Int, password: String): PartnerAdminsDisableMfaPayload

  """Enables MFA on the partner (if valid)"""
  partnerAdminEnableMfa(partnerId: Int, otp: String!): PartnerAdminsEnableMfaPayload

  """Update a Partner Admin for the current partner"""
  partnerAdminUpdate(id: Int!, attributes: PartnerAdminAttributes!): PartnerAdminsUpdatePayload

  """Update the current PartnerAdmin"""
  partnerAdminUpdateSelf(attributes: PartnerAdminAttributes!): PartnerAdminsUpdateSelfPayload

  """Creates a Main Partner"""
  partnerCreate(attributes: PartnerAttributes!): PartnersCreatePayload

  """Delete a Partner"""
  partnerDelete(id: Int!): PartnersDeletePayload
  partnerDeleteLogo(partnerId: Int!): PartnersDeleteLogoPayload
  partnerSalesforceDisconnect(sfid: String!): PartnersSalesforceDisconnectPayload

  """Get Salesforce data for partner"""
  partnerSalesforceFetch(id: Int, sfid: String, useParentsSfid: Boolean): PartnersSalesforceFetchPayload

  """Schedule Salesforce data fetch for partners child accounts"""
  partnerSalesforceScheduleAccountsFetch(id: Int!, sfid: String, useParentsSfid: Boolean, timestamp: ISO8601DateTime!): PartnersSalesforceScheduleAccountsFetchPayload

  """Update a Partner"""
  partnerUpdate(id: Int!, attributes: PartnerAttributes!): PartnersUpdatePayload

  """
  Update the Partners "Account"
  """
  partnerUpdateAccount(attributes: PartnerAttributes!): PartnersUpdateAccountPayload

  """Queues up a Password IQ CSV download"""
  passwordIqCsv(detection: [DetectionTypes!]!, userType: PiqUserTypes, sort: UserStatesSort, search: String): PasswordIqCsvPayload

  """Create a PIQ Dashboard"""
  passwordIqDashboardCreate(name: String!, widgets: [PasswordIqDashboardWidget!]!): PasswordIqDashboardCreatePayload

  """Create a PIQ Dashboard"""
  passwordIqDashboardDelete(id: Int!): PasswordIqDashboardDeletePayload

  """Update a PIQ Dashboard"""
  passwordIqDashboardUpdate(id: Int!, name: String!, widgets: [PasswordIqDashboardWidget!]!): PasswordIqDashboardUpdatePayload

  """Creates a pdf download of the PIQ dashboard"""
  passwordIqPdf(config: PiqPdf!): PasswordIqPDFPayload

  """Updates a Password IQ Event."""
  passwordIqScanNow: PasswordIqScanNowPayload

  """Updates a Password IQ Schedule."""
  passwordIqScheduleUpdate(attributes: PiqScheduleAttributes!): PasswordIqScheduleUpdatePayload

  """Updates a Password IQ Event."""
  passwordIqUpdateEvent(id: Int!, status: EventStatuses!, note: String!): PasswordIqUpdateEventPayload

  """Creates a PhishDomain"""
  phishDomainCreate(attributes: PhishDomainAttributes!): PhishDomainsCreatePayload

  """Creates a PhishDomain for the account"""
  phishDomainCreateCustom(subdomain: String!, phishDomainId: Int!): PhishDomainsCreateCustomPayload

  """Deletes a PhishDomain for the account"""
  phishDomainDelete(phishDomainId: Int!): PhishDomainsDeletePayload

  """Archives/unarchives a PhishDomain"""
  phishDomainToggleArchived(id: Int!): PhishDomainsToggleArchivedPayload

  """
  Add/remove a system PhishDomain to/from the override list for the current_account
  """
  phishDomainToggleOverride(phishDomainId: Int!): PhishDomainsToggleOverridePayload

  """Updates a PhishDomain"""
  phishDomainUpdate(id: Int!, attributes: PhishDomainAttributes!): PhishDomainsUpdatePayload

  """Creates a Phishing Campaign in the current account"""
  phishingCampaignCreate(campaignType: PhishingCampaignTypes, attributes: PhishingCampaignAttributes!): PhishingCampaignCreatePayload

  """Deactivate/Activate a Phishing Campaign"""
  phishingCampaignDeactivate(id: Int!, deactivate: Boolean!): PhishingCampaignDeactivatePayload

  """Delete a Phishing Campaign"""
  phishingCampaignDelete(id: Int!): PhishingCampaignDeletePayload

  """Edit a Phishing Campaign in the current account"""
  phishingCampaignEdit(id: Int!, attributes: PhishingCampaignAttributes!): PhishingCampaignEditPayload

  """Hide/Show a Phishing Campaign from reports"""
  phishingCampaignHideFromReports(id: Int!, hide: Boolean!): PhishingCampaignHideFromReportsPayload

  """Deletes the content associated with a reply event"""
  phishingCampaignRecipientRemoveReply(id: Int!): PhishingCampaignRecipientRemoveReplyPayload

  """Update a Campaign Recipient"""
  phishingCampaignRecipientUpdate(id: Int!, attributes: PhishingCampaignRecipientAttributes!): PhishingCampaignRecipientUpdatePayload

  """Bulk change a collection of campaign_recipients"""
  phishingCampaignRunBulkChange(phishingCampaignRunId: Int!, file: File!, adminsToNotify: [Int!], notifyRequester: Boolean): PhishingCampaignRunsBulkChangePayload

  """Bulk change a collection of campaign_recipients"""
  phishingCampaignRunBulkRemoveFailures(phishingCampaignRunId: Int!, file: File!, adminsToNotify: [Int!], notifyRequester: Boolean): PhishingCampaignRunsBulkChangePayload

  """Deletes a Landing Page Category"""
  phishingCampaignRunDelete(campaignId: Int!, runId: Int!): PhishingCampaignRunDeletePayload

  """Stop a campaign run"""
  phishingCampaignRunStop(campaignId: Int!, runId: Int!): PhishingCampaignRunStopPayload

  """Creates a Template Category in the current account"""
  phishingTemplateCategoryCreate(attributes: PhishingTemplateCategoryAttributes!): PhishingTemplateCategoryCreatePayload

  """Delete a Template Category"""
  phishingTemplateCategoryDelete(id: Int!): PhishingTemplateCategoryDeletePayload

  """Hides a template category from an account"""
  phishingTemplateCategoryHide(id: Int!, hide: Boolean!): PhishingTemplateCategoryHidePayload
  phishingTemplateCategoryUpdate(id: Int!, attributes: PhishingTemplateCategoryAttributes!): PhishingTemplateCategoryUpdatePayload

  """Creates a Phishing Template in the current account"""
  phishingTemplateCreate(type: PhishingTemplateTypes!, attributes: PhishingTemplateAttributes!): PhishingTemplateCreatePayload

  """Hides a template from an account"""
  phishingTemplateHide(id: Int!, hide: Boolean!): PhishingTemplateHidePayload

  """Imports multiple templates based on a json format"""
  phishingTemplateImport(payload: String!, type: PhishingTemplateTypes!): PhishingTemplateImportPayload

  """Creates a Template in the current account"""
  phishingTemplateUpdate(id: Int!, attributes: PhishingTemplateAttributes!): PhishingTemplateUpdatePayload

  """Copies a set of Phishing Templates into the current account"""
  phishingTemplatesCopy(uuids: [String!]!): PhishingTemplatesCopyPayload

  """Creates a Physical QR Campaign"""
  physicalQrCampaignCreate(attributes: PhysicalQrCampaignAttributes!): PhysicalQrCampaignsCreatePayload

  """Deletes a Physical QR Campaign"""
  physicalQrCampaignDelete(id: Int!): PhysicalQrCampaignsDeletePayload

  """Finishes a Physical QR Campaign"""
  physicalQrCampaignEndCampaign(id: Int!): PhysicalQrCampaignsEndCampaignPayload

  """Creates a Physical QR Campaign Location"""
  physicalQrCampaignLocationCreate(physicalQrCampaignId: Int!, attributes: PhysicalQrCampaignLocationAttributes!): PhysicalQrCampaignLocationsCreatePayload

  """Deletes a Physical QR Campaign Location"""
  physicalQrCampaignLocationDelete(physicalQrCampaignId: Int!, id: Int!): PhysicalQrCampaignLocationsDeletePayload

  """Updates a Physical QR Campaign Location"""
  physicalQrCampaignLocationUpdate(physicalQrCampaignId: Int!, id: Int!, attributes: PhysicalQrCampaignLocationAttributes!): PhysicalQrCampaignLocationsUpdatePayload

  """(Re)Starts a Physical QR Campaign"""
  physicalQrCampaignStartCampaign(id: Int!): PhysicalQrCampaignsStartCampaignPayload

  """Updates a Physical QR Campaign"""
  physicalQrCampaignUpdate(id: Int!, attributes: PhysicalQrCampaignAttributes!): PhysicalQrCampaignsUpdatePayload

  """Creates a user Physical QR Template"""
  physicalQrTemplateCreate(attributes: PhysicalQrTemplateAttributes!): PhysicalQrTemplatesCreatePayload

  """Updates a Physical QR Template"""
  physicalQrTemplateUpdate(id: Int!, attributes: PhysicalQrTemplateAttributes!): PhysicalQrTemplatesUpdatePayload

  """Copies a set of Phishing Templates into the current account"""
  physicalQrTemplatesCopy(uuids: [String!]!): PhysicalQrTemplatesCopyPayload

  """Accepts the policy for the current user"""
  policyAccept(enrollmentId: Int!): PoliciesAcceptPayload

  """Creates a Policy"""
  policyCreate(attributes: PolicyAttributes!): PoliciesCreatePayload

  """(Soft)Deletes a Policy"""
  policyDelete(id: Int!): PoliciesDeletePayload

  """Updates a Policy"""
  policyUpdate(id: Int!, attributes: PolicyAttributes!): PoliciesUpdatePayload

  """
  Updates the acknowledged pages for a policy enrollment for the current user
  """
  policyUpdateAcceptedPages(enrollmentId: Int!, pages: [Int!]!): PoliciesUpdateAcceptedPagesPayload

  """
  Updates the policy_asset_id for a policy enrollment for the current user
  """
  policyUpdateAssetId(enrollmentId: Int!, assetId: Int!): PoliciesUpdateAssetIdPayload

  """Updates the pages viewed for a policy enrollment for the current user"""
  policyUpdatePagesViewed(enrollmentId: Int!, pages: [Int!]!): PoliciesUpdatePagesViewedPayload

  """
  Updates the total time for an enrollment for a policy for the current user
  """
  policyUpdateTotalTime(enrollmentId: Int!, time: Int!): PoliciesUpdateTotalTimePayload

  """Purge the SCIM V2 DB for an account"""
  purgeScimV2(accountId: Int, type: ScimPurgeTypes!): AccountSettingsUserProvisioningPurgeScimV2Payload

  """Generate a new SCIM Token"""
  regenerateScimToken(id: Int): AccountSettingsUserProvisioningRegenerateScimTokenPayload

  """Creates a saved report category"""
  reportCategoryCreate(name: String!): SavedReportsCategoriesCreatePayload

  """Deletes a saved report category"""
  reportCategoryDelete(id: Int!): SavedReportsCategoriesDeletePayload

  """Reorders Saved Report Categories for the current account"""
  reportCategoryReorder(ids: [Int!]!): SavedReportsCategoriesReorderPayload

  """Updates a saved report category"""
  reportCategoryUpdate(id: Int!, name: String!): SavedReportsCategoriesUpdatePayload

  """Clones a saved report"""
  reportClone(id: Int!, name: String!, categoryId: Int): SavedReportsClonePayload

  """Deletes saved reports"""
  reportDelete(ids: [Int!]!): SavedReportsDeletePayload

  """Moves saved reports to a different category"""
  reportMove(ids: [Int!]!, categoryId: Int): SavedReportsMovePayload

  """Creates/updates a saved report"""
  reportSaveAccountReportCard(configuration: ReportsTypesAccountReportCard, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveActiveRulesReport(configuration: ReportsTypesActiveRulesReport, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveAssessmentScoreByKnowledgeArea(configuration: ReportsTypesAssessmentScoreByKnowledgeArea, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveAssessmentScoreByKnowledgeAreaOverTime(configuration: ReportsTypesAssessmentScoreByKnowledgeAreaOverTime, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveEmailsSentByGroup(configuration: ReportsTypesEmailsSentByGroup, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveEmailsSentByTemplate(configuration: ReportsTypesEmailsSentByTemplate, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveFailureTypeUserCounts(configuration: ReportsTypesFailureTypeUserCounts, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveFailureTypesBarChart(configuration: ReportsTypesFailureTypesBarChart, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveFailuresByPhishingTemplate(configuration: ReportsTypesFailuresByPhishingTemplate, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveGlobalPhishingAggregate(configuration: ReportsTypesGlobalPhishingAggregate, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveGlobalPhishingRaw(configuration: ReportsTypesGlobalPhishingRaw, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveGlobalTrainingAggregate(configuration: ReportsTypesGlobalTrainingAggregate, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveGlobalTrainingRaw(configuration: ReportsTypesGlobalTrainingRaw, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveGroupReportCard(configuration: ReportsTypesGroupReportCard, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveIncompleteTraining(configuration: ReportsTypesIncompleteTraining, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveInitialPpp(configuration: ReportsTypesInitialPpp, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveLearnerPlatformRaw(configuration: ReportsTypesLearnerPlatformRaw, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveNoTrainingAssigned(configuration: ReportsTypesNoTrainingAssigned, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveOverallPppByAccount(configuration: ReportsTypesOverallPppByAccount, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveOverallPppByCampaign(configuration: ReportsTypesOverallPppByCampaign, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveOverallPppByGroup(configuration: ReportsTypesOverallPppByGroup, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveOverallPppByTrainingTime(configuration: ReportsTypesOverallPppByTrainingTime, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSavePabUserActivity(configuration: ReportsTypesPabUserActivity, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSavePhishFailurePercentageByCampaigns(configuration: ReportsTypesPhishFailurePercentageByCampaigns, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSavePhishFailurePercentageOverall(configuration: ReportsTypesPhishFailurePercentageOverall, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSavePhishingSecurityTests(configuration: ReportsTypesPhishingSecurityTests, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSavePppDistribution(configuration: ReportsTypesPppDistribution, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveRiskScoreByAssessment(configuration: ReportsTypesRiskScoreByAssessment, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveRiskScoreByGroup(configuration: ReportsTypesRiskScoreByGroup, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveRiskScoreByLocation(configuration: ReportsTypesRiskScoreByLocation, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveRiskScoreBySurvey(configuration: ReportsTypesRiskScoreBySurvey, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveRiskScoreByUser(configuration: ReportsTypesRiskScoreByUser, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveSecurityCoachActivityRtcAggregate(configuration: ReportsTypesSecurityCoachActivityRtcAggregate, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveSecurityCoachActivityRtcRaw(configuration: ReportsTypesSecurityCoachActivityRtcRaw, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveSecurityCoachDetectionRulesActivityAggregate(configuration: ReportsTypesSecurityCoachDetectionRulesActivityAggregate, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveSecurityCoachDetectionRulesActivityRaw(configuration: ReportsTypesSecurityCoachDetectionRulesActivityRaw, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveSurveyScoreByDimension(configuration: ReportsTypesSurveyScoreByDimension, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveSurveyScoreByDimensionOverTime(configuration: ReportsTypesSurveyScoreByDimensionOverTime, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingCampaignEnrollments(configuration: ReportsTypesTrainingCampaignEnrollments, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingCampaignSurveys(configuration: ReportsTypesTrainingCampaignSurveys, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingComparisonByPpp(configuration: ReportsTypesTrainingComparisonByPpp, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingComparisonByRiskScore(configuration: ReportsTypesTrainingComparisonByRiskScore, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingHours(configuration: ReportsTypesTrainingHours, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingInteractionsByGroup(configuration: ReportsTypesTrainingInteractionsByGroup, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingInteractionsByPurchasedCourse(configuration: ReportsTypesTrainingInteractionsByPurchasedCourse, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingNotStarted(configuration: ReportsTypesTrainingNotStarted, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingStatusByCampaign(configuration: ReportsTypesTrainingStatusByCampaign, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingStatusByCourse(configuration: ReportsTypesTrainingStatusByCourse, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingStatusByGroup(configuration: ReportsTypesTrainingStatusByGroup, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingStatusesByCampaign(configuration: ReportsTypesTrainingStatusesByCampaign, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingSurveysByCampaign(configuration: ReportsTypesTrainingSurveysByCampaign, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveTrainingSurveysByCourse(configuration: ReportsTypesTrainingSurveysByCourse, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveUnphishedUsers(configuration: ReportsTypesUnphishedUsers, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveUserCountByAssessment(configuration: ReportsTypesUserCountByAssessment, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveUserCountBySurvey(configuration: ReportsTypesUserCountBySurvey, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveUserCounts(configuration: ReportsTypesUserCounts, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveUserReportCard(configuration: ReportsTypesUserReportCard, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveUserSignIns(configuration: ReportsTypesUserSignIns, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates/updates a saved report"""
  reportSaveUsersList(configuration: ReportsTypesUsersList, name: String, categoryId: Int, id: Int): SavedReportsSavePayload

  """Creates a RestrictedDomain"""
  restrictedDomainCreate(tld: Boolean, attributes: RestrictedDomainAttributes!): RestrictedDomainsCreatePayload

  """Deletes a RestrictedDomain"""
  restrictedDomainDelete(id: Int!): RestrictedDomainsDeletePayload

  """Updates a RestrictedDomain"""
  restrictedDomainUpdate(id: Int!, attributes: RestrictedDomainAttributes!): RestrictedDomainsUpdatePayload

  """Revoke the SCIM Token"""
  revokeScimToken(id: Int): AccountSettingsUserProvisioningRevokeScimTokenPayload

  """Deactivates scheduled reports"""
  scheduledReportDeactivate(id: Int!): ScheduledReportsDeactivatePayload

  """Deletes scheduled reports"""
  scheduledReportDelete(id: Int!): ScheduledReportsDeletePayload

  """Creates/Updates a scheduled report"""
  scheduledReportSave(id: Int, attributes: ScheduledReportAttributes!, schedulableType: Schedulable!, schedulableName: String): ScheduledReportsSavePayload

  """Send a scheduled report upon request"""
  scheduledReportSend(id: Int!): ScheduledReportsSendPayload

  """Adds domains to one of Orions lists"""
  secondChanceAddToOrionList(domainNames: [String!]!, listType: String!): SecondChanceAddToOrionListPayload

  """Deletes domains from SC"""
  secondChanceBulkDeleteDomains(domainIds: [Int!]!): SecondChanceBulkDeleteDomainsPayload

  """Imports domain(s) to SC"""
  secondChanceImportDomains(singleDomain: Boolean!, name: String, file: File, overwrite: Boolean): SecondChanceImportDomainsPayload

  """Updates the settings for SC"""
  secondChanceUpdateSettings(attributes: SecondChanceSettingsAttributes!): SecondChanceUpdateSettingsPayload

  """Approve an alias recommendation"""
  securityCoachApproveUserMappingRecommendation(selectedTransits: [Int!]!): SecurityCoachApproveUserMappingRecommendationPayload

  """Create a RTC campaign"""
  securityCoachCampaignsCreate(attributes: RtcCampaignAttributes!): SecurityCoachCampaignsCreatePayload

  """Set the status of a RTC campaign"""
  securityCoachCampaignsDelete(id: Int!): SecurityCoachCampaignsDeletePayload

  """Update a RTC Campaign"""
  securityCoachCampaignsEdit(id: Int!, attributes: RtcCampaignAttributes!): SecurityCoachCampaignsUpdatePayload

  """Set the status of a RTC campaign"""
  securityCoachCampaignsSetStatus(id: Int!, status: CampaignStatuses!): SecurityCoachCampaignsSetStatusPayload

  """Updates a teachable moment workflow rule"""
  securityCoachCloneSystemTmr(systemTms: [String!]!, customTms: [String!]): SecurityCoachOrchestrationCloneTmrPayload

  """Creates a Mapping Job for Unmapped Events"""
  securityCoachCreateRemapJobForUnmappedEvents(vendorId: Int!, startDate: String!, endDate: String!): SecurityCoachAnalyticsCreateRemapJobForUnmappedEventsPayload

  """creates a teachable moment workflow rule"""
  securityCoachCreateTeachableMomentRule(name: String!, description: String!, count: Int, lookbackDays: Int, aggregate: Boolean!, vendorCodeName: String!, criteria: TeachableMomentCriteriaPayload!, systemWorkflowId: String, status: String!, runType: String!, cronScheduleUtc: String, categories: [String!]!): SecurityCoachOrchestrationCreateTeachableMomentRulePayload

  """
  Clones a SecurityCoach custom notification and its custom translations in the current account
  """
  securityCoachCustomNotificationsClone(id: Int!): SecurityCoachCustomNotificationsClonePayload

  """Creates a SecurityCoach custom notification in the current account"""
  securityCoachCustomNotificationsCreate(attributes: CustomNotificationFormAttributes!): SecurityCoachCustomNotificationsCreatePayload

  """Deletes a SecurityCoach custom notification in the current account"""
  securityCoachCustomNotificationsDelete(id: Int!): SecurityCoachCustomNotificationsDeletePayload

  """Updates a SecurityCoach custom notification in the current account"""
  securityCoachCustomNotificationsUpdate(id: Int!, attributes: CustomNotificationFormAttributes!): SecurityCoachCustomNotificationsUpdatePayload

  """
  Creates a SecurityCoach custom translation in the current account for the given custom notification ID
  """
  securityCoachCustomTranslationsCreate(customNotificationId: Int!, attributes: CustomTranslationFormAttributes!): SecurityCoachCustomTranslationsCreatePayload

  """Deletes a SecurityCoach custom translation in the current account"""
  securityCoachCustomTranslationsDelete(id: Int!): SecurityCoachCustomTranslationsDeletePayload

  """Updates a SecurityCoach custom translation in the current account"""
  securityCoachCustomTranslationsUpdate(id: Int!, attributes: CustomTranslationFormAttributes!): SecurityCoachCustomTranslationsUpdatePayload

  """Deletes a teachable moment workflow rule"""
  securityCoachDeleteTeachableMomentRule(ruleId: String!): SecurityCoachOrchestrationDeleteTeachableMomentRulePayload

  """Send a Slack Message"""
  securityCoachDeliverSlackMessage(email: String!, workspace: String!): SecurityCoachDeliverySlackSendSampleMessagePayload

  """Send a Teams Message"""
  securityCoachDeliverTeamsMessage(email: String!, workspace: String!): SecurityCoachDeliveryTeamsSendSampleMessagePayload

  """Delivery Preview for Real Time Coaching Campaigns"""
  securityCoachDeliveryPreview(email: String!, contentId: String!, notificationId: String!, notificationType: NotificationTypes!, deliveryMethod: DeliveryMethods, fallbackEmail: Boolean!, locale: String, useGif: Boolean!): SecurityCoachDeliveryPreviewPayload

  """Deletes a slack workspace"""
  securityCoachDeliverySlackWorkspacesDelete(workspace: String!): SecurityCoachDeliverySlackWorkspacesDeletePayload

  """Delivery registration with Teams"""
  securityCoachDeliveryTeamsCallback(accessToken: String!): SecurityCoachDeliveryTeamsCallbackPayload

  """Delivery unregistration with Teams"""
  securityCoachDeliveryTeamsDelete: SecurityCoachDeliveryTeamsDeletePayload

  """edits a teachable moment workflow rule"""
  securityCoachEditTeachableMomentRule(ruleId: String!, name: String!, description: String!, count: Int, lookbackDays: Int, aggregate: Boolean!, vendorCodeName: String!, criteria: TeachableMomentCriteriaPayload!, status: String!, runType: String!, cronScheduleUtc: String, categories: [String!]!): SecurityCoachOrchestrationEditTeachableMomentRulePayload

  """Validate user mapping data"""
  securityCoachEditUserMapping(userId: Int!, hostnames: [String!]!, usernames: [String!]!, aliases: [JSON!]): SecurityCoachEditUserMappingPayload

  """Updates the status a teachable moment workflow rule"""
  securityCoachEnableTeachableMomentRule(workflowId: String!, enabled: Boolean): SecurityCoachOrchestrationEnableTeachableMomentRulePayload

  """Create a custom security coach rule"""
  securityCoachMappingRuleCreate(vendorKey: ID!, verb: RuleVerb!, selectedVerbs: [String!]!, selectedDelimiters: [Delimiters!]!): SecurityCoachRulesCreatePayload

  """Deletes a security coach rule"""
  securityCoachMappingRuleDelete(id: ID!): SecurityCoachRulesDeletePayload

  """Toggles a security coach rule to active/inactive"""
  securityCoachMappingRuleToggle(id: ID!, ruleType: MappingRuleTypes!): SecurityCoachRulesTogglePayload

  """Turn on SecurityCoach limited preview for an account"""
  securityCoachPreview: SecurityCoachPreviewPayload

  """Request a quote for securityCoach"""
  securityCoachQuote: SecurityCoachQuotePayload

  """Reject alias recommendations"""
  securityCoachRejectUserMappingRecommendation(selectedTransits: [Int!]!): SecurityCoachRejectUserMappingRecommendationPayload

  """Reset a Security Coach preview"""
  securityCoachResetPreview(accountId: Int!): SecurityCoachResetPreviewPayload

  """Toggle Engine Status"""
  securityCoachToggleEngineStatus(ruleEngine: Engines!): SecurityCoachToggleEngineStatusPayload

  """Upload User Mapping CSV for Security Coach"""
  securityCoachUserMappingCsvUpload(file: File!): SecurityCoachUserMappingCsvUploadPayload

  """Setup Bitdefender integration"""
  securityCoachVendorsBitdefenderConnect(accessUrl: String!, apiKey: String!): SecurityCoachVendorsBitdefenderConnectPayload

  """Setup Carbon Black integration"""
  securityCoachVendorsCarbonBlackConnect(apiDomain: String!, apiId: String!, apiKey: String!, orgKey: String!): SecurityCoachVendorsCarbonBlackConnectPayload

  """Setup Cisco integration"""
  securityCoachVendorsCiscoConnect(username: String!, password: String!, domainName: String!): SecurityCoachVendorsCiscoConnectPayload

  """Setup Cisco Umbrella integration"""
  securityCoachVendorsCiscoUmbrellaConnect(clientId: String!, clientSecret: String!): SecurityCoachVendorsCiscoUmbrellaConnectPayload

  """Update Cisco Umbrella integration"""
  securityCoachVendorsCiscoUmbrellaUpdate(id: Int!, clientId: String!, clientSecret: String!): SecurityCoachVendorsCiscoUmbrellaUpdatePayload

  """Setup Cloudflare Zero Trust integration"""
  securityCoachVendorsCloudflareZeroTrustConnect(accountId: String!, apiToken: String!): SecurityCoachVendorsCloudflareZeroTrustConnectPayload

  """Setup Cloudflare Area 1 integration"""
  securityCoachVendorsCloudflarearea1Connect(pubKey: String, privKey: String, streaming: Boolean!): SecurityCoachVendorsCloudflareArea1ConnectPayload

  """Setup Code42 integration"""
  securityCoachVendorsCodeFourTwoConnect(apiDomain: String!, clientId: String!, clientSecret: String!): SecurityCoachVendorsCodeFourTwoConnectPayload

  """Setup Crowdstrike integration"""
  securityCoachVendorsCrowdstrikeConnect(clientId: String!, clientSecret: String!, endpoint: String!): SecurityCoachVendorsCrowdstrikeConnectPayload

  """Setup Cylance integration"""
  securityCoachVendorsCylanceConnect: SecurityCoachVendorsCylanceConnectPayload

  """Delete a vendor integration"""
  securityCoachVendorsDelete(registrationId: Int!): SecurityCoachVendorsDeletePayload

  """Setup Google integration"""
  securityCoachVendorsGoogleConnect(adminEmail: String!, jsonFile: String!, endpoint: String!, vendor: String!): SecurityCoachVendorsGoogleConnectPayload

  """Setup Malwarebytes integration"""
  securityCoachVendorsMalwarebytesConnect(cid: String!, clientId: String!, clientSecret: String!): SecurityCoachVendorsMalwarebytesConnectPayload

  """Setup Microsoft integration"""
  securityCoachVendorsMicrosoftConnect(clientId: String!, clientSecret: String!, tenant: String!, tokenExpiry: String!, vendor: String!): SecurityCoachVendorsMicrosoftConnectPayload

  """Setup Netskope integration"""
  securityCoachVendorsNetskopeConnect(clientId: String!, clientSecret: String!): SecurityCoachVendorsNetskopeConnectPayload

  """Update Netscope integration"""
  securityCoachVendorsNetskopeUpdate(id: Int!, clientId: String!, clientSecret: String!): SecurityCoachVendorsNetskopeUpdatePayload

  """Setup Okta integration"""
  securityCoachVendorsOktaConnect(clientSecret: String!, apiDomain: String!, endpoint: String!): SecurityCoachVendorsOktaConnectPayload

  """Setup Palo Alto integration"""
  securityCoachVendorsPaloaltoConnect: SecurityCoachVendorsPaloaltoConnectPayload

  """Setup Proofpoint integration"""
  securityCoachVendorsProofpointConnect(clientId: String!, clientSecret: String!): SecurityCoachVendorsProofpointConnectPayload

  """Setup SentinelOne integration"""
  securityCoachVendorsSentineloneConnect(apiDomain: String!, clientSecret: String!): SecurityCoachVendorsSentinelOneConnectPayload

  """Setup Sonicwall integration"""
  securityCoachVendorsSonicwallConnect(username: String!, password: String!, url: String!, apiKey: String!): SecurityCoachVendorsSonicwallConnectPayload

  """Setup Sophos integration"""
  securityCoachVendorsSophosConnect(clientSecret: String!, tokenExpiry: String!): SecurityCoachVendorsSophosConnectPayload

  """Setup Zscaler integration"""
  securityCoachVendorsZscalerConnect(streamingType: String): SecurityCoachVendorsZscalerConnectPayload

  """Create Security Role"""
  securityRoleCreate(attributes: SecurityRoleAttributes!): SecurityRolesCreatePayload

  """Deletes a security role (access profile)"""
  securityRoleDelete(id: Int!): SecurityRolesDeletePayload

  """Update Security Role"""
  securityRoleUpdate(id: Int!, attributes: SecurityRoleAttributes!): SecurityRolesUpdatePayload

  """Updates a message campaigns active status"""
  setCampaignActiveState(id: Int!, active: Boolean!): MessagesSetCampaignActiveStatePayload

  """Updates a message run archived status"""
  setRunArchiveState(id: Int!, archived: Boolean!): MessagesSetRunArchiveStatePayload

  """
  Sign in as the main admin of an account belonging to the current_partner_admin
  """
  signInAsAccount(id: Int!): SignInAsAccountPayload

  """
  Sign in as an admin of an account belonging to the current_partner_admins partner
  """
  signInAsAdmin(id: Int!): SignInAsAdminPayload

  """
  Sign in as a partner_admin of a partner underneath the current_partner_admin's partner
  """
  signInAsChildPartner(id: Int): SignInAsChildPartnerPayload

  """Sign in as a partner admin"""
  signInAsPartner(id: Int, ols: Boolean): SignInAsPartnerPayload

  """Creates a Site Admin"""
  siteAdminCreate(attributes: SiteAdminAttributes!): SiteAdminsCreatePayload

  """Deactivate/Activate MFA on Site Admin"""
  siteAdminDeactivateMfa(id: Int!, deactivate: Boolean!): SiteAdminsDeactivateMfaPayload

  """Delete a Site Admin"""
  siteAdminDelete(id: Int!): SiteAdminsDeletePayload

  """Disable/Enable a Site Admin"""
  siteAdminDisable(id: Int!, disable: Boolean!): SiteAdminsDisablePayload

  """Disables MFA on the site_admin (if valid)"""
  siteAdminDisableMfa(siteAdminId: Int, password: String): SiteAdminsDisableMfaPayload

  """Enables MFA on the site_admin (if valid)"""
  siteAdminEnableMfa(siteAdminId: Int, otp: String!): SiteAdminsEnableMfaPayload

  """Deactivate/Activate FullAdmin status on Site Admin"""
  siteAdminToggleFullAdmin(id: Int!, deactivate: Boolean!): SiteAdminsToggleFullAdminPayload

  """Update a Site Admin"""
  siteAdminUpdate(id: Int!, attributes: SiteAdminAttributes!): SiteAdminsUpdatePayload

  """Update the current Admin"""
  siteAdminUpdateSelf(attributes: SiteAdminAttributes!): SiteAdminsUpdateSelfPayload

  """Update site settings"""
  siteSettingsUpdate(attributes: SiteSettingsAttributes!): SiteSettingsUpdatePayload

  """Create store purchase for the account"""
  storePurchaseCreate(accountId: Int, uuid: String!): StorePurchaseCreatePayload

  """Remove store purchase from the current account"""
  storePurchaseRemove(id: Int!): StorePurchaseRemovePayload

  """Update store purchase from the current account"""
  storePurchaseUpdate(id: Int!, attributes: StorePurchaseAttributes): StorePurchaseUpdatePayload

  """Create a subscription"""
  subscriptionCreate(attributes: SubscriptionAttributes!): SubscriptionsCreatePayload

  """Delete a subscription"""
  subscriptionDelete(id: Int!): SubscriptionsDeletePayload

  """Update a subscription"""
  subscriptionUpdate(id: Int!, attributes: SubscriptionAttributes!): SubscriptionsUpdatePayload

  """Creates a Survey for an enrollment"""
  surveyCreate(enrollmentId: Int!, attributes: SurveyAttributes!): SurveysCreatePayload

  """Creates a TemplateTopic in the current account"""
  templateTopicCreate(attributes: TemplateTopicAttributes!, type: TemplateTopicTypes): TemplateTopicsCreatePayload

  """Delete a TemplateTopic"""
  templateTopicDelete(id: Int!): TemplateTopicsDeletePayload

  """Updates a TemplateTopic in the current account"""
  templateTopicUpdate(id: Int!, attributes: TemplateTopicAttributes!): TemplateTopicsUpdatePayload

  """Creates a TestEmail and sends it"""
  testEmailCreate(templateId: Int, templateUuid: String, to: String, from: String, fromDisplayName: String, freeToolType: FreeToolTypes): TestEmailsCreatePayload

  """Adds a user to a training campaign"""
  trainingCampaignAddUser(trainingCampaignId: Int!, userId: Int!): TrainingCampaignsAddUserPayload

  """Bulk Change a collection of enrollments"""
  trainingCampaignBulkChange(trainingCampaignId: Int!, assetId: Int, file: File!, adminsToNotify: [Int!], notifyRequester: Boolean): TrainingCampaignsBulkChangePayload

  """Marks a training campaign as closed"""
  trainingCampaignClose(id: Int!): TrainingCampaignsClosePayload

  """Creates a Training Campaign in the current account"""
  trainingCampaignCreate(attributes: TrainingCampaignAttributes!, endCampaignOption: TrainingCampaignEnd!): TrainingCampaignsCreatePayload

  """Enrolls multiple learners via CSV file"""
  trainingCampaignCsvEnroll(trainingCampaignId: Int!, payload: File! = ""): TrainingCampaignsCsvEnrollPayload

  """Deletes Training Campaigns"""
  trainingCampaignDelete(ids: [Int!]!): TrainingCampaignsDeletePayload

  """edit a Training Campaign in the current account"""
  trainingCampaignEdit(id: Int!, attributes: TrainingCampaignAttributes!, endCampaignOption: TrainingCampaignEnd!): TrainingCampaignsEditPayload

  """Extends users enrollment due dates"""
  trainingCampaignExtendDueDate(trainingCampaignId: Int!, enrollmentIds: [Int!]!, dueDate: ISO8601Date!): TrainingCampaignsExtendDueDatePayload

  """Removes a user from a training campaign"""
  trainingCampaignRemoveUser(trainingCampaignId: Int!, userId: Int!): TrainingCampaignsRemoveUserPayload

  """Opens previously closed training campaigns"""
  trainingCampaignReopen(ids: [Int!]!): TrainingCampaignsReopenPayload

  """Updates a message recipient status"""
  updateMessageRecipient(id: Int!, attributes: LearnerMessageAttributes!): MessagesUpdateMessageRecipientPayload

  """Creates a USB Campaign"""
  usbCampaignCreate(attributes: UsbCampaignAttributes!): UsbCampaignsCreatePayload

  """Destroys a USB Campaign"""
  usbCampaignDestroy(id: Int!): UsbCampaignsDestroyPayload

  """Ends a USB Campaign"""
  usbCampaignEnd(id: Int!): UsbCampaignsEndPayload

  """Restarts a USB Campaign"""
  usbCampaignRestart(id: Int!): UsbCampaignsRestartPayload

  """Starts a USB Campaign"""
  usbCampaignStart(id: Int!): UsbCampaignsStartPayload

  """Updates a USB Campaign"""
  usbCampaignUpdate(id: Int!, attributes: UsbCampaignAttributes!): UsbCampaignsUpdatePayload

  """Accepts Clickwrap for an Account Admin User"""
  userAcceptClickwrap: UserAcceptClickwrapPayload

  """Adds a collections of users to a collection of classic groups"""
  userAddToGroups(userIds: [Int!]!, groupIds: [Int!]!): UsersAddToGroupsPayload

  """Archive a collection of users"""
  userArchive(userIds: [Int!]!): UsersArchivePayload

  """Bulk Archive a collection of users"""
  userBulkArchive(file: File!, adminsToNotify: [Int!], notifyRequester: Boolean): UsersBulkArchivePayload

  """Bulk change domains of a collection of users via ids"""
  userBulkChangeDomain(accountId: Int!, userIds: [Int!]!, domainId: Int!): UsersBulkChangeDomainPayload

  """Bulk change domains of a collection of users via emails"""
  userBulkChangeDomainEmails(accountId: Int!, userEmails: [String!]!, domainId: Int!): UsersBulkChangeDomainEmailsPayload

  """Bulk Delete a collection of users"""
  userBulkDelete(file: File!, adminsToNotify: [Int!], notifyRequester: Boolean): UsersBulkDeletePayload

  """Create a User"""
  userCreate(email: String!, firstName: String, lastName: String, jobTitle: String, groupIds: [Int!], password: String): UsersCreatePayload

  """Create a User via partner portal"""
  userCreateUpsideDown(accountId: Int!, attributes: UserAttributes!): UsersCreateUpsideDownPayload

  """Imports multiple users by CSV file"""
  userCsvImport(adminsToNotify: [Int!] = [], payload: File! = "", notifyRequester: Boolean = false, notifyAllAdmins: Boolean = false): UsersCsvImportPayload

  """Permanently delete a collection of non-admin users"""
  userDelete(accountIds: [Int!], userIds: [Int!]!): UsersDeletePayload

  """Delete all users in the account except for the owner"""
  userDeleteAll: UserDeleteAllPayload

  """Delete one or more Users by email"""
  userDeleteByEmail(emails: [String!]!): UserDeleteByEmailPayload

  """Removes a collections of users from a specific classic group"""
  userDeleteMemberships(userIds: [Int!]!, groupId: Int!): UsersDeleteMembershipsPayload

  """Edit a User"""
  userEdit(userId: Int!, attributes: UserAttributes!): UsersEditPayload

  """Edit a User via partner portal"""
  userEditUpsideDown(userId: Int!, attributes: UserAttributes!): UsersEditUpsideDownPayload

  """Create a User Event API key"""
  userEventApiCreateKey(name: String!): EchelonApiCreateKeyPayload

  """Delete a User Event API key"""
  userEventApiDeleteKey(id: Int!): EchelonApiDeleteKeyPayload

  """Resync user events with Echelon"""
  userEventResync(userId: Int!, cutoffTime: ISO8601DateTime, startTime: ISO8601DateTime): UsersEventResyncPayload

  """Grants admin priviledges from a collection of users"""
  userGrantAdmin(accountIds: [Int!], userIds: [Int!]!): UsersGrantAdminPayload

  """Edit the current_user's Profile"""
  userProfileEdit(userId: Int, attributes: UserAttributes!): UsersEditProfilePayload

  """Imports multiple users by email address"""
  userQuickImport(emails: [String!]!, groupIds: [Int!], password: String): UsersQuickImportPayload

  """Resend devise confirmation email"""
  userResendConfirmationEmail(userId: Int!): UsersResendConfirmationEmailPayload

  """Revoke admin priviledges from a collection of admins"""
  userRevokeAdmin(accountIds: [Int!], userIds: [Int!]!): UsersRevokeAdminPayload

  """Sets your default Executive Reports dashboard"""
  userSetDefaultExecReportsDashboard(dashboardId: Int): UserSetDefaultExecReportsDashboardPayload

  """Sets your default piq dashboard"""
  userSetDefaultPiqDashboard(dashboardId: Int): UserSetDefaultPiqDashboardPayload

  """Remove an external event"""
  userTimelineExternalEvent(id: String!): TimelineExternalEventDeletePayload

  """Unarchive a collection of users"""
  userUnarchive(userIds: [Int!]!): UsersUnarchivePayload

  """Processes a user merge action"""
  usersMergeProcess(targetUserId: Int!, mergeUserId: Int!): UsersMergeProcessPayload

  """Creates a UST"""
  ustCreate(name: String!): UstCreatePayload

  """Starts a UST"""
  ustStart: UstStartPayload

  """Create a Vishing Campaign"""
  vishingCampaignCreate(campaign: VishingCampaignAttributes!): VishingCampaignsCreatePayload

  """Deletes a Vishing Campaign"""
  vishingCampaignDelete(id: Int!): VishingCampaignsDeletePayload

  """Edit an existing Vishing Campaign"""
  vishingCampaignEdit(id: Int!, campaign: VishingCampaignAttributes!): VishingCampaignsEditPayload

  """Create a Vishing Template"""
  vishingTemplateCall(id: Int!, phoneNumber: String!): VishingTemplatesCallPayload

  """Creates a Vishing Template Category for the current account"""
  vishingTemplateCategoryCreate(attributes: VishingTemplateCategoryAttributes!): VishingTemplatesCategoryCreatePayload

  """Deletes a Vishing Template Category for the current account"""
  vishingTemplateCategoryDelete(id: Int!): VishingTemplatesCategoryDeletePayload

  """Reorders Vishing Template Categories for the current account"""
  vishingTemplateCategoryReorder(ids: [Int!]!): VishingTemplatesCategoryReorderPayload

  """Updates a Vishing Template Category for the current account"""
  vishingTemplateCategoryUpdate(id: Int!, attributes: VishingTemplateCategoryAttributes!): VishingTemplatesCategoryUpdatePayload

  """Clone Vishing Templates into given category"""
  vishingTemplateClone(ids: [Int!]!, categoryId: String!): VishingTemplatesClonePayload

  """Create a Vishing Template"""
  vishingTemplateCreate(data: VishingTemplateAttributes!): VishingTemplatesCreatePayload

  """Delete Vishing Templates"""
  vishingTemplateDelete(ids: [Int!]!): VishingTemplatesDeletePayload

  """Edit a Vishing Template"""
  vishingTemplateEdit(id: Int!, data: VishingTemplateAttributes!): VishingTemplatesEditPayload

  """Move Vishing Templates into given category"""
  vishingTemplateMove(ids: [Int!]!, categoryId: String!): VishingTemplatesMovePayload

  """Lists a paginated set of webhooks"""
  webhookCreate(attributes: WebhooksCreateAttributes!): WebhooksCreatePayload

  """Delete a webhook"""
  webhookDelete(id: Int!): WebhooksDeletePayload

  """Update a webhook definition"""
  webhookUpdate(id: Int!, attributes: WebhooksCreateAttributes!): WebhooksUpdatePayload
}

enum NameFormatTypes {
  FIRST_LAST
  FIRST
  LAST
  LAST_FIRST
}

"""The Notes Account Settings"""
type Notes implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  general: String
  id: Int!
  updatedAt: ISO8601DateTime!
}

input NotesAttributes {
  id: Int
  general: String
}

"""Training Notification"""
type Notification implements Identifier & Timestamps & NotificationInterface {
  adminEmailTemplate: NotificationTemplate
  adminEmailTemplateId: Int
  createdAt: ISO8601DateTime!
  deliveryMethod: TrainingNotificationDeliveryMethods
  emailTemplateId: Int
  enabled: Boolean
  enrollmentFilter: [NotificationEnrollmentFilter!]
  fallbackEmail: Boolean!
  id: Int!
  lastEnrollmentId: Int
  managerEmailTemplate: NotificationTemplate
  managerEmailTemplateId: Int
  messageType: TrainingCampaignNotification!
  notification: Notification
  notifications: [Notification!]
  offsetFrom: String!
  offsetNumDays: Int
  processedAt: ISO8601DateTime
  recipientUserIds: [Int!]
  rescheduleOffset: Int
  updatedAt: ISO8601DateTime!
  userEmailTemplate: NotificationTemplate
}

input NotificationAttributes {
  messageType: TrainingCampaignNotification!
  enrollmentFilter: NotificationEnrollmentFilter
  id: Int
  timestamp: BigInt
  enabled: Boolean!
  offsetNumDays: Int
  rescheduleOffset: Int
  emailTemplateId: Int
  adminEmailTemplateId: Int
  managerEmailTemplateId: Int
  recipientUserIds: [Int!]
  destroy: Boolean
  fallbackEmail: Boolean
  deliveryMethod: TrainingNotificationDeliveryMethods
}

"""Autogenerated return type of NotificationCreate"""
type NotificationCreatePayload {
  errors: [Error!]
  node: Notification
}

enum NotificationEnrollmentFilter {
  enrolled_users
  not_started
  not_completed
  completed
  policy_not_ack
  custom_users
  not_logged_in
  expired
}

"""Common fields between notifications and managed_notifications"""
interface NotificationInterface {
  adminEmailTemplate: NotificationTemplate
  adminEmailTemplateId: Int
  deliveryMethod: TrainingNotificationDeliveryMethods
  emailTemplateId: Int
  enabled: Boolean
  enrollmentFilter: [NotificationEnrollmentFilter!]
  lastEnrollmentId: Int
  managerEmailTemplate: NotificationTemplate
  managerEmailTemplateId: Int
  messageType: TrainingCampaignNotification!
  offsetFrom: String!
  offsetNumDays: Int
  processedAt: ISO8601DateTime
  recipientUserIds: [Int!]
  rescheduleOffset: Int
  userEmailTemplate: NotificationTemplate
}

"""Status of training notification"""
type NotificationReceipt implements Timestamps {
  createdAt: ISO8601DateTime!
  emailTemplateId: Int!
  notificationType: String!
  recipientType: String
  status: String!
  template: NotificationTemplate
  updatedAt: ISO8601DateTime!
}

"""Training Notification Templates"""
type NotificationTemplate implements EmailTemplateInterface {
  archived: Boolean!
  category: PhishingTemplateCategory
  contentHtml: String
  createdAt: ISO8601DateTime!
  from: String!
  fromDisplayName: String
  fromWithDomain: String!
  hidden: Boolean!
  id: Int!
  languageCode: String
  markedAsUpdatedAt: ISO8601DateTime
  name: String
  replyTo: String
  replyToDisplayName: String
  subject: String!
  subjectSanitized: String!
  templateTranslationUuid: String!
  type: NotificationTemplateTypes!
  updatedAt: ISO8601DateTime!
}

input NotificationTemplateAttributes {
  name: String
  from: String!
  fromDisplayName: String
  subject: String!
  contentHtml: String!
  subjectSanitized: String
}

"""An unpaginated list of Phishing Template Categories"""
type NotificationTemplateCategories {
  nodes: [NotificationTemplateCategory!]!
}

"""Category object to filter EmailTemplate nodes"""
type NotificationTemplateCategory implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  hidden: Boolean
  id: Int!
  name: String!
  ordering: Int
  templateCount(showHidden: Boolean): Int
  type: NotificationTemplateCategoryTypes!
  updatedAt: ISO8601DateTime!
}

input NotificationTemplateCategoryAttributes {
  name: String!
}

enum NotificationTemplateCategoryTypes {
  USER
  SYSTEM
  MANAGED
}

"""Notification template defaults for user roles"""
type NotificationTemplateDefaults {
  admin: Int
  manager: Int
  name: String!
  user: Int
}

"""Count of notification templates in draft"""
type NotificationTemplateDrafts {
  count: Int!
}

"""Autogenerated return type of NotificationTemplatesCategoryCreate"""
type NotificationTemplatesCategoryCreatePayload {
  errors: [Error!]
  node: NotificationTemplateCategory
}

"""Autogenerated return type of NotificationTemplatesCategoryDelete"""
type NotificationTemplatesCategoryDeletePayload {
  errors: [Error!]
  node: NotificationTemplateCategory
}

"""Autogenerated return type of NotificationTemplatesCategoryHide"""
type NotificationTemplatesCategoryHidePayload {
  errors: [Error!]
  node: NotificationTemplateCategory
}

"""Autogenerated return type of NotificationTemplatesCategoryUpdate"""
type NotificationTemplatesCategoryUpdatePayload {
  errors: [Error!]
  node: NotificationTemplateCategory
}

"""Autogenerated return type of NotificationTemplatesCreate"""
type NotificationTemplatesCreatePayload {
  errors: [Error!]
  node: NotificationTemplate
}

type NotificationTemplatesCursor {
  nodes: [NotificationTemplate!]!
  pagination: Pagination!
}

"""Autogenerated return type of NotificationTemplatesHide"""
type NotificationTemplatesHidePayload {
  errors: [Error!]
  node: NotificationTemplate
}

"""Autogenerated return type of NotificationTemplatesImport"""
type NotificationTemplatesImportPayload {
  errors: [Error!]
  nodes: [NotificationTemplate!]
}

"""Autogenerated return type of NotificationTemplatesUpdate"""
type NotificationTemplatesUpdatePayload {
  errors: [Error!]
  node: NotificationTemplate
}

enum NotificationTemplateTypes {
  USER
  MANAGED
  SYSTEM
}

enum NotificationTypes {
  system
  custom
}

input Ordering {
  field: String!
  format: String!
}

type Organization {
  id: String
  name: String
}

type OrganizationKey {
  key: String
}

type OsDistribution {
  count: Int
  os: String
  version: String
}

"""An OutlookAddinActivity"""
type OutlookAddinActivity implements Identifier & Timestamps {
  addinVersion: String
  createdAt: ISO8601DateTime!
  id: Int!
  machineGuid: String
  updatedAt: ISO8601DateTime!
}

enum OutlookAddinActivityActivityTypes {
  ALL
  ALL_REPORTED
  NON_REPORTS
}

type OutlookAddinActivityUsersCursor {
  nodes: [User!]!
  pagination: Pagination!
}

enum OutlookAddinActivityUsersSortFields {
  EMAIL
}

type OverallPppByTrainingTimeSeries {
  csv: String!
  series: [OverallPppByTrainingTimeSeriesData!]!
  timeframe: ReportTimeframe
}

type OverallPppByTrainingTimeSeriesData {
  memberCount: Int!
  name: String!
  ppp: Float!
  timeframe: ReportTimeframe
  trainingTime: Float!
}

type Overtime {
  configurationGroups: [PiqWidgetConfigurationGroup!]!
  detection: DetectionTypes!
  groups: [Group!]!
  timeframe: ReportTimeframe
  title: String
  type: PiqWidget!
  userType: PiqUserTypes
}

type PabUserActivity {
  csv: String!
  timeframe: ReportTimeframe
}

"""Modstore package"""
type Package {
  id: Int!
  launchPath: String
}

"""Package File"""
type PackageFile {
  name: String!
  size: BigInt!
}

"""Modstore package file list"""
type PackageFileList {
  basePath: String
  cloudfrontCookies: JSON!
  files: [PackageFile!]
  launchPath: String
  suitableForMobileDownload: Boolean!
}

"""Information about the current paginated set."""
type Pagination {
  """Current page number."""
  page: Int!

  """Total number of pages."""
  pages: Int!

  """Number of items in the page."""
  per: Int!

  """Total number of items."""
  totalCount: Int!
}

"""A partner"""
type Partner implements Identifier & Timestamps {
  canEditAccountInfo: Boolean
  canEnableUserMoves: Boolean
  canManageSubaccounts: Boolean!
  city: String
  companyName: String
  compliancePlusSubscriptionEndDate: ISO8601Date
  country: String
  createdAt: ISO8601DateTime!
  defaultLandingPage: LandingPage!
  domain: String
  email: String!
  ensureSameSessionIp: Boolean
  entityId: String
  extension: String
  firstName: String
  id: Int!
  idpCertFingerprint: String
  idpCertFormat: IdpCertificationFormats
  idpSsoTargetUrl: String
  ipAllowList: String
  lastName: String
  locale: String
  logo: String
  logoDownloadUrl: String
  logoFileName: String
  numAccounts: Int!
  numBulkAccounts: Int!
  numBulkUsers: Int
  numBulkUsersCount: Int!
  numFreeAccounts: Int!
  numFreeUsers: Int!
  numPaidAccounts: Int!
  numPaidUsers: Int!
  numTrialAccounts: Int!
  numTrialUsers: Int!
  numUsers: Int!
  onlineShop: Boolean!
  parentHasSfid: Boolean!
  partnerAdminOwner: PartnerAdmin
  partnerAdminPermission: PartnerAdminPermission
  partnerAdmins(onlyFullAdmins: Boolean = false): [PartnerAdmin!]!
  partnerId: Int
  partnerType: PartnerTypes!
  phisherSubscriptionEndDate: ISO8601Date
  phoneNumber: String
  purchasedSkus: [PartnerPurchasedSku!]!
  restrictConsoleSession: Boolean
  samlEnabled: Boolean!
  sessionTimeout: Int!
  sfid: String
  signSamlRequests: Boolean
  ssoCallback: String
  ssoIn: String
  ssoMetadata: String
  ssoOriginalStatus: Boolean!
  ssoOut: String
  ssoSlug: String
  state: String
  streetAddress1: String
  streetAddress2: String
  subscription: Subscription
  subscriptionEndDate: ISO8601Date
  subscriptionId: Int
  suiteNumber: String
  timeZone: TimeZones
  updatedAt: ISO8601DateTime!
  usableSfid: String
  useParentsSfid: Boolean!
  website: String
  zipCode: String
}

"""A partner admin"""
type PartnerAdmin implements Identifier & Timestamps {
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  currentSignInAt: ISO8601DateTime
  displayName: String!
  email: String!
  extension: String
  firstName: String
  fullAdmin: Boolean!
  id: Int!
  lastName: String
  locale: String
  logoDownloadUrl: String
  mfaEnabled: Boolean
  mobilePhoneNumber: String
  onlineShop: Boolean!
  otpCode: String!
  otpSecretKey: String!
  partnerAdminPermission: PartnerAdminPermission
  partnerId: Int
  phoneNumber: String
  qrCodeImageData: String!
  timeZone: TimeZones
  updatedAt: ISO8601DateTime!
}

input PartnerAdminAttributes {
  firstName: String
  lastName: String
  email: String
  fullAdmin: Boolean
  timeZone: TimeZones
  phoneNumber: String
  extension: String
  mobilePhoneNumber: String
  mfaEnabled: Boolean
  locale: String
  password: String
  passwordConfirmation: String
  partnerAdminPermission: PartnerAdminPermissionAttributes
}

"""A set of permissions for a Partner Admin"""
type PartnerAdminPermission implements Identifier & Timestamps {
  canManagePhishingCampaigns: Boolean!
  canManageTrainingCampaigns: Boolean!
  createdAt: ISO8601DateTime!
  hasManagedModstore: Boolean!
  id: Int!
  reporting: PartnerAdminReportingPermissions!
  sendReports: PartnerAdminSendReportsPermissions!
  updatedAt: ISO8601DateTime!
}

input PartnerAdminPermissionAttributes {
  id: Int
  canManagePhishingCampaigns: Boolean
  canManageTrainingCampaigns: Boolean
  hasManagedModstore: Boolean
  reporting: PartnerAdminReportingPermissions
  sendReports: PartnerAdminSendReportsPermissions
}

enum PartnerAdminReportingPermissions {
  NO_ACCESS
  READ
  WRITE
}

"""Autogenerated return type of PartnerAdminsCreate"""
type PartnerAdminsCreatePayload {
  errors: [Error!]
  node: PartnerAdmin
}

type PartnerAdminsCursor {
  nodes: [PartnerAdmin!]!
  pagination: Pagination!
}

"""Autogenerated return type of PartnerAdminsDeactivateMfa"""
type PartnerAdminsDeactivateMfaPayload {
  errors: [Error!]
  node: PartnerAdmin
}

"""Autogenerated return type of PartnerAdminsDelete"""
type PartnerAdminsDeletePayload {
  errors: [Error!]
  node: PartnerAdmin
}

"""Autogenerated return type of PartnerAdminsDisableMfa"""
type PartnerAdminsDisableMfaPayload {
  errors: [Error!]
  node: PartnerAdmin
}

"""Autogenerated return type of PartnerAdminsEnableMfa"""
type PartnerAdminsEnableMfaPayload {
  errors: [Error!]
  node: PartnerAdmin
}

enum PartnerAdminSendReportsPermissions {
  NO_ACCESS
  WRITE
}

enum PartnerAdminsSortFields {
  PARTNER_NAME
  EMAIL
  CONFIRMED_AT
  CURRENT_SIGN_IN_AT
}

"""Autogenerated return type of PartnerAdminsUpdate"""
type PartnerAdminsUpdatePayload {
  errors: [Error!]
  node: PartnerAdmin
}

"""Autogenerated return type of PartnerAdminsUpdateSelf"""
type PartnerAdminsUpdateSelfPayload {
  errors: [Error!]
  node: PartnerAdmin
}

input PartnerAttributes {
  partnerId: Int
  canEditAccountInfo: Boolean
  canEnableUserMoves: Boolean
  canManageSubaccounts: Boolean
  domain: String
  companyName: String
  streetAddress1: String
  streetAddress2: String
  suiteNumber: String
  city: String
  state: String
  zipCode: String
  country: String
  phoneNumber: String
  extension: String
  timeZone: TimeZones
  website: String
  numBulkUsers: Int
  subscriptionId: Int
  subscriptionEndDate: ISO8601Date
  phisherSubscriptionEndDate: ISO8601Date
  partnerType: PartnerTypes
  sfid: String
  useParentsSfid: Boolean
  purchasedSkus: [PartnerPurchasedSkusAttributes!]
  logo: String
  logoFileName: String
  ensureSameSessionIp: Boolean
  restrictConsoleSession: Boolean
  ipAllowList: String
  sessionTimeout: Int
  samlEnabled: Boolean
  signSamlRequests: Boolean
  idpSsoTargetUrl: String
  idpCertFormat: IdpCertificationFormats
  idpCertFingerprint: String
  partnerAdmin: PartnerAdminAttributes
  partnerAdminPermission: PartnerAdminPermissionAttributes
  firstName: String
  lastName: String
  email: String
}

"""Purchased SKU, added to a main partner"""
type PartnerPurchasedSku {
  expiresAt: ISO8601Date
  skuCode: String!
  status: AccountPurchaseStatuses
  title: String!
}

input PartnerPurchasedSkusAttributes {
  skuCode: String!
  title: String!
  expiresAt: ISO8601DateTime
}

"""Autogenerated return type of PartnersCreate"""
type PartnersCreatePayload {
  errors: [Error!]
  node: Partner
}

type PartnersCursor {
  nodes: [Partner!]!
  pagination: Pagination!
}

"""Autogenerated return type of PartnersDeleteLogo"""
type PartnersDeleteLogoPayload {
  errors: [Error!]
  node: Partner
}

"""Autogenerated return type of PartnersDelete"""
type PartnersDeletePayload {
  errors: [Error!]
  node: Partner
}

"""Autogenerated return type of PartnersSalesforceDisconnect"""
type PartnersSalesforceDisconnectPayload {
  errors: [Error!]
  node: Partner
}

"""Autogenerated return type of PartnersSalesforceFetch"""
type PartnersSalesforceFetchPayload {
  errors: [Error!]
  node: Partner
}

"""Autogenerated return type of PartnersSalesforceScheduleAccountsFetch"""
type PartnersSalesforceScheduleAccountsFetchPayload {
  errors: [Error!]
  node: [String!]
}

enum PartnersSortFields {
  COMPANY_NAME
  DOMAIN
  CREATED_AT
  PARTNER_TYPE
  SUBSCRIPTION_END_DATE
  PHISHER_SUBSCRIPTION_END_DATE
  NUM_BULK_USERS
}

"""Autogenerated return type of PartnersUpdateAccount"""
type PartnersUpdateAccountPayload {
  errors: [Error!]
  node: Partner
}

"""Autogenerated return type of PartnersUpdate"""
type PartnersUpdatePayload {
  errors: [Error!]
  node: Partner
}

enum PartnerTypes {
  RESELLER
  CUSTOMER
  MSP
  CONSULTANT
}

type PasswordIqCsvConfiguration {
  detectionTypes: [DetectionTypes!]!
  rowsReturned: Int!
  search: String
  userType: PiqUserTypes
}

"""Autogenerated return type of PasswordIqCsv"""
type PasswordIqCsvPayload {
  errors: [Error!]
  queued: String
}

"""Autogenerated return type of PasswordIqDashboardCreate"""
type PasswordIqDashboardCreatePayload {
  errors: [Error!]
  node: PiqDashboard
}

"""Autogenerated return type of PasswordIqDashboardDelete"""
type PasswordIqDashboardDeletePayload {
  errors: [Error!]
  node: PiqDashboard
}

"""Autogenerated return type of PasswordIqDashboardUpdate"""
type PasswordIqDashboardUpdatePayload {
  errors: [Error!]
  node: PiqDashboard
}

input PasswordIqDashboardWidget {
  startColumn: Int!
  endColumn: Int!
  startRow: Int!
  endRow: Int!
  type: PiqWidget!
  title: String
  groups: [Int!]
  detection: WidgetDetectionTypes
  timeframe: ReportsTimeframe
  varianceTimeframe: ReportsTimeframe
  overtimeTimeframe: ReportsTimeframe
  selectedDetections: [WidgetDetectionTypes!]
  search: String
  sort: SortFields
  sortDirection: SortDirections
  per: Int
  page: Int
  userType: PiqUserTypes
}

type PasswordIqEvent implements Identifier {
  boolean: Booleans!
  comparison: EventComparisons!
  count: Int!
  detected: Boolean!
  detection: [DetectionTypes!]
  event: EventTypes
  id: Int!
  timeframe: Timeframe!
}

input PasswordIqEventArgument {
  bool: Booleans!
  countType: EventComparisons!
  event: EventTypes
  detection: [DetectionTypes!]
  detected: Boolean!
  comparison: EventComparisons
  count: Int!
  timeframe: TimeframeArgument!
}

type PasswordIqPdfConfiguration {
  widgets: [PiqWidgetsConfiguration!]!
}

"""Autogenerated return type of PasswordIqPDF"""
type PasswordIqPDFPayload {
  errors: [Error!]
  node: Download
}

"""Report download"""
type PasswordIqReport {
  category: DownloadablesCategories!
  configuration: PiqDownloadMetadata!
  createdAt: ISO8601DateTime!
  id: Int!
  impersonatingUser: User
  type: DownloadablesTypes!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated return type of PasswordIqScanNow"""
type PasswordIqScanNowPayload {
  errors: [Error!]
  node: RequestedScan
}

"""Autogenerated return type of PasswordIqScheduleUpdate"""
type PasswordIqScheduleUpdatePayload {
  errors: [Error!]
  node: Schedule
}

type PasswordIqState implements Identifier {
  detected: Boolean!
  detection: DetectionTypes
  id: Int!
}

input PasswordIqStateArgument {
  detection: DetectionTypes
  detected: Boolean!
}

"""Autogenerated return type of PasswordIqUpdateEvent"""
type PasswordIqUpdateEventPayload {
  errors: [Error!]
  node: PiqEvent
}

"""A Widget Configuration type"""
union PasswordIqWidgetConfigurations = Count | DetectionComparison | Overtime | RedFlag | States | Variance

"""A file"""
type PersistedFile implements Timestamps {
  createdAt: ISO8601DateTime!
  name: String!
  updatedAt: ISO8601DateTime!
}

"""The settings for a language of a Phishalert instance"""
type PhishalertLanguage implements Identifier & Timestamps {
  _destroy: Boolean!
  confirmationMessage: String
  createdAt: ISO8601DateTime!
  emailForwardSubject: String
  id: Int!
  isDefault: Boolean
  language: PublishedLanguages!
  messageReportNonPst: String
  messageReportPst: String
  reportButtonText: String!
  reportGroupText: String!
  showMessageReportNonPst: Boolean!
  showMessageReportPst: Boolean!
  timeoutReportPst: Int!
  updatedAt: ISO8601DateTime!
}

input PhishalertLanguageAttributes {
  id: Int
  isDefault: Boolean
  emailForwardSubject: String
  confirmationMessage: String
  showMessageReportNonPst: Boolean
  messageReportNonPst: String
  showMessageReportPst: Boolean
  messageReportPst: String
  timeoutReportPst: CoercedInt
  reportButtonText: String
  reportGroupText: String
  language: PublishedLanguages
  _destroy: Boolean
}

"""The settings for a Phishalert instance"""
type PhishalertSetting implements Identifier & Timestamps {
  allowUsersToComment: Boolean!
  alsoCc: Boolean
  chromeExtension: String!
  createdAt: ISO8601DateTime!
  defaultIconUrl: String!
  disableCridValidation: Boolean!
  disableUnknownDisposition: Boolean!
  emailFormat: EmailForwardFormats!
  emailForward: String!
  emailForwardMicrosoftAddin: String
  emailForwardPhishing: String!
  emailForwardSpam: String!
  emailForwardUnknown: String!
  enableForwarding: Boolean!
  excludeEmailBodyInReport: Boolean!
  globalDefault: Boolean!
  graphManifest: String!
  hybridManifest: String!
  iconUrl: String
  id: Int!
  includeHeadersInEmailBody: Boolean!
  isDefaultIcon: Boolean!
  license: String!
  name: String!
  outlookManifest: String! @deprecated(reason: "Retiring this manifest")
  outlookManifestV2: String! @deprecated(reason: "Retiring this manifest")
  outlookUrl: String
  outlookUrlName: String! @deprecated(reason: "Not actually used")
  pabIcon: String
  phishalertLanguages: [PhishalertLanguage!]!
  pullLocaleForPhishing: Boolean!
  saveToSentItems: Boolean!
  sendToMicrosoft: Boolean!
  sendToMicrosoftAddin: Boolean!
  updatedAt: ISO8601DateTime!
}

input PhishalertSettingAttributes {
  id: Int!
  name: String
  emailForward: String
  emailForwardPhishing: String
  emailForwardSpam: String
  emailForwardUnknown: String
  emailFormat: EmailForwardFormats
  alsoCc: Boolean
  pabIcon: String
  phishalertLanguages: [PhishalertLanguageAttributes!]
  enableForwarding: Boolean
  pullLocaleForPhishing: Boolean
  allowUsersToComment: Boolean
  globalDefault: Boolean
  disableUnknownDisposition: Boolean
  includeHeadersInEmailBody: Boolean
  disableCridValidation: Boolean
  sendToMicrosoft: Boolean
  excludeEmailBodyInReport: Boolean
  sendToMicrosoftAddin: Boolean
  emailForwardMicrosoftAddin: String
  saveToSentItems: Boolean
}

"""The Phishing Account Settings"""
type PhishAlertStats {
  installed: Int!
  reportedNonSimulatedPhishing: Int!
  reportedNonSimulatedPhishingGraph: [TimeData!]!
  reportedSimulatedPhishing: Int!
  reportedSimulatedPhishingGraph: [TimeData!]!
  total: Int!
  uninstalled: Int!
}

"""A domain used for phishing emails"""
type PhishDomain implements Identifier & Timestamps {
  active: Boolean
  createdAt: ISO8601DateTime!
  domainType: PhishDomainTypes!
  dotname: String!
  hidden: Boolean!
  id: Int!
  name: String!
  replyToEnabled: Boolean!
  rootDomain: String!
  updatedAt: ISO8601DateTime!
}

input PhishDomainAttributes {
  name: String
  domainType: PhishDomainTypes
  hidden: Boolean
  replyToEnabled: Boolean
}

"""Autogenerated return type of PhishDomainsCreateCustom"""
type PhishDomainsCreateCustomPayload {
  errors: [Error!]
  node: PhishDomain
}

"""Autogenerated return type of PhishDomainsCreate"""
type PhishDomainsCreatePayload {
  errors: [Error!]
  node: PhishDomain
}

type PhishDomainsCursor {
  nodes: [PhishDomain!]!
  pagination: Pagination!
}

"""Autogenerated return type of PhishDomainsDelete"""
type PhishDomainsDeletePayload {
  errors: [Error!]
  node: PhishDomain
}

enum PhishDomainSortFields {
  NAME
  CREATEDAT
  REPLYTOENABLED
  DOMAINTYPE
  HIDDEN
}

"""Autogenerated return type of PhishDomainsToggleArchived"""
type PhishDomainsToggleArchivedPayload {
  errors: [Error!]
  node: PhishDomain
}

"""Autogenerated return type of PhishDomainsToggleOverride"""
type PhishDomainsToggleOverridePayload {
  errors: [Error!]
  node: PhishDomain
}

"""Autogenerated return type of PhishDomainsUpdate"""
type PhishDomainsUpdatePayload {
  errors: [Error!]
  node: PhishDomain
}

enum PhishDomainTypes {
  ACCOUNTUSABLE
  ACCOUNTUSABLEWITHREPLYTO
  SYSTEM
  LEGACY
  CUSTOMIZABLE
  USER
  REPLY_TO
}

type PhishEvent implements Identifier {
  boolean: Booleans!
  comparison: EventComparisons!
  count: Int!
  event: PhishEvents!
  id: Int!
  timeframe: Timeframe!
}

input PhishEventArgument {
  bool: Booleans!
  event: PhishEvents!
  countType: EventComparisons!
  count: Int!
  timeframe: TimeframeArgument!
}

enum PhishEvents {
  RUN_FAILURES
  PASSED
  ALL_FAILURES
  ALL_FAILURES_BUT_CLICKS
  CLICKED
  REPLIED
  ATTACHMENT_OPEN
  MACRO_ENABLED
  DATA_ENTERED
  QR_CODE_SCANNED
  CALLED
  CALLBACK_DATA_ENTERED
  REPORTED
  DELIVERED
  BOUNCED
  OPENED
}

type PhishFlipEvent implements Identifier {
  boolean: Booleans!
  comparison: EventComparisons!
  count: Int!
  event: PhishFlipEvents!
  id: Int!
  timeframe: Timeframe!
}

input PhishFlipEventArgument {
  bool: Booleans!
  event: PhishFlipEvents!
  countType: EventComparisons!
  count: Int!
  timeframe: TimeframeArgument!
}

enum PhishFlipEvents {
  RUN_FAILURES
  PASSED
  ALL_FAILURES
  ALL_FAILURES_BUT_CLICKS
  CLICKED
  REPLIED
  ATTACHMENT_OPEN
  MACRO_ENABLED
  DATA_ENTERED
  QR_CODE_SCANNED
  CALLED
  CALLBACK_DATA_ENTERED
  REPORTED
  DELIVERED
  BOUNCED
  OPENED
}

enum PhishingAttackVectors {
  PDFATTACHMENTS
  WORDATTACHMENTS
  EXCELATTACHMENTS
  POWERPOINTATTACHMENTS
  MACROATTACHMENTS
  ZIPPEDATTACHMENTS
  HTMLATTACHMENTS
}

"""A Phishing Campaign"""
type PhishingCampaign implements Identifier & Timestamps & PhishingCampaignInterface {
  active: Boolean!
  aidaSelectedTemplate: Boolean
  allUsers: Boolean!
  businessDays: [Int!]
  businessHoursEndHour: Time
  businessHoursStartHour: Time
  callbackPhishingGreetingTemplateTranslationUuid: String
  callbackPhishingPhoneNumberRegion: String
  callbackPhishingPhoneNumberRegions: CallbackPhishingPhoneNumberRegions
  campaignType: String!
  clickedGroup: Group
  clickers: [PhishingCampaignClicker!]!
  createdAt: ISO8601DateTime!
  difficulties: [Int!]!
  displayTemplateSelection: String
  emailTemplate: PhishingTemplate
  firstRun: PhishingCampaignRun
  frequencyPeriod: Frequencies!
  fullRandom: Boolean
  groups: [Group!]!
  hideFromReports: Boolean!
  id: Int!
  isPhishflip: Boolean!
  isRecurring: Boolean!
  landingPage: LandingPage
  landingPageId: Int
  lastRun: PhishingCampaignRun
  lastRunDate: ISO8601DateTime
  localizedCampaign: Boolean
  managedPhishingCampaign: ManagedPhishingCampaign
  name: String!
  nextRun: ISO8601DateTime
  phishDomain: PhishDomain
  rating: [EmailTemplateDifficultyRatings!]!
  replyDomainPrefix: String
  replyPhishDomain: PhishDomain
  runs: [PhishingCampaignRun!]!
  selectedGroups: [Int!]!
  selectedTemplateTopics: JSON
  sendEmailAfterRun: Boolean!
  sendingDuration: Int
  sendingDurationUnits: Durations
  spreadEmails: Boolean
  startedWithin24Hours: Boolean!
  storeFullCallbackPhoneNumber: Boolean!
  storeReplyContent: Boolean!
  templateCategories: [PhishingTemplateCategory!]!
  templateTopics: [TemplateTopic!]
  timeZone: TimeZones!
  trackOutOfOfficeReplies: Boolean!
  trackReplies: Boolean!
  trackingDuration: Int!
  trackingDurationUnits: Durations!
  updatedAt: ISO8601DateTime!
}

input PhishingCampaignAttributes {
  name: String
  frequencyPeriod: Frequencies
  selectedGroups: [Int!]
  localizedCampaign: Boolean
  nextRunDate: ISO8601Date
  nextRunTime: Time
  timeZone: TimeZones
  spreadEmails: Boolean
  sendingDuration: Int
  sendingDurationUnits: Durations
  businessHoursStartHour: Time
  businessHoursEndHour: Time
  businessDays: [Int!]
  trackingDuration: Int
  trackingDurationUnits: Durations
  trackReplies: Boolean
  replyDomainPrefix: String
  replyPhishDomainId: Int
  storeReplyContent: Boolean
  trackOutOfOfficeReplies: Boolean
  selectedTemplateCategories: [Int!]
  selectedTemplateTopics: JSON
  rating: [EmailTemplateDifficultyRatings!]
  phishDomainId: Int
  clickedGroupId: Int
  sendEmailAfterRun: Boolean
  hideFromReports: Boolean
  landingPageId: Int
  emailTemplateId: Int
  callbackPhishingGreetingTemplateTranslationUuid: String
  callbackPhishingPhoneNumberRegion: String
  storeFullCallbackPhoneNumber: Boolean
}

"""A Phishing Campaign clicker"""
type PhishingCampaignClicker {
  clicks: Int!
  user: User!
}

"""Autogenerated return type of PhishingCampaignCreate"""
type PhishingCampaignCreatePayload {
  errors: [Error!]
  node: PhishingCampaign
}

"""Autogenerated return type of PhishingCampaignDeactivate"""
type PhishingCampaignDeactivatePayload {
  errors: [Error!]
  node: PhishingCampaign
}

"""Autogenerated return type of PhishingCampaignDelete"""
type PhishingCampaignDeletePayload {
  errors: [Error!]
  node: PhishingCampaign
}

"""Autogenerated return type of PhishingCampaignEdit"""
type PhishingCampaignEditPayload {
  errors: [Error!]
  node: PhishingCampaign
}

"""A Phishing Campaign Recipient Failure Detail"""
type PhishingCampaignFailureDetails {
  date: ISO8601DateTime!
  type: String!
}

enum PhishingCampaignFilters {
  ACTIVE
  INACTIVE
  HIDDEN
  PHISHFLIP
  ALL
}

"""Autogenerated return type of PhishingCampaignHideFromReports"""
type PhishingCampaignHideFromReportsPayload {
  errors: [Error!]
  node: PhishingCampaign
}

"""
Common fields between phishing_campaigns and managed_phishing_campaigns
"""
interface PhishingCampaignInterface {
  active: Boolean!
  aidaSelectedTemplate: Boolean
  emailTemplate: PhishingTemplate
  frequencyPeriod: Frequencies!
  fullRandom: Boolean
  hideFromReports: Boolean!
  landingPage: LandingPage
  localizedCampaign: Boolean
  name: String!
  nextRun: ISO8601DateTime
  phishDomain: PhishDomain
  rating: [EmailTemplateDifficultyRatings!]!
  replyDomainPrefix: String
  replyPhishDomain: PhishDomain
  sendEmailAfterRun: Boolean!
  sendingDuration: Int
  sendingDurationUnits: Durations
  spreadEmails: Boolean
  storeReplyContent: Boolean!
  templateCategories: [PhishingTemplateCategory!]!
  timeZone: TimeZones!
  trackOutOfOfficeReplies: Boolean!
  trackReplies: Boolean!
  trackingDuration: Int!
  trackingDurationUnits: Durations!
}

"""A Phishing Campaign Non Recipient"""
type PhishingCampaignNonRecipient implements Identifier & Timestamps {
  campaignRun: PhishingCampaignRun!
  createdAt: ISO8601DateTime!
  id: Int!
  reason: String
  updatedAt: ISO8601DateTime!
  user: User!
}

type PhishingCampaignNonRecipientsCursor {
  nodes: [PhishingCampaignNonRecipient!]!
  pagination: Pagination!
}

"""A Phishing Campaign Recipient"""
type PhishingCampaignRecipient implements Identifier & Timestamps {
  attachmentOpen: ISO8601DateTime
  attachmentType: Extensions
  bounceReason: String
  bounced: ISO8601DateTime
  browser: String
  browserVersion: String
  callbackDataEntered: ISO8601DateTime
  called: ISO8601DateTime
  campaignRecipientDmi: PhishingCampaignRecipientDmi
  campaignRun: PhishingCampaignRun!
  clicked: ISO8601DateTime
  clickedCount: Int
  createdAt: ISO8601DateTime!
  dataEntered: ISO8601DateTime
  delivered: ISO8601DateTime
  deliveredAt: ISO8601DateTime
  displayIp: String
  dropped: ISO8601DateTime
  email: String
  emailTemplate: PhishingTemplate!
  emailTemplateId: Int!
  failureDetails: [PhishingCampaignFailureDetails!]
  id: Int!
  ipAddress: String
  ipLocation: String
  macroEnabled: ISO8601DateTime
  opened: ISO8601DateTime
  os: String
  processed: ISO8601DateTime
  qrCodeScanned: ISO8601DateTime
  replied: ISO8601DateTime
  replyContent: ReplyContent
  reported: ISO8601DateTime
  scheduledAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
  user: User!
}

input PhishingCampaignRecipientAttributes {
  clicked: ISO8601DateTime
  replied: ISO8601DateTime
  dataEntered: ISO8601DateTime
  macroEnabled: ISO8601DateTime
  qrCodeScanned: ISO8601DateTime
  attachmentOpen: ISO8601DateTime
  called: ISO8601DateTime
  callbackDataEntered: ISO8601DateTime
}

"""A Phishing Campaign Recipient DMI"""
type PhishingCampaignRecipientDmi implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  receivedAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated return type of PhishingCampaignRecipientRemoveReply"""
type PhishingCampaignRecipientRemoveReplyPayload {
  errors: [Error!]
  node: PhishingCampaignRecipient
}

type PhishingCampaignRecipientsCursor {
  nodes: [PhishingCampaignRecipient!]!
  pagination: Pagination!
}

"""Autogenerated return type of PhishingCampaignRecipientUpdate"""
type PhishingCampaignRecipientUpdatePayload {
  errors: [Error!]
  node: PhishingCampaignRecipient
}

"""A Phishing Campaign Run"""
type PhishingCampaignRun implements Identifier & Timestamps {
  aidaSelectedTemplate: Boolean
  callbackPhishingGreetingTemplate: CallbackPhishingGreetingTemplate
  callbackPhishingPhoneNumber: CallbackPhishingPhoneNumber
  callbackPhishingResponseTemplate: CallbackPhishingResponseTemplate
  campaign: PhishingCampaign!
  campaignDeliveryMethods: [CampaignDeliveryMethod!]
  campaignNonRecipients: [PhishingCampaignNonRecipient!]
  campaignNonRecipientsCount: Int
  campaignRecipients: [PhishingCampaignRecipient!]!
  completedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  customReplyTo: String
  duration: Int!
  emailTemplateId: Int
  fullRandomTemplate: Boolean
  groupNames: String!
  groups: [Group!]!
  id: Int!
  landingPage: LandingPage
  landingPagePreview: String!
  output: String
  phishDomain: String
  phishPronePercentage: Float!
  phishingTemplate: PhishingTemplate
  recipientCount: Int!
  replyDomainPrefix: String
  replyPhishDomainId: Int
  scheduledCount: Int
  sendingDuration: Int!
  startedAt: ISO8601DateTime
  status: PhishingCampaignRunStatuses!
  storeReplyContent: Boolean
  totalAttachmentOpen: Int!
  totalBounced: Int!
  totalCallbackDataEntered: Int!
  totalCalled: Int!
  totalClicked: Int!
  totalDataEntered: Int!
  totalDelivered: Int!
  totalDropped: Int!
  totalFailed: Int!
  totalMacroEnabled: Int!
  totalOpened: Int!
  totalQrCodeScanned: Int!
  totalReplied: Int!
  totalReported: Int!
  totalScheduled: Int!
  totalSpamreport: Int!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated return type of PhishingCampaignRunDelete"""
type PhishingCampaignRunDeletePayload {
  errors: [Error!]
  node: PhishingCampaignRun
}

"""Autogenerated return type of PhishingCampaignRunsBulkChange"""
type PhishingCampaignRunsBulkChangePayload {
  errors: [Error!]
  node: Boolean
}

type PhishingCampaignRunsCursor {
  nodes: [PhishingCampaignRun!]!
  pagination: Pagination!
}

enum PhishingCampaignRunStatuses {
  ACTIVE
  CLOSED
  CREATED
  ERROR
  SCHEDULING
}

"""Autogenerated return type of PhishingCampaignRunStop"""
type PhishingCampaignRunStopPayload {
  errors: [Error!]
  node: PhishingCampaignRun
}

type PhishingCampaignsCursor {
  nodes: [PhishingCampaign!]!
  pagination: Pagination!
}

enum PhishingCampaignSortFields {
  ID
}

enum PhishingCampaignTypes {
  STANDARD
  PHISH_FLIP
  CALLBACK
  ALL
}

type PhishingSecurityTests {
  csv: String!
  timeframe: ReportTimeframe
}

"""Email Templates for Phishing"""
type PhishingTemplate implements EmailTemplateInterface {
  archived: Boolean!
  attachmentFilename: String
  attachmentType: Extensions
  category: PhishingTemplateCategory
  contentHtml: String
  createdAt: ISO8601DateTime!
  excluded: Boolean!
  from: String!
  fromDisplayName: String
  fromSanitized: String!
  fromWithDomain: String!
  hidden: Boolean!
  id: Int!
  landingDomainId: Int
  landingPageId: Int
  languageCode: String
  markedAsUpdatedAt: ISO8601DateTime
  name: String
  rating: EmailTemplateDifficultyRatings
  ratingRaw: Int
  replyTo: String
  replyToDisplayName: String
  subject: String!
  subjectSanitized: String!
  templateTranslationUuid: String!
  topics: [TemplateTopic!]
  translations: [PhishingTemplateTranslation!]
  type: PhishingTemplateTypes!
  updatedAt: ISO8601DateTime!
}

input PhishingTemplateAttributes {
  name: String
  from: String!
  fromDisplayName: String
  replyTo: String
  replyToDisplayName: String
  subject: String!
  contentHtml: String!
  attachmentFilename: String
  attachmentType: Extensions
  rating: EmailTemplateDifficultyRatings
  landingPageId: Int
  landingDomainId: Int
  languageCode: String
}

"""An unpaginated list of Phishing Template Categories"""
type PhishingTemplateCategories {
  nodes: [PhishingTemplateCategory!]!
}

"""Category object to filter EmailTemplate nodes"""
type PhishingTemplateCategory implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  hidden: Boolean
  id: Int!
  name: String!
  ordering: Int
  templateCount(showHidden: Boolean, showExcluded: Boolean): Int
  type: PhishingTemplateCategoryTypes!
  updatedAt: ISO8601DateTime!
}

input PhishingTemplateCategoryAttributes {
  name: String!
}

"""Autogenerated return type of PhishingTemplateCategoryCreate"""
type PhishingTemplateCategoryCreatePayload {
  errors: [Error!]
  node: PhishingTemplateCategory
}

"""Autogenerated return type of PhishingTemplateCategoryDelete"""
type PhishingTemplateCategoryDeletePayload {
  errors: [Error!]
  node: PhishingTemplateCategory
}

"""Autogenerated return type of PhishingTemplateCategoryHide"""
type PhishingTemplateCategoryHidePayload {
  errors: [Error!]
  node: PhishingTemplateCategory
}

"""Phishing Template Category Recommendation"""
type PhishingTemplateCategoryRecommendation {
  phishingTemplateCategory: PhishingTemplateCategory!
  phishingTemplateMatchCount: Int!
}

enum PhishingTemplateCategoryTypes {
  SYSTEM
  USER
  COMMUNITY
  MANAGED
}

"""Autogenerated return type of PhishingTemplateCategoryUpdate"""
type PhishingTemplateCategoryUpdatePayload {
  errors: [Error!]
  node: PhishingTemplateCategory
}

"""Autogenerated return type of PhishingTemplateCreate"""
type PhishingTemplateCreatePayload {
  errors: [Error!]
  node: PhishingTemplate
}

"""Email Templates for Phishing"""
type PhishingTemplateDrafts {
  count: Int!
  totalCount: Int!
}

"""Autogenerated return type of PhishingTemplateHide"""
type PhishingTemplateHidePayload {
  errors: [Error!]
  node: PhishingTemplate
}

"""Autogenerated return type of PhishingTemplateImport"""
type PhishingTemplateImportPayload {
  errors: [Error!]
  nodes: [PhishingTemplate!]
}

type PhishingTemplatesAsapCursor {
  nodes: [PhishingTemplate!]!
  pagination: Pagination!
}

"""Autogenerated return type of PhishingTemplatesCopy"""
type PhishingTemplatesCopyPayload {
  errors: [Error!]
  nodes: [PhishingTemplate!]
}

type PhishingTemplatesCursor {
  nodes: [PhishingTemplate!]!
  pagination: Pagination!
}

"""Phishing Template Translation"""
type PhishingTemplateTranslation {
  id: Int!
  languageCode: String!
  uuid: String!
}

enum PhishingTemplateTypes {
  USER
  MANAGED
  SYSTEM
  COMMUNITY
}

"""Autogenerated return type of PhishingTemplateUpdate"""
type PhishingTemplateUpdatePayload {
  errors: [Error!]
  node: PhishingTemplate
}

"""Physical QR Campaign"""
type PhysicalQrCampaign implements Identifier & Timestamps {
  completedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  geoLocation: UsbCampaignGeoLocation
  id: Int!
  landingPageId: Int
  name: String!
  notes: String
  phishDomainId: Int
  physicalQrCampaignLocation(locationId: Int = null): PhysicalQrCampaignLocation
  physicalQrCampaignLocationCount: Int!
  physicalQrCampaignLocations: [PhysicalQrCampaignLocation!]!
  startedAt: ISO8601DateTime
  status: PhysicalQrCampaignStatuses!
  templateTranslationUuid: String!
  updatedAt: ISO8601DateTime!
}

input PhysicalQrCampaignAttributes {
  name: String
  notes: String
  templateTranslationUuid: String
  landingPageId: Int
  phishDomainId: Int
}

"""Physical QR Campaign Location"""
type PhysicalQrCampaignLocation implements Identifier & Timestamps {
  contentHtml: String!
  createdAt: ISO8601DateTime!
  id: Int!
  location: String!
  notes: String
  physicalQrCampaign: PhysicalQrCampaign!
  physicalQrCampaignResults: [PhysicalQrCampaignResult!]!
  totalDataEntered: Int!
  totalQrCodeScanned: Int!
  updatedAt: ISO8601DateTime!
}

input PhysicalQrCampaignLocationAttributes {
  location: String
  notes: String
}

"""Autogenerated return type of PhysicalQrCampaignLocationsCreate"""
type PhysicalQrCampaignLocationsCreatePayload {
  errors: [Error!]
  node: PhysicalQrCampaignLocation
}

"""Autogenerated return type of PhysicalQrCampaignLocationsDelete"""
type PhysicalQrCampaignLocationsDeletePayload {
  errors: [Error!]
  node: PhysicalQrCampaign
}

"""Autogenerated return type of PhysicalQrCampaignLocationsUpdate"""
type PhysicalQrCampaignLocationsUpdatePayload {
  errors: [Error!]
  node: PhysicalQrCampaign
}

"""Physical QR Campaign Result"""
type PhysicalQrCampaignResult implements Identifier & Timestamps {
  browser: String
  browserVersion: String
  createdAt: ISO8601DateTime!
  dataEntered: ISO8601DateTime
  hostname: String
  id: Int!
  ipAddress: String
  ipLocation: String
  mobile: Boolean!
  os: String
  physicalQrCampaignLocation: PhysicalQrCampaignLocation!
  platform: String
  qrCodeScanned: ISO8601DateTime
  updatedAt: ISO8601DateTime!
}

type PhysicalQrCampaignResultsCursor {
  nodes: [PhysicalQrCampaignResult!]!
  pagination: Pagination!
}

enum PhysicalQrCampaignResultsSortFields {
  IP_ADDRESS
  IP_LOCATION
  BROWSER
  BROWSER_VERSION
  HOSTNAME
  MOBILE
  OS
  PLATFORM
  QR_SCANNED
  DATA_ENTERED
}

"""Autogenerated return type of PhysicalQrCampaignsCreate"""
type PhysicalQrCampaignsCreatePayload {
  errors: [Error!]
  node: PhysicalQrCampaign
}

type PhysicalQrCampaignsCursor {
  nodes: [PhysicalQrCampaign!]!
  pagination: Pagination!
}

"""Autogenerated return type of PhysicalQrCampaignsDelete"""
type PhysicalQrCampaignsDeletePayload {
  errors: [Error!]
  node: PhysicalQrCampaign
}

"""Autogenerated return type of PhysicalQrCampaignsEndCampaign"""
type PhysicalQrCampaignsEndCampaignPayload {
  errors: [Error!]
  node: PhysicalQrCampaign
}

enum PhysicalQrCampaignsSortFields {
  NAME
  COMPLETED_AT
  STARTED_AT
}

"""Autogenerated return type of PhysicalQrCampaignsStartCampaign"""
type PhysicalQrCampaignsStartCampaignPayload {
  errors: [Error!]
  node: PhysicalQrCampaign
}

enum PhysicalQrCampaignStatuses {
  CREATED
  STARTED
  COMPLETED
}

"""Autogenerated return type of PhysicalQrCampaignsUpdate"""
type PhysicalQrCampaignsUpdatePayload {
  errors: [Error!]
  node: PhysicalQrCampaign
}

"""Email Templates for Physical QR"""
type PhysicalQrTemplate implements Identifier & Timestamps {
  archived: Boolean!
  contentHtml: String
  createdAt: ISO8601DateTime!
  id: Int!
  landingDomainId: Int
  landingPageId: Int
  languageCode: String
  markedAsUpdatedAt: ISO8601DateTime
  name: String
  rating: EmailTemplateDifficultyRatings
  templateTranslationUuid: String!
  topics: [TemplateTopic!]
  type: PhysicalQrTemplateTypes!
  updatedAt: ISO8601DateTime!
}

input PhysicalQrTemplateAttributes {
  name: String
  contentHtml: String!
  rating: EmailTemplateDifficultyRatings
  landingPageId: Int
  landingDomainId: Int
  languageCode: String
}

"""Autogenerated return type of PhysicalQrTemplatesCopy"""
type PhysicalQrTemplatesCopyPayload {
  errors: [Error!]
  nodes: [PhysicalQrTemplate!]
}

"""Autogenerated return type of PhysicalQrTemplatesCreate"""
type PhysicalQrTemplatesCreatePayload {
  errors: [Error!]
  node: PhysicalQrTemplate
}

type PhysicalQrTemplatesCursor {
  nodes: [PhysicalQrTemplate!]!
  pagination: Pagination!
}

enum PhysicalQrTemplateSortFields {
  NAME
  UPDATED
  DIFFICULTY
  TOPIC_NAME
}

"""Autogenerated return type of PhysicalQrTemplatesUpdate"""
type PhysicalQrTemplatesUpdatePayload {
  errors: [Error!]
  node: PhysicalQrTemplate
}

enum PhysicalQrTemplateTypes {
  PHYSICAL_QR
  PHYSICAL_QR_SYSTEM
}

"""Password IQ Pie Chart Data"""
type PieData {
  detected: Int!
  not_detected: Int!
}

type PiqDashboard {
  createdAt: ISO8601DateTime
  creator: User!
  id: Int!
  name: String!
  updatedAt: ISO8601DateTime
  widgets: [PiqDashboardWidget!]!
}

type PiqDashboardWidget {
  createdAt: ISO8601DateTime
  height: Int!
  id: ID
  piqWidgetConfiguration: PasswordIqWidgetConfigurations
  startColumn: Int!
  startRow: Int!
  updatedAt: ISO8601DateTime
  width: Int!
}

"""Password IQ Pie Chart Data"""
type PiqDataPoint {
  x: ISO8601Date!
  y: Int!
}

union PiqDownloadMetadata = PasswordIqCsvConfiguration | PasswordIqPdfConfiguration

"""Password IQ Event Type"""
type PiqEchelonEvent implements EventTypeInterface {
  description: String
  detectionName: PiqTimelineEventTypes!
  id: BigInt!
}

"""Password IQ User email"""
type PiqEmail {
  address: String!
}

"""Password IQ Event"""
type PiqEvent {
  detected: Boolean!
  detectionType: Detection!
  id: Int!
  note: PiqNote
  occurredAt: ISO8601Date!
  resolved: Boolean!
  status: EventStatuses!
}

"""Password IQ metadata for an event"""
type PiqMetadata {
  days: Int
  detected: Boolean!
  detection: String!
  initialScan: Boolean
}

"""Password IQ Event Note"""
type PiqNote {
  note: String!
}

"""Pagination Metadata for Password IQ Detection States"""
type PiqPagination {
  page: Int!
  pages: Int!
  per: Int!
  totalCount: Int!
}

input PiqPaginationAttributes {
  page: Int!
  per: Int!
}

input PiqPdf {
  dashboardId: Int
}

input PiqScheduleAttributes {
  startTime: String!
  weekdays: [Weekdays!]!
  reset: Boolean
}

"""Password IQ Pie Chart Data"""
type PiqSerie {
  data: [PiqDataPoint!]!
  name: String!
}

enum PiqTimelineEventTypes {
  piq_ad_user_des_only_encryption
  piq_ad_pw_weak
  piq_ad_pw_empty
  piq_ad_pw_shared
  piq_ad_pw_clear_text
  piq_ad_pw_not_reqd
  piq_ad_pw_never_expires
  piq_ad_user_uses_lm_hash
  piq_ad_user_aes_key_missing
  piq_ad_user_has_preauthentication
  piq_ad_pw_found_in_breach
}

"""Password IQ User"""
type PiqUser {
  emails: [PiqEmail!]!
  events: [PiqEvent!]!
  id: Int!
  kmsatId: Int
}

enum PiqUserTypes {
  KMSAT
  NON_KMSAT
  ALL
}

enum PiqWidget {
  PiqDetectionComparisonWidget
  PiqOvertimeWidget
  PiqUserListWidget
  PiqVarianceWidget
  PiqCountWidget
  PiqRedFlag
}

"""A PiqWidgetConfigurationGroup"""
type PiqWidgetConfigurationGroup {
  groupId: Int!
  id: Int!
}

type PiqWidgetsConfiguration {
  detection: DetectionTypes
  groups: [Group!]!
  page: Int
  per: Int
  search: String
  selectedDetections: [DetectionTypes!]
  sort: SortFields
  sortDirection: SortDirections
  timeframe: ReportTimeframe
  title: String
  type: PiqWidget!
  userType: PiqUserTypes
}

"""The Placeholder Account Settings"""
type Placeholder implements Identifier & Timestamps {
  autoPrependEmailBannerPhishing: AutoPrependEmailBannerTypes!
  autoPrependSubjectPrefixPhishing: AutoPrependSubjectPrefixTypes!
  createdAt: ISO8601DateTime!
  displayName: String
  emailBanner: String
  id: Int!
  nameFormat: NameFormatTypes!
  prtSenderEmail: String
  prtSenderName: String
  signatureBlock: String
  subjectPrefix: String
  updatedAt: ISO8601DateTime!
}

input PlaceholderSettingsAttributes {
  id: Int
  emailBanner: String
  autoPrependEmailBannerPhishing: AutoPrependEmailBannerTypes
  subjectPrefix: String
  autoPrependSubjectPrefixPhishing: AutoPrependSubjectPrefixTypes
  displayName: String
  nameFormat: NameFormatTypes
  signatureBlock: String
  prtSenderName: String
  prtSenderEmail: String
}

"""Autogenerated return type of PoliciesAccept"""
type PoliciesAcceptPayload {
  node: EnrollmentBasic
}

"""Autogenerated return type of PoliciesCreate"""
type PoliciesCreatePayload {
  errors: [Error!]
  node: Policy
}

type PoliciesCursor {
  nodes: [Policy!]!
  pagination: Pagination!
}

"""Autogenerated return type of PoliciesDelete"""
type PoliciesDeletePayload {
  errors: [Error!]
  node: Policy
}

enum PoliciesSortFields {
  ID
  STATUS
  TITLE
  UPDATED_AT
}

"""Autogenerated return type of PoliciesUpdateAcceptedPages"""
type PoliciesUpdateAcceptedPagesPayload {
  node: EnrollmentBasic
}

"""Autogenerated return type of PoliciesUpdateAssetId"""
type PoliciesUpdateAssetIdPayload {
  node: EnrollmentBasic
}

"""Autogenerated return type of PoliciesUpdatePagesViewed"""
type PoliciesUpdatePagesViewedPayload {
  node: EnrollmentBasic
}

"""Autogenerated return type of PoliciesUpdate"""
type PoliciesUpdatePayload {
  errors: [Error!]
  node: Policy
}

"""Autogenerated return type of PoliciesUpdateTotalTime"""
type PoliciesUpdateTotalTimePayload {
  node: EnrollmentBasic
}

"""Policy"""
type Policy implements Identifier & Timestamps {
  archived: Boolean
  assessmentType: AssessmentTypes
  asset(id: Int): PolicyAsset
  assetType: String!
  assets: [PolicyAsset!]!
  completionPercentage(trainingCampaignId: Int!): Int
  createdAt: ISO8601DateTime!
  defaultLanguage: Languages!
  description: String
  downloadable: Boolean!
  id: Int!
  isDeletable: Boolean!
  languagesCount: Int!
  minimumTime: Int
  pageCount: Int
  polymorphicId: String!
  publishedAt: ISO8601DateTime
  retired: Boolean
  retiringSoon: Boolean
  status: PolicyStatuses!
  title: String!
  translations: [Translation!]!
  type: PolicyTypes!
  updatedAt: ISO8601DateTime!
}

"""Policy Language Asset"""
type PolicyAsset implements Identifier & Timestamps {
  acceptanceRequirements: PolicyAssetAcceptances!
  acceptanceText: String!
  createdAt: ISO8601DateTime!
  documentPrompt: String
  file: PersistedFile
  id: Int!
  language: Languages!
  pageCount: Int
  pagePrompt: String
  title: String!
  type: PolicyTypes!
  updatedAt: ISO8601DateTime!
  url: String
}

enum PolicyAssetAcceptances {
  LAST_PAGE
  ALL_PAGES
}

input PolicyAssetAttributes {
  id: BigInt
  title: String!
  language: Languages!
  acceptanceRequirements: PolicyAssetAcceptances!
  acceptanceText: String!
  pagePrompt: String
  documentPrompt: String
  file: File
  url: String
  type: PolicyTypes!
  updatedAt: String
}

"""A basic policy asset for a trainee"""
type PolicyAssetBasic implements Identifier {
  acceptanceRequirements: PolicyAssetAcceptances!
  acceptanceText: String!
  documentPrompt: String
  id: Int!
  pageCount: Int
  pagePrompt: String
  title: String!
}

input PolicyAttributes {
  title: String!
  status: PolicyStatuses!
  minimumTime: Int
  downloadable: Boolean!
  description: String
  assets: [PolicyAssetAttributes!]!
  defaultLanguage: Languages!
  type: PolicyTypes!
}

"""A basic policy for a trainee"""
type PolicyBasic implements Identifier {
  asset(id: Int): PolicyAssetBasic
  downloadable: Boolean!
  id: Int!
  minimumTime: Int
  title: String!
}

"""Policy Enrollment"""
type PolicyEnrollment implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  documentAcknowledged: Boolean
  id: Int!
  pagesAcknowledged: [Int!]!
  pagesViewed: [Int!]!
  policyAssetId: Int
  updatedAt: ISO8601DateTime!
}

"""A basic policy enrollment for a trainee"""
type PolicyEnrollmentBasic implements Identifier {
  id: Int!
  pagesAcknowledged: [Int!]!
  pagesViewed: [Int!]!
  policyAssetId: Int
}

enum PolicyStatuses {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PolicyTypes {
  PDF
  URL
}

input PostTrainingArgument {
  bool: Booleans!
  event: PhishEvents!
  trainingEvent: TrainingEvents!
  courses: [TrainingCourseArgument!]!
}

type PostTrainingEvent implements Identifier {
  boolean: Booleans!
  courses: [Course!]!
  event: PhishEvents!
  id: Int!
  trainingEvent: TrainingEvents!
}

type PppDistributionData {
  csv: String!
  dataseries: [DataSeries!]!
  timeframe: ReportTimeframe
}

enum PublishedLanguages {
  EN_US
  AR
  MY_MM
  ZH_CN
  ZH_TW
  CS_CZ
  DA_DK
  NL_NL
  EN_AU
  EN_CA
  EN_GB
  FI_FI
  FR_CA
  FR_FR
  DE_DE
  EL_GR
  HE_IL
  HI_IN
  HU_HU
  ID_ID
  IT_IT
  JA_JP
  KO_KR
  MS_MY
  NO_NO
  PL_PL
  PT_BR
  PT_PT
  RO_RO
  RU_RU
  ES_419
  ES_ES
  SW_KE
  SV_SE
  TH_TH
  TR_TR
  UK_UA
  VI_VN
}

"""A Publisher"""
type Publisher {
  name: String!
}

"""Store Purchase Content Options Configuration"""
type PurchasedContentOptions {
  contentTheme: ContentTheme
  customTerms: [CustomTerm!]
  defaultCaptions: Boolean
  hiddenPages: [HiddenPage!]
  nonSkip: Boolean
  passingScore: Float
  referenceMaterialOrder: Int
  referenceMaterialUrl: String
  testOut: Boolean
  testoutPassingScore: Float
  updatedAt: String
}

input PurchasedContentOptionsAttributes {
  contentThemeId: Int
  nonSkip: Boolean
  passingScore: Float
  testoutPassingScore: Float
  updatedAt: String
  testOut: Boolean
  referenceMaterialUrl: String
  referenceMaterialOrder: Int
  defaultCaptions: Boolean
  customTermsAttributes: [CustomTermAttributes!]
  hiddenPagesAttributes: [HiddenPageAttributes!]
}

"""Purchased Course"""
type PurchasedCourse implements Identifier & Timestamps & StorePurchaseInterface {
  alternatives: [CourseAlternative!]!
  archived: Boolean
  assessment: Boolean
  assessmentType: AssessmentTypes
  assetType: String!
  beta: Boolean
  completionPercentage(trainingCampaignId: Int!): Int
  contentSource: String
  courseId: Int!
  createdAt: ISO8601DateTime!
  description: String
  duration: Int
  hidden: Boolean
  id: Int!
  policyLocation: String
  polymorphicId: String!
  published: Boolean
  publishedAt: ISO8601DateTime
  purchasedContentOptions: PurchasedContentOptions
  retired: Boolean
  retiringSoon: Boolean
  stats: PurchasedCourseStats!
  storeItem: StoreItemUnion
  storeItemType: String
  storeItemUuid: String!
  title: String!

  """'retiringSoon', 'beta', or null in this order of precedence"""
  trainingCampaignBadge: String
  trainingCampaigns: [TrainingCampaign!]
  updatedAt: ISO8601DateTime!
  uploaded: Boolean
  userHasToAcknowledgePolicy: Boolean
}

"""An unpaginated list of Purchased Courses"""
type PurchasedCourses {
  nodes: [PurchasedCourse!]!
}

type PurchasedCoursesCursor {
  nodes: [PurchasedCourse!]!
  pagination: Pagination!
}

"""Usage stats on a Purchased Course or ManagedStorePurchase"""
type PurchasedCourseStats {
  completeEnrollments: Int
  id: Int!
  incompleteEnrollments: Int
  lengthRating: Float
  overallRating: Float
  styleRating: Float
  totalEnrollments: Int
  valueRating: Float
}

type Query {
  """Find the current account"""
  account(id: Int): Account

  """Get assessment results for an account"""
  accountAssessmentResults(assessmentType: AssessmentTypes): AssessmentResults

  """Find an account for account settings"""
  accountSettings(accountId: Int): Account

  """Find all accounts for a partner"""
  accounts(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    partnerId: Int
    status: AccountStatuses
    billingType: AccountBillingTypes
    search: String
    archivedUsers: Boolean = false
    sortField: AccountSortFields
    sortDirection: SortDirections
    phishingEnabled: Boolean
    trainingEnabled: Boolean
    otherPartnersAccounts: AccountPartnerInclusions
    excludeAnonymized: Boolean
  ): AccountsCursor!

  """Find all allowed_domains for an account"""
  allowedDomains(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    accountId: Int
    includePending: Boolean
  ): AllowedDomainsCursor!

  """Get the DNS TXT Record to verify allowed domains for an account"""
  allowedDomainsDnsRecord: String!

  """An API token"""
  apiToken(id: Int): ApiToken

  """Validates an API token"""
  apiTokenValidator(key: String!, source: ApiScopes!): ApiTokenValidation

  """Paginated API tokens"""
  apiTokens(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
  ): ApiTokensCursor!

  """Retrieve ASAP Program and its tasks"""
  asapProgram: AsapProgram!

  """Get assessment domains"""
  assessmentDomains: [AssessmentDomain!]

  """List of assessment benchmarking data for industries"""
  assessmentIndustryBenchmarks(assessmentType: AssessmentTypes): [AssessmentIndustryBenchmark!]!

  """Get results for an assessment"""
  assessmentResults(campaignId: Int!, assessmentId: Int!): AssessmentResults

  """Get all possible attachment types"""
  attachmentTypes: [Attachment!]

  """
  List all available SKUs that can be added to a main Partner by a Site Admin
  """
  availablePartnerSkus: [PartnerPurchasedSku!]

  """
  List all available SKUs that can be added to an Account by a Site Admin
  """
  availableSkus: [AccountPurchasedSku!]

  """
  Returns a Callback Phishing Greeting (or Response!) Template ready to be previewed
  """
  callbackPhishingAudioTemplatePreview(uuid: String): CallbackPhishingGreetingTemplate

  """Find all CallbackPhishingPhoneNumbers"""
  callbackPhishingPhoneNumbers(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    search: String
    status: CallbackPhishingPhoneNumberStatuses
    sortField: CallbackPhishingPhoneNumberSortFields
    sortDirection: SortDirections
  ): CallbackPhishingPhoneNumbersCursor!

  """Returns a Callback Phishing Template ready to be previewed"""
  callbackPhishingTemplatePreview(uuid: String, landingPageUuid: String): CallbackPhishingTemplate

  """Find all Callback Phishing Templates"""
  callbackPhishingTemplates(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    topicId: Int
    topicIds: [Int!]
    type: CallbackPhishingTemplateTypes
    difficulty: [EmailTemplateDifficultyRatings!]
    search: String
    sortDirection: SortDirections
    sortField: EmailTemplateSortFields
    languages: [String!]
    translationUuids: [String!]
  ): CallbackPhishingTemplatesCursor!

  """List Notification Templates available in a campaign creation"""
  campaignNotificationTemplates: [NotificationTemplate!]!

  """
  Find all uploaded content for the current account to be displayed in the LX Library
  """
  ccmItems(per: Int = 25, page: Int = 1): [CcmItem!]

  """Get all categories"""
  cdrmsGetCategories(search: String, page: Int, pageSize: Int): CdrmsCategories

  """Get a specific category"""
  cdrmsGetCategory(id: String!): CdrmsCategory

  """Get a specific rule"""
  cdrmsGetRule(id: String!): CdrmsRule

  """Get OD version of a rule"""
  cdrmsGetRuleOd(id: String!): CdrmsRule

  """Get Production version of a rule"""
  cdrmsGetRuleProduction(id: String!): CdrmsRule

  """Get all rules"""
  cdrmsGetRules(status: String, search: String, page: Int, pageSize: Int, sortField: String, sortDesc: Boolean, vendorCodeName: [String!], category: [String!], topic: [String!]): CdrmsRules

  """Get a specific topic"""
  cdrmsGetTopic(id: String!): CdrmsTopic

  """Get all topics"""
  cdrmsGetTopics(search: String, page: Int, pageSize: Int): CdrmsTopics

  """Get a specific vendor"""
  cdrmsGetVendor(id: String!): CdrmsVendor

  """Get OD version of a vendor"""
  cdrmsGetVendorOd(id: String!): CdrmsVendor

  """Get Production version of a vendor"""
  cdrmsGetVendorProduction(id: String!): CdrmsVendor

  """Get all vendors"""
  cdrmsGetVendors(search: String, page: Int, pageSize: Int): CdrmsVendors

  """
  Return all the accounts underneath the partner that can see the piece of content (that dont already have it)
  """
  childrensLibraryAccounts(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    managedStorePurchaseId: Int!
  ): ChildrensLibraryAccountsCursor!

  """Find a content theme or return a new one for the account"""
  contentTheme(id: Int): ContentTheme

  """return paginated content themes for the account"""
  contentThemes(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
  ): ContentThemesCursor!

  """Give a live user count from a set of criterions"""
  criterionCount(groupId: Int!, criterions: [GroupCriterionAttributes!]!): Int

  """gets the current admin"""
  currentAdmin: SiteAdmin

  """gets the current_partner_admin"""
  currentPartnerAdmin: PartnerAdmin

  """Find current accounts sub or partners sub"""
  currentSubscription: Subscription

  """gets the current user"""
  currentUser: User

  """List Custom Event Types and Sources"""
  customEventTypesAndSources: CustomEventTypesAndSources!

  """Find all detections for an account"""
  detections(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    search: String
    from: ISO8601Date
    vendor: String
    rule: String
  ): DetectionsCursor!

  """Paginated Direct Reports"""
  directReports(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    userId: Int
  ): DirectReportsCursor!

  """Find the specified email_type DkimConfig for the current account"""
  dkimConfig(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    id: Int!
  ): DkimConfig

  """Find a DMI Config for the current account"""
  dmiConfig(id: Int!): DmiConfig

  """Find all DMI Configs for the current account"""
  dmiConfigs(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
  ): DmiConfigsCursor!

  """Find a single download"""
  download(id: Int!): Download

  """Return the count for unviewed downloads"""
  downloadUnviewedCount: Int!

  """Find current report config filters for an actor"""
  downloadsReportConfigFilters(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
  ): DownloadsReportConfigFiltersCursor!

  """Find an enrollment by id"""
  enrollment(id: Int!): Enrollment

  """Get a basic enrollment for a policy for a trainee"""
  enrollmentForPolicyBasic(id: Int): EnrollmentBasic

  """Returns the number of enrollment completions per platform"""
  enrollmentPlatforms: EnrollmentPlatforms

  """Get all event types from Echelon"""
  eventTypes: [Event!]

  """Get a Executive Reports dashboard definition"""
  execReportsDashboard(id: Int!): ExecReportsExecReportsDashboard!

  """Get your Executive Reports dashboard definition"""
  execReportsDashboards: ExecReportsExecReportsDashboards!

  """Phishing Activities Widget Data for Executive Reports"""
  execReportsPhishingActivities(title: String, description: String, aggregation: String, dateInterval: String, endDate: ISO8601DateTime, graphType: String, groupBy: String, includeArchivedUsers: Boolean, startDate: ISO8601DateTime, xAxis: String, legendPosition: String, topN: Int, groupIds: [Int!], overrideReportDateSettings: Boolean, overrideReportGroupSettings: Boolean, disableNonePlaceholderGroupBy: Boolean, disableNonePlaceholderCategory: Boolean, groupFiltersEnabled: Boolean): ExecReportsPhishingActivitiesData!

  """Risk Score Widget Data for Executive Reports"""
  execReportsRiskScore(title: String, description: String, aggregation: String, dateInterval: String, endDate: ISO8601DateTime, graphType: String, groupBy: String, includeArchivedUsers: Boolean, startDate: ISO8601DateTime, xAxis: String, legendPosition: String, topN: Int, groupIds: [Int!], overrideReportDateSettings: Boolean, overrideReportGroupSettings: Boolean, disableNonePlaceholderGroupBy: Boolean, disableNonePlaceholderCategory: Boolean, groupFiltersEnabled: Boolean): ExecReportsRiskScoreData!

  """Text Widget Data for Executive Reports"""
  execReportsText(title: String, description: String, content: String): ExecReportsTextData!

  """Title Widget Data for Executive Reports"""
  execReportsTitle(title: String, description: String, content: String, showLogo: Boolean): ExecReportsTitleData!

  """Phishing Activities Widget Data for Executive Reports"""
  execReportsTrainingActivities(title: String, description: String, aggregation: String, dateInterval: String, endDate: ISO8601DateTime, graphType: String, groupBy: String, includeArchivedUsers: Boolean, startDate: ISO8601DateTime, xAxis: String, legendPosition: String, topN: Int, groupIds: [Int!], overrideReportDateSettings: Boolean, overrideReportGroupSettings: Boolean, disableNonePlaceholderGroupBy: Boolean, disableNonePlaceholderCategory: Boolean, groupFiltersEnabled: Boolean): ExecReportsTrainingActivitiesData!

  """Fetch an accounts Free Test Emails"""
  freeTestEmails(type: FreeToolTypes!): [TestEmail!]!

  """Get data for a Free Tool Campaign"""
  freeToolCampaign(toolType: FreeToolTypes!, inactive: Boolean): FreeToolResult

  """Get data for the Free tools"""
  freeToolData(toolType: FreeToolTypes!): FreeToolData!

  """Get data for a Free Tool Report"""
  freeToolReport(freeToolType: FreeToolTypes!, payload: String!): FreeToolReportData

  """Fetch the Gmail token for a PAB"""
  gpabMagicMailToken(phishalertSettingId: Int!): String!

  """Return GRAPH PAB data for download"""
  graphSuccess(license: String!): PhishalertSetting

  """Find a group for an account"""
  group(id: Int!): Group

  """Find groups for an account"""
  groups(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    type: GroupTypes
    status: GroupStatuses
    search: String
    ids: [Int!]
    accountIds: [Int!]
    permissionScope: GroupPermissionScopes
    sortBy: GroupSortFields
    order: SortDirections
    includeAnonymizePhishing: Boolean
  ): GroupsCursor!

  """Find all industries"""
  industries(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
  ): IndustriesCursor!

  """List of benchmarking data for industries"""
  industryBenchmarks: [IndustryBenchmark!]!

  """Find an IP Range"""
  ipRange(id: Int!): IpRange

  """Find all ip ranges"""
  ipRanges(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    sortBy: IpRangesSortFields
    sortDirection: SortDirections
  ): IpRangesCursor!

  """Find a Landing Domain"""
  landingDomain(id: Int!): LandingDomain!

  """Find all landing domains"""
  landingDomains(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    status: ActiveStatuses
    search: String
    sortField: LandingDomainSortFields
    sortDirection: SortDirections
  ): LandingDomainsCursor!

  """Find a landing page"""
  landingPage(id: Int, uuid: String): LandingPage

  """Find all landing page categories"""
  landingPageCategories(type: LandingPageTypes, all: Boolean): LandingPageCategories!

  """Find all Landing Pages in draft state"""
  landingPageCounts(type: LandingPageTypes): LandingPageCounts!

  """Find all landing pages"""
  landingPages(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    categoryId: Int
    type: LandingPageTypes
    search: String
    sortDirection: SortDirections
    sortField: LandingPageSortFields
    drafts: Boolean
    ids: [Int!]
  ): LandingPagesCursor!

  """List available languages"""
  languages: [String!]

  """Fetch a LDAP Sync Reports"""
  ldapSyncReport(id: Int!): LdapSyncReport

  """Find all LDAP Sync Reports Item for a sync report"""
  ldapSyncReportItems(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    ldapSyncReportId: Int!
    type: LdapSyncReportItemTypes!
    action: LdapSyncReportItemActions!
    status: LdapSyncReportItemStatuses
  ): LdapSyncReportItemsCursor!

  """Find all LDAP Sync Reports for an account"""
  ldapSyncReports(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    filterSource: LdapSyncReportSourceFilters
  ): LdapSyncReportsCursor!

  """List available LX languages"""
  locales: Locales

  """Find a ManagedPhishingCampaign by ID"""
  managedPhishingCampaign(id: Int!): ManagedPhishingCampaign

  """Find all Managed Phishing Campaigns"""
  managedPhishingCampaigns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    filter: PhishingCampaignFilters
  ): ManagedPhishingCampaignsCursor!

  """Find a specific managed store purchase"""
  managedStorePurchase(id: Int!): ManagedStorePurchase!

  """Find all managed store purchases for a partner"""
  managedStorePurchases(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    uuids: [String!]
    withCcm: Boolean
    onlyTraining: Boolean
    sortDirection: SortDirections
    sortField: StorePurchaseSortFields
    storeItemTypes: [StoreItemTypes!]
    searchString: String
    showHidden: Boolean
  ): ManagedStorePurchasesCursor!

  """Find a managed training campaign by ID"""
  managedTrainingCampaign(id: Int!): ManagedTrainingCampaign

  """Find all Managed Training Campaigns"""
  managedTrainingCampaigns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    managedTrainingCampaignIds: [Int!]
    filter: TrainingCampaignFilters
    search: String
    sortField: TrainingCampaignSortFields
    sortDirection: SortDirections
  ): ManagedTrainingCampaignsCursor!

  """Find which accounts cannot see which pieces of content"""
  managedTrainingCourseCheck(accountIds: [Int!]!, managedStorePurchaseIds: [Int!]!): ManagedTrainingCourseCheckResult!

  """Manager Report for User"""
  managerReport(userId: Int): ManagerReport!

  """gets user messaging campaign by campaign id"""
  messageCampaign(
    """Unique identifier for the message."""
    id: Int!
  ): Campaign

  """message campaigns for the account"""
  messageCampaigns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
  ): CampaignsCursor!

  """Get message run by ID"""
  messageRun(
    """Unique identifier for the message run."""
    id: Int!
  ): Run

  """Gets user messages by run id"""
  messageRunRecipients(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false

    """Message Run ID"""
    runId: Int!

    """Status to select"""
    status: MessagesCampaignRecipientStatuses

    """Search by recipient details (full name, email)"""
    search: String
  ): RunRecipientsCursor!

  """All message runs for an account"""
  messageRuns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false

    """Search string for message run name."""
    query: String

    """Campaign type for message runs filter."""
    campaignType: MessagesCampaignTypes

    """Unique identifier for the message campaign id runs belong to"""
    campaignId: Int
  ): RunsCursor!

  """return modstore recommendations for the account"""
  modstoreRecommendations: ModstoreRecommendations!

  """Find all accounts for a partner"""
  multiInstanceAccounts(status: AccountStatuses, billingType: AccountBillingTypes, search: String, phishingEnabled: Boolean, otherPartnersAccounts: AccountPartnerInclusions, excludeAnonymized: Boolean): [MultiInstanceResult!]!

  """List Default Notification Template IDs"""
  notificationDefaultTemplates: [NotificationTemplateDefaults!]!

  """Find a notification template by id"""
  notificationTemplate(id: Int!): NotificationTemplate

  """Find all Notification Template Categories"""
  notificationTemplateCategories(type: NotificationTemplateCategoryTypes, showHidden: Boolean): NotificationTemplateCategories!

  """total count of visible templates"""
  notificationTemplateCount(type: NotificationTemplateTypes): Int!

  """Find all Notification Templates in draft state"""
  notificationTemplateDrafts(type: NotificationTemplateCategoryTypes!): NotificationTemplateDrafts!

  """Returns a Phishing Template ready to be previewed"""
  notificationTemplatePreview(emailTemplateUuid: String, id: Int): NotificationTemplate

  """List Notification Templates"""
  notificationTemplates(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    categoryIds: [Int!]
    type: NotificationTemplateTypes
    search: String
    sortDirection: SortDirections
    sortField: EmailTemplateSortFields
    showHidden: Boolean = false
    drafts: Boolean
    includeArchived: Boolean = false
  ): NotificationTemplatesCursor!

  """List of users who have at least one OutlookAddinActivity"""
  outlookAddinActivityUsers(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    accountId: Int
    search: String
    sortDirection: SortDirections
    sortField: OutlookAddinActivityUsersSortFields
    status: UserStatusFilters
    activityStatus: UserHasOutlookAddinActivityTypes
    activityType: OutlookAddinActivityActivityTypes
  ): OutlookAddinActivityUsersCursor!

  """Retrieve a list of files for a package"""
  packageFileList(enrollmentId: Int!, languageCode: String!): PackageFileList!

  """Find a Partner by ID"""
  partner(id: Int): Partner

  """Find a Partner Admin by ID"""
  partnerAdmin(id: Int!): PartnerAdmin

  """Find the current partner for partner settings"""
  partnerAdminSettings: PartnerAdmin

  """Find partner admins"""
  partnerAdmins(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    partnerId: Int
    search: String
    sortDirection: SortDirections
    sortField: PartnerAdminsSortFields
  ): PartnerAdminsCursor!

  """Get data for partners dashboard graphs"""
  partnerDashboardGraphs: JSON

  """Find the current partner "account" for partner settings"""
  partnerSettings: Partner

  """Find partners"""
  partners(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    partnerId: Int
    search: String
    partnerType: PartnerTypes
    sortDirection: SortDirections
    sortField: PartnersSortFields
  ): PartnersCursor!

  """Get Password IQ data stored in S3 for an audit log"""
  passwordIqAuditLogS3Data(key: String!): AuditLogS3Data!

  """Get Password IQ audit logs"""
  passwordIqAuditLogs(action: [String!], application: [String!], pagination: AuditLogsPaginationAttributes, product: [String!], sort: String, status: [String!], dateRange: AuditLogsDateRange): AuditLogData!

  """PIQ client installer link"""
  passwordIqClientPath: String!

  """Get a PIQ dashboard definition"""
  passwordIqDashboard(id: Int!): PiqDashboard!

  """Get your PIQ dashboard definition"""
  passwordIqDashboards: [PiqDashboard!]!

  """Detection Counts for Password IQ"""
  passwordIqDetectionCounts(groups: [Int!], userType: PiqUserTypes): DetectionCountData!

  """Pie Chart Data for Password IQ"""
  passwordIqGraph(detection: DetectionTypes, timeframe: ReportsTimeframe!, groups: [Int!], userType: PiqUserTypes): [PiqSerie!]!

  """Pie Chart Data for Password IQ"""
  passwordIqPie(detection: DetectionTypes, groups: [Int!], userType: PiqUserTypes): PieData!

  """Schedule Data for Password IQ"""
  passwordIqSchedule: Schedule!

  """User Detection States for Password IQ"""
  passwordIqUserStates(detection: [DetectionTypes!], userType: PiqUserTypes, sort: UserStatesSort, search: String, pagination: PiqPaginationAttributes!): UserStates!

  """Pie Chart Data for Password IQ"""
  passwordIqVariance(detection: DetectionTypes, groups: [Int!], timeframe: ReportsTimeframe!, userType: PiqUserTypes): [PiqSerie!]!

  """Fetch your Phish Alert Stats"""
  phishAlertStats: PhishAlertStats!

  """Find a Phish Domain"""
  phishDomain(id: Int!): PhishDomain!

  """Find all phishing domains"""
  phishDomains(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    status: ActiveStatuses
    domainType: PhishDomainTypes
    replyToEnabled: Boolean
    showHidden: Boolean
    search: String
    sortBy: PhishDomainSortFields
    sortDirection: SortDirections
  ): PhishDomainsCursor!

  """Returns all email addresses from PER for account"""
  phisherEmailAddresses: String!

  """Find a campaign by ID"""
  phishingCampaign(id: Int!): PhishingCampaign

  """Find phishing campaign non recipients by campaign_run_id"""
  phishingCampaignNonRecipients(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    runId: Int!
  ): PhishingCampaignNonRecipientsCursor!

  """Find a campaign recipient by ID"""
  phishingCampaignRecipient(campaignRunId: Int, id: Int!): PhishingCampaignRecipient

  """Find all the campaign recipients in a campaign_run"""
  phishingCampaignRecipients(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    campaignRunId: Int!
  ): PhishingCampaignRecipientsCursor!

  """Find a campaign run by ID"""
  phishingCampaignRun(id: Int!): PhishingCampaignRun

  """Find all campaign runs in account"""
  phishingCampaignRuns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    campaignId: Int
  ): PhishingCampaignRunsCursor!

  """Find all phishing campaigns"""
  phishingCampaigns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    filter: PhishingCampaignFilters
    type: PhishingCampaignTypes
    sortDirection: SortDirections
    sortField: PhishingCampaignSortFields
  ): PhishingCampaignsCursor!

  """List User Phishing Locales for the given Groups"""
  phishingLocalesForGroups(groupIds: [Int!]): JSON

  """Find a phishing campaign by ID"""
  phishingTemplate(id: Int!): PhishingTemplate

  """Find all Template Categories"""
  phishingTemplateCategories(type: PhishingTemplateCategoryTypes, showHidden: Boolean, all: Boolean): PhishingTemplateCategories!

  """Find a PhishingTemplateCategory by ID"""
  phishingTemplateCategory(id: Int!): PhishingTemplateCategory

  """
  Find Template Categories which contain translations for the requested language set
  """
  phishingTemplateCategoryRecommendations(languageCodes: [String!]!): [PhishingTemplateCategoryRecommendation!]!

  """total count of visible templates"""
  phishingTemplateCount(type: PhishingTemplateTypes): Int!

  """Find all Email Templates in draft state"""
  phishingTemplateDrafts(type: PhishingTemplateCategoryTypes!): PhishingTemplateDrafts!

  """Returns a Phishing Template ready to be previewed"""
  phishingTemplatePreview(id: Int, uuid: String, landingPageId: Int, landingPageUuid: String, prtSenderEmail: String, prtSenderName: String, freeToolType: FreeToolTypes): PhishingTemplate

  """List Email Templates"""
  phishingTemplates(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    categoryId: Int
    categoryIds: [Int!]
    topicId: Int
    topicIds: [Int!]
    type: PhishingTemplateTypes
    difficulty: [EmailTemplateDifficultyRatings!]
    search: String
    sortDirection: SortDirections
    sortField: EmailTemplateSortFields
    showHidden: Boolean = false
    showExcluded: Boolean = false
    drafts: Boolean
    languages: [String!]
    translationUuids: [String!]
  ): PhishingTemplatesCursor!

  """List Email Templates specifically for ASAP"""
  phishingTemplatesAsap(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
  ): PhishingTemplatesAsapCursor!

  """Find a Physical QR Campaign by ID"""
  physicalQrCampaign(id: Int!): PhysicalQrCampaign

  """Find a Physical QR Campaign by ID"""
  physicalQrCampaignLocation(physicalQrCampaignId: Int!, id: Int!): PhysicalQrCampaignLocation

  """Find all Physical QR Campaign Locations for a campaign"""
  physicalQrCampaignResults(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    physicalQrCampaignId: Int!
    physicalQrCampaignLocationId: Int
    sortField: PhysicalQrCampaignResultsSortFields
    sortDirection: SortDirections
  ): PhysicalQrCampaignResultsCursor!

  """Find all Physical QR Campaigns"""
  physicalQrCampaigns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    sortField: PhysicalQrCampaignsSortFields
    sortDirection: SortDirections
  ): PhysicalQrCampaignsCursor!

  """Find a Physical QR Template by ID"""
  physicalQrTemplate(id: Int!): PhysicalQrTemplate

  """Returns a Physical QR Template ready to be previewed"""
  physicalQrTemplatePreview(uuid: String, landingPageId: Int): PhysicalQrTemplate

  """Find all Physical QR Templates"""
  physicalQrTemplates(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    topicId: Int
    topicIds: [Int!]
    noDrafts: Boolean
    type: PhysicalQrTemplateTypes
    difficulty: [EmailTemplateDifficultyRatings!]
    search: String
    sortDirection: SortDirections
    sortField: PhysicalQrTemplateSortFields
    drafts: Boolean
    languages: [String!]
  ): PhysicalQrTemplatesCursor!

  """Find all your policies"""
  policies(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    search: String
    sortDirection: SortDirections
    sortField: PoliciesSortFields
    statuses: [PolicyStatuses!]
    ids: [Int!]
  ): PoliciesCursor!

  """Find a policy"""
  policy(id: Int!): Policy

  """Find a basic policy for a trainee"""
  policyBasic(id: Int!): PolicyBasic

  """Find a specific purchased course"""
  purchasedCourse(id: Int!): PurchasedCourse!

  """Find all your purchased courses"""
  purchasedCourses(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    uuids: [String!]
    purchasedCourseIds: [String!]
    archived: Boolean
    excludeHidden: Boolean = false

    """Purchased courses that content options were edited by users"""
    contentOptionsEdited: Boolean = false
    storeItemTypes: [StoreItemTypes!]
  ): PurchasedCoursesCursor!

  """
  Returns the options for the courses selector in the Training Quiz Report
  """
  purchasedCoursesWithInteractionsSelectQuery: PurchasedCourses!

  """Find all Report categories for an Account"""
  reportCategories(includeOthers: Boolean = false, includeEmpty: Boolean = true): ReportCategories!

  """Find downloads for an actor"""
  reportDownloads(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    reportTypes: [DownloadablesTypes!]
    groupIds: [Int]
    includeNaGroups: Boolean
    searchReportTypes: [DownloadablesTypes!]
    sortDirection: SortDirections
    sortField: DownloadsSortFields
    asPartner: Boolean
  ): ReportDownloadsCursor!

  """Find account groups with access to a given report"""
  reportPermissionGroups(reportPermissionName: ReportPermissionNames!): [Group!]

  """Return Active Rules Report"""
  reportsActiveRulesReport(payload: ReportsTypesActiveRulesReport!): ActiveRulesReport!

  """Return a distribution of assessment scores by knowledge area"""
  reportsAssessmentScoreByKnowledgeArea(payload: ReportsTypesAssessmentScoreByKnowledgeArea!): KnowledgeSeriesCollection!

  """Return a distribution of assessment scores by knowledge area"""
  reportsAssessmentScoreByKnowledgeAreaOverTime(payload: ReportsTypesAssessmentScoreByKnowledgeAreaOverTime!): KnowledgeTimeSeriesCollection!

  """Emails templates sent"""
  reportsEmailTemplatesSent: [PhishingTemplate!]!

  """Emails sent by group counts in the given timeframe"""
  reportsEmailsSentByGroup(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: ReportsTypesEmailsSentByGroup!
  ): EmailsSentByGroupCursor!

  """Emails sent by group counts in the given timeframe for CSV"""
  reportsEmailsSentByGroupCsv(payload: ReportsTypesEmailsSentByGroup!): EmailsSentCountsCsv!

  """Emails sent by template counts in the given timeframe"""
  reportsEmailsSentByTemplate(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: ReportsTypesEmailsSentByTemplate!
  ): EmailsSentByTemplateCursor!

  """Emails sent by template counts in the given timeframe for CSV"""
  reportsEmailsSentByTemplateCsv(payload: ReportsTypesEmailsSentByTemplate!): EmailsSentCountsByTemplateCsv!

  """Dataset for Failure Types by User Count"""
  reportsFailureTypeUserCounts(payload: ReportsTypesFailureTypeUserCounts!): FailureTypeByUserCount!

  """Return Failure Types by Campaigns"""
  reportsFailureTypesBarChart(payload: ReportsTypesFailureTypesBarChart!): FailureTypesBarChart!

  """Return failures by phishing templates count in the given timeframe"""
  reportsFailuresByPhishingTemplate(payload: ReportsTypesFailuresByPhishingTemplate!): FailuresByPhishingTemplate!

  """Return Global Phishing Aggregate Chart Data"""
  reportsGlobalPhishingAggregate(payload: ReportsTypesGlobalPhishingAggregate!): AggregateChart!

  """Return Global Phishing Aggregate Table Data"""
  reportsGlobalPhishingAggregateCsv(payload: ReportsTypesGlobalPhishingAggregate!): AggregateCsv!

  """Return Global Phishing Aggregate Table Data"""
  reportsGlobalPhishingAggregateTable(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: ReportsTypesGlobalPhishingAggregate!
  ): GlobalPhishingAggregateTableCursor!

  """Return Global Phishing Raw Bar Chart Data"""
  reportsGlobalPhishingRaw(payload: ReportsTypesGlobalPhishingRaw!): RawBarChart!

  """Return Global Phishing Raw Table Data"""
  reportsGlobalPhishingRawCsv(payload: ReportsTypesGlobalPhishingRaw!): RawCsv!

  """Return Global Phishing Raw Table Data"""
  reportsGlobalPhishingRawTable(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: ReportsTypesGlobalPhishingRaw!
  ): GlobalPhishingRawTableCursor!

  """Global Training Aggregate Chart Resolver"""
  reportsGlobalTrainingAggregate(payload: ReportsTypesGlobalTrainingAggregate!): GlobalTrainingAggregateChart!

  """Global Training Aggregate Chart Resolver"""
  reportsGlobalTrainingAggregateChart(payload: ReportsTypesGlobalTrainingAggregate!): GlobalTrainingAggregateChart!

  """Global Training Aggregate Csv Resolver"""
  reportsGlobalTrainingAggregateCsv(payload: ReportsTypesGlobalTrainingAggregate!): GlobalTrainingAggregateCsv!

  """Global Training Aggregate Table Resolver"""
  reportsGlobalTrainingAggregateTable(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: ReportsTypesGlobalTrainingAggregate!
  ): GlobalTrainingAggregateTableCursor!

  """Global Training Raw Chart Resolver"""
  reportsGlobalTrainingRaw(payload: ReportsTypesGlobalTrainingRaw!): GlobalTrainingRawChart!

  """Global Training Raw Chart Resolver"""
  reportsGlobalTrainingRawChart(payload: ReportsTypesGlobalTrainingRaw!): GlobalTrainingRawChart!

  """Global Training Raw Csv Resolver"""
  reportsGlobalTrainingRawCsv(payload: ReportsTypesGlobalTrainingRaw!): GlobalTrainingRawCsv!

  """Global Training Report GlobalTrainingRawTable Resolver"""
  reportsGlobalTrainingRawTable(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: ReportsTypesGlobalTrainingRaw!
  ): GlobalTrainingRawTableCursor!

  """Return the incomplete training users in the given timeframe"""
  reportsIncompleteTraining(payload: ReportsTypesIncompleteTraining!): UnphishedAndUntrainedUsers!

  """
  Returns the average PPP of users who received their first phishing test during the specified range
  """
  reportsInitialPpp(payload: ReportsTypesInitialPpp!): TimePointCollection!

  """Learner Platform Activity Raw Chart Resolver"""
  reportsLearnerPlatformRaw(payload: ReportsTypesLearnerPlatformRaw!): LearnerPlatformRawChart!

  """Learner Platform Activity Raw Chart Resolver"""
  reportsLearnerPlatformRawChart(payload: ReportsTypesLearnerPlatformRaw!): LearnerPlatformRawChart!

  """Learner Platform Activity Raw Csv Resolver"""
  reportsLearnerPlatformRawCsv(payload: ReportsTypesLearnerPlatformRaw!): LearnerPlatformRawCsv!

  """Learner Platform Activity Report LearnerPlatformRawTable Resolver"""
  reportsLearnerPlatformRawTable(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: ReportsTypesLearnerPlatformRaw!
  ): LearnerPlatformRawTableCursor!

  """Returns user location options for reports"""
  reportsLocationOptions: [String!]!

  """Returns the top 5 email templates that were clicked by this user"""
  reportsMostClickedEmailTemplates(payload: ReportsTypesMostClickedEmailTemplates!): [MostClickedEmailTemplate!]!

  """Return the unphished users in the given timeframe"""
  reportsNoTrainingAssigned(payload: ReportsTypesNoTrainingAssigned!): UnphishedAndUntrainedUsers!

  """
  Returns the average PPP of selected accounts and users during the specified range
  """
  reportsOverallPppByAccount(payload: ReportsTypesOverallPppByAccount!): TimeSeriesCollectionOverallPppWithCount!

  """
  Returns the average PPP of users in selected campaigns during the specified range
  """
  reportsOverallPppByCampaign(payload: ReportsTypesOverallPppByCampaign!): TimeSeriesCollectionOverallPppWithCount!

  """Returns the average PPP of selected users during the specified range"""
  reportsOverallPppByGroup(payload: ReportsTypesOverallPppByGroup!): TimeSeriesCollectionOverallPppWithCount!
  reportsOverallPppByGroupCard(payload: ReportsTypesOverallPppByGroup!): TimeSeriesCollectionOverallPppWithCount!

  """
  Returns the average PPP and training time of selected groups during the specified range
  """
  reportsOverallPppByTrainingTime(payload: ReportsTypesOverallPppByTrainingTime!): OverallPppByTrainingTimeSeries!

  """Returns the average PPP of a selected user during the specified range"""
  reportsOverallPppByUser(payload: ReportsTypesOverallPppByUser!): TimeSeriesCollectionOverallPppWithCount!

  """Return List of Users Latest Pab Activity"""
  reportsPabUserActivity(payload: ReportsTypesPabUserActivity!): PabUserActivity!

  """Return Overall Phish Failure Percentage"""
  reportsPhishFailurePercentageByCampaigns(payload: ReportsTypesPhishFailurePercentageByCampaigns!): TimeSeriesCollection!

  """Return Overall Phish Failure Percentage"""
  reportsPhishFailurePercentageOverall(payload: ReportsTypesPhishFailurePercentageOverall!): TimeSeriesCollection!

  """Return PST Report"""
  reportsPhishingSecurityTests(payload: ReportsTypesPhishingSecurityTests!): PhishingSecurityTests!

  """Return a distribution of user counts in all PPPs ranges"""
  reportsPppDistribution(payload: ReportsTypesPppDistribution!): PppDistributionData!

  """Return a distribution of user counts in all PPPs ranges"""
  reportsRiskScoreByAssessment(payload: ReportsTypesRiskScoreByAssessment!): DistributionCollection!

  """Return risk scores by selected groups"""
  reportsRiskScoreByGroup(payload: ReportsTypesRiskScoreByGroup!): TimeSeriesCollection!
  reportsRiskScoreByGroupCard(payload: ReportsTypesRiskScoreByGroup!): TimeSeriesCollection!

  """Return risk scores by selected locations"""
  reportsRiskScoreByLocation(payload: ReportsTypesRiskScoreByLocation!): TimeSeriesCollectionWithOptionalDate!

  """Return a distribution of user percentages in culture score ranges"""
  reportsRiskScoreBySurvey(payload: ReportsTypesRiskScoreBySurvey!): DistributionCollection!

  """Return risk scores by riskiest users for selected groups"""
  reportsRiskScoreByUser(payload: ReportsTypesRiskScoreByUser!): RiskScoreByUser!

  """Return risk score history for the selected user"""
  reportsRiskScoreHistoryByUser(payload: ReportsTypesRiskScoreHistoryByUser!): TimeSeriesCollection!

  """Security Coach Activity Aggregate RTC Aggregate Main Resolver"""
  reportsSecurityCoachActivityRtcAggregate(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: ReportsTypesSecurityCoachActivityRtcAggregate!
  ): SecurityCoachActivityRtcAggregateCursor!

  """Security Coach Activity RTC Aggregate Csv Resolver"""
  reportsSecurityCoachActivityRtcAggregateCsv(payload: ReportsTypesSecurityCoachActivityRtcAggregate!): SecurityCoachActivityRtcAggregateCsv!

  """Security Coach Activity RTC Raw Main Resolver"""
  reportsSecurityCoachActivityRtcRaw(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: ReportsTypesSecurityCoachActivityRtcRaw!
  ): SecurityCoachActivityRtcRawCursor!

  """Security Coach Activity RTC Raw Csv Resolver"""
  reportsSecurityCoachActivityRtcRawCsv(payload: ReportsTypesSecurityCoachActivityRtcRaw!): SecurityCoachActivityRtcRawCsv!

  """Security Coach Detection Rules Activity Aggregate Main Resolver"""
  reportsSecurityCoachDetectionRulesActivityAggregate(page: Int!, per: Int!, payload: ReportsTypesSecurityCoachDetectionRulesActivityAggregate!): AggregateResponse!

  """Security Coach Activity RTC Aggregate Csv Resolver"""
  reportsSecurityCoachDetectionRulesActivityAggregateCsv(payload: ReportsTypesSecurityCoachDetectionRulesActivityAggregate!): SecurityCoachDetectionRulesActivityAggregateCsv!

  """Security Coach Detection Rules Activity Raw Main Resolver"""
  reportsSecurityCoachDetectionRulesActivityRaw(page: Int!, per: Int!, payload: ReportsTypesSecurityCoachDetectionRulesActivityRaw!): RawResponse!

  """Security Coach Activity RTC Raw Csv Resolver"""
  reportsSecurityCoachDetectionRulesActivityRawCsv(payload: ReportsTypesSecurityCoachDetectionRulesActivityRaw!): SecurityCoachDetectionRulesActivityRawCsv!

  """Return a distribution of survey scores by dimension"""
  reportsSurveyScoreByDimension(payload: ReportsTypesSurveyScoreByDimension!): DimensionSeriesCollection!

  """Return a distribution of survey scores by dimension"""
  reportsSurveyScoreByDimensionOverTime(payload: ReportsTypesSurveyScoreByDimensionOverTime!): DimensionTimeSeriesCollection!

  """Return Training Campaign's Surveys"""
  reportsTrainingCampaignEnrollments(payload: ReportsTypesTrainingCampaignEnrollments!): TrainingCampaignEnrollments!

  """Return Training Campaign's Surveys"""
  reportsTrainingCampaignSurveys(payload: ReportsTypesTrainingCampaignSurveys!): TrainingCampaignSurveys!

  """Dataset for Training Comparison by Phish-Prone Percentage"""
  reportsTrainingComparisonByPpp(payload: ReportsTypesTrainingComparisonByPpp!): TrainingComparisonSeries!

  """Dataset for Training Comparison by Risk Score"""
  reportsTrainingComparisonByRiskScore(payload: ReportsTypesTrainingComparisonByRiskScore!): TrainingComparisonSeries!

  """Return total amount of trained hours in the given timeframe"""
  reportsTrainingHours(payload: ReportsTypesTrainingHours!): TimeSeriesCollection!

  """Return training interactions for a given purchased course and group"""
  reportsTrainingInteractionsByGroup(payload: ReportsTypesTrainingInteractionsByGroup!): [TrainingInteractionsByGroup!]

  """SCORM interactions in the given timeframe for CSV"""
  reportsTrainingInteractionsByGroupCsv(payload: ReportsTypesTrainingInteractionsByGroup!): TrainingInteractionsByGroupCsv!

  """Return training interactions for a given purchased course"""
  reportsTrainingInteractionsByPurchasedCourse(payload: ReportsTypesTrainingInteractionsByPurchasedCourse!): [TrainingInteractionsByPurchasedCourse!]

  """SCORM interactions in the given timeframe for CSV"""
  reportsTrainingInteractionsByPurchasedCourseCsv(payload: ReportsTypesTrainingInteractionsByPurchasedCourse!): TrainingInteractionsCsv!

  """Return the unphished users in the given timeframe"""
  reportsTrainingNotStarted(payload: ReportsTypesTrainingNotStarted!): UnphishedAndUntrainedUsers!

  """
  Return the total number of users under each training status, within each campaign, during the specified date range.
  """
  reportsTrainingStatusByCampaign(payload: ReportsTypesTrainingStatusByCampaign!): TrainingStatuses!
  reportsTrainingStatusByCampaignCard(payload: ReportsTypesTrainingStatusByCampaign!): TrainingStatuses!

  """
  Return the total number of users under each training status, within each course, during the specified date range.
  """
  reportsTrainingStatusByCourse(payload: ReportsTypesTrainingStatusByCourse!): TrainingStatuses!

  """
  Return the total number of users under each training status, within each group, during the specified date range.
  """
  reportsTrainingStatusByGroup(payload: ReportsTypesTrainingStatusByGroup!): TrainingStatuses!

  """
  Return the total number of users under each training status, within each group, during the specified date range.
  """
  reportsTrainingStatusesByCampaign(payload: ReportsTypesTrainingStatusesByCampaign!): TrainingStatusesByCampaign!

  """
  Return the average survey totals for each training campaign / content combo
  """
  reportsTrainingSurveysByCampaign(payload: ReportsTypesTrainingSurveysByCampaign!): ByCampaign!

  """Return the average survey totals for each content"""
  reportsTrainingSurveysByCourse(payload: ReportsTypesTrainingSurveysByCourse!): ByCourse!

  """Return the unphished users in the given timeframe"""
  reportsUnphishedUsers(payload: ReportsTypesUnphishedUsers!): UnphishedAndUntrainedUsers!

  """Return a distribution of user counts by Assessment score ranges"""
  reportsUserCountByAssessment(payload: ReportsTypesUserCountByAssessment!): DistributionCollection!

  """Return a distribution of user counts by Culture Survey score ranges"""
  reportsUserCountBySurvey(payload: ReportsTypesUserCountBySurvey!): DistributionCollection!

  """Return User Counts for the given timeframe"""
  reportsUserCounts(payload: ReportsTypesUserCounts!): TimeSeriesCollection!
  reportsUserCountsCard(payload: ReportsTypesUserCounts!): TimeSeriesCollection!

  """Return Changes in User Counts for the given timeframe"""
  reportsUserSignIns(payload: ReportsTypesUserSignIns!): UserSignIns!

  """Return List of Users"""
  reportsUsersList(payload: ReportsTypesUsersList!): UsersList!

  """Find a Restricted Domain"""
  restrictedDomain(id: Int!): RestrictedDomain!

  """Find all Restricted Domains"""
  restrictedDomains(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    search: String
    tld: Boolean
    sortDirection: SortDirections
    sortField: RestrictedDomainSortFields
  ): RestrictedDomainsCursor!

  """The Account Risk Score Stats"""
  riskScoreStats: RiskScoreStats!

  """Returns a saved report"""
  savedReport(id: Int!): SavedReport

  """Returns a collection of saved reports"""
  savedReports(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: SavedReportsList
  ): ListCursor!

  """Find current report config filters for an actor"""
  savedReportsFilters(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
  ): SavedReportsFiltersCursor!

  """Returns a scheduled report configuration"""
  scheduledReport(id: Int!): ScheduledReport

  """Returns a collection of scheduled reports"""
  scheduledReports(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: ScheduledReportsList
  ): ScheduledReportsListCursor!

  """Find current report config filters for an actor"""
  scheduledReportsFilters: ReportConfigFilters

  """Find a Second Chance Device for an account"""
  secondChanceDevice(id: Int!): SecondChanceDevice!

  """Find all Second Chance Devices for an account"""
  secondChanceDevices(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    search: String
    sortField: SecondChanceDeviceSortFields
    sortDirection: SortDirections
  ): SecondChanceDevicesCursor!

  """Find all Second Chance Domain Prompts"""
  secondChanceDomainPrompts(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    startDays: Int
  ): SecondChanceDomainPromptsCursor!

  """Find all Second Chance No Prompt Domains for an account"""
  secondChanceDomains(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    search: String
    sortField: SecondChanceDomainSortFields
    sortDirection: SortDirections
  ): SecondChanceDomainsCursor!

  """The Stats & info for the SC Overview Page"""
  secondChanceOverview: SecondChanceOverview!

  """Find all Second Chance PostActions for an account"""
  secondChancePostActions(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    search: String
    url: String
    userId: Int
    deviceId: Int
    sortField: SecondChancePostActionSortFields
    sortDirection: SortDirections
  ): SecondChancePostActionsCursor!

  """The data for the SC Settings Page"""
  secondChanceSettings: SecondChanceSettings!

  """Find a Second Chance URL for an account"""
  secondChanceUrl(id: String!): SecondChanceUrl!

  """Find all Second Chance URLs for an account"""
  secondChanceUrls(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    search: String
    startDays: Int
    sortField: SecondChanceUrlSortFields
    sortDirection: SortDirections
  ): SecondChanceUrlsCursor!

  """Find a Second Chance User for an account"""
  secondChanceUser(id: Int!): SecondChanceUser!

  """Find all Second Chance Users for an account"""
  secondChanceUsers(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    search: String
    sortField: SecondChanceUserSortFields
    sortDirection: SortDirections
  ): SecondChanceUsersCursor!

  """Retrieve api endpoints for a vendor"""
  securityCoachApiEndpoints(vendor: Vendors!): ApiEndpointData

  """Retrieve status and errors for all vendors"""
  securityCoachBulkVendorStatus: BulkVendorStatusData

  """Find a RTC Campaign"""
  securityCoachCampaign(id: Int!): SecurityCoachCampaign

  """Coaching Campaign Overview"""
  securityCoachCampaignOverview(timeframe: ReportsTimeframe!, id: Int!): CampaignOverview

  """List RTC Campaigns"""
  securityCoachCampaigns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    status: CampaignStatuses
  ): SecurityCoachCampaignsCursor!

  """Get total number of coaching campaigns"""
  securityCoachCampaignsCount: Int!

  """Get All Coaching Content"""
  securityCoachCatalogContent(topics: [String!], search: String, languages: [Int!], withAllSelectedLanguages: Boolean, locale: String): [StoreItem!]!

  """Get Relevant Coaching Content based on rule ids"""
  securityCoachContent(ruleIds: [String!]): [SecurityCoachContent!]!

  """Get Relevant Coaching Content"""
  securityCoachContentItem(uuid: String!): [SecurityCoachTranslatedSecurityTip!]!

  """
  Get the status details of an uploaded user mapping CSV for Security Coach
  """
  securityCoachCsvStatusDetails(id: ID!): CsvStatusDetails

  """A SecurityCoach custom notification"""
  securityCoachCustomNotification(id: Int!): CustomNotification!

  """List SecurityCoach custom notifications"""
  securityCoachCustomNotifications(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    payload: CustomNotificationsListAttributes!
  ): CustomNotificationsCursor!

  """A SecurityCoach custom translation"""
  securityCoachCustomTranslation(id: Int!, preview: Boolean): CustomTranslation!

  """Get the slack setup data"""
  securityCoachDeliverySlackSetup: SecurityCoachDeliverySlackSetup!

  """Get all registered slack workspaces"""
  securityCoachDeliverySlackWorkspaces: [Workspace!]!

  """Get all registered Teams Channels"""
  securityCoachDeliveryTeamsChannels: [Channel!]!

  """Get the teams setup data"""
  securityCoachDeliveryTeamsSetup: SecurityCoachDeliveryTeamsSetup!

  """List engine status"""
  securityCoachEngineStatus: EngineStatus

  """Export Unmapped Events to a CSV file"""
  securityCoachExportUnmappedEventsToCsv(vendorRegistrationId: Int!, vendorName: String!, startDate: String!, endDate: String!): ExportUnmappedEventsMessage!

  """Get List of Remap Jobs"""
  securityCoachGetListOfRemapJobs: [RemapJobs!]!

  """Get Organization Key for a vendor"""
  securityCoachGetOrganizationKey(vendor: Vendors!): OrganizationKey

  """Get Unmapped Data"""
  securityCoachGetUnmappedData(vendorId: Int!, startDate: String!, endDate: String!, pageSize: Int!, pageOffset: Int!): UnmappedData!

  """Get User Data for a Workspace"""
  securityCoachGetUserData(workspace: String!): UserData!

  """Get details and vendor types for all vendors."""
  securityCoachGetVendorDetails: [VendorDetails!]

  """List mapped users"""
  securityCoachListMappedUsers(search: String!, draw: Int!, start: Int!, length: Int!): MappedUsersList

  """List filter conditionals for a given filter field."""
  securityCoachListMappingRecommendationFilterConditions(field: String!): [MappingRecommendationFilterData!]

  """List available filter values for a given filter field"""
  securityCoachListMappingRecommendationFilterValues(field: String!): [MappingRecommendationFilterData!]

  """List teachable moment categories"""
  securityCoachListTeachableMomentCategories(vendorCodeName: [String!]): TeachableMomentCategoriesPayload

  """List teachable moment rules and their status (active, inactive)"""
  securityCoachListTeachableMomentRules(vendorCodeName: [Vendors!], categories: [String!], status: RuleStatus, ruleType: Tmr, sortBy: TmrSortFields, sortDirection: SortDirections, search: String, pageType: String, page: Int, pageSize: Int): TeachableMomentRulesPayload

  """List teachable moment system rules"""
  securityCoachListTeachableMomentSystemRules(vendorCodeName: [String!], categories: [String!], page: Int, pageSize: Int): TeachableMomentRulesPayload

  """List recommended mappings for users"""
  securityCoachListUserMappingRecommendation(showActive: Boolean!, showInactive: Boolean!, filterData: String!, search: String!, start: Int!, length: Int!): UserMappingRecommendationList

  """List mapping recommendation filter fields"""
  securityCoachListUserMappingRecommendationFilterFields: [MappingRecommendationFilterData!]

  """Retrieve list of uploaded CSVs for Security Coach"""
  securityCoachMappingCsvs(per: Int, page: Int): UploadedCsvs!

  """A SecurityCoach custom notification"""
  securityCoachNotificationPreview(id: String!): CustomTranslation!

  """Get all real time notification templates"""
  securityCoachNotifications: [SecurityCoachNotification!]!

  """Real-Time Coaching Overview"""
  securityCoachRealTimeCoachingOverview(timeframe: ReportsTimeframe!): RealTimeCoachingOverview

  """Real-Time Coaching summary"""
  securityCoachRealTimeCoachingSummary(timeframe: ReportsTimeframe!): RealTimeCoachingSummary

  """
  List teachable moment rules that are not part of an active campaign to recommend
  """
  securityCoachRecommendedTeachableMomentRules(vendorCodeName: Vendors): [RecommendedTeachableMomentRules!]

  """Active rules statistics"""
  securityCoachReportingActiveRulesStatistics(timeframe: ReportsTimeframe!): ActiveRulesStatistics

  """Top Risky Users"""
  securityCoachReportingActiveRulesTopRisky(timeframe: ReportsTimeframe!): [ActiveRulesTopRisky!]

  """Top Active Rules"""
  securityCoachReportingActiveRulesTopRules(timeframe: ReportsTimeframe!): [ActiveRulesTopRules!]

  """All Detection Statistic"""
  securityCoachReportingAllDetectionStatistics(timeframe: ReportsTimeframe!): AllDetectionStatistics

  """All Detections"""
  securityCoachReportingAllDetections(timeframe: ReportsTimeframe!, showMapped: Boolean!, showUnMapped: Boolean!, pageSize: Int!, pageNumber: Int!, vendorCodeNames: [String!], threatCategories: [String!], threatSeverities: [String!], ordering: Ordering): AllDetections

  """All Detections Summary"""
  securityCoachReportingAllDetectionsSummary(timeframe: ReportsTimeframe!, showMapped: Boolean!, showUnMapped: Boolean!, vendorCodeNames: [String!], threatCategories: [String!], threatSeverities: [String!], eventField: String): [AllDetectionsSummary!]

  """Employees Receiving Detections"""
  securityCoachReportingEmployeesReceivingDetections(type: String!, timeframe: ReportsTimeframe!): EmployeesReceivingDetections

  """Endpoint OS Contribution"""
  securityCoachReportingEndpointOsContribution(timeframe: ReportsTimeframe!): [OsDistribution!]

  """Endpoint Threat Severity"""
  securityCoachReportingEndpointThreatSeverity(timeframe: ReportsTimeframe!): [ThreatSeverity!]

  """Integration Detection Trend"""
  securityCoachReportingIntegrationDetectionTrend(timeframe: ReportsTimeframe!): IntegrationDetectionTrend

  """Integration summary"""
  securityCoachReportingIntegrationSummary(timeframe: ReportsTimeframe!, vendorCodeName: Vendors): IntegrationSummary

  """Log Type Trend"""
  securityCoachReportingLogTypeTrend(type: String!, timeframe: ReportsTimeframe!): [LogTypeTrend!]

  """Risk Statistic"""
  securityCoachReportingRiskStatistics(type: String!, timeframe: ReportsTimeframe!): RiskStatistics

  """Rules summary"""
  securityCoachReportingRulesSummary(timeframe: ReportsTimeframe!, vendorCodeName: Vendors): RulesSummary

  """Threat Category"""
  securityCoachReportingThreatCategory(type: String!, timeframe: ReportsTimeframe!): [ThreatCategory!]

  """Threat Distribution"""
  securityCoachReportingThreatDistribution(type: String!, timeframe: ReportsTimeframe!, percentage: Int!): ThreatDistribution

  """Get a list of custom mapping rules for Security Coach"""
  securityCoachRules: MappingRules!

  """Get rule options for custom mapping rules for Security Coach"""
  securityCoachRulesOptions(id: ID!): RuleOptionData!

  """
  Get a list of vendor keys available for custom mapping rules for Security Coach
  """
  securityCoachRulesVendors: [SelectOption!]!

  """List teachable moment system rule details"""
  securityCoachSystemWorkflowDetail(systemWorkflowId: String!): TeachableMomentRules

  """List tmrs for IDs provided"""
  securityCoachTeachableMomentRulesById(vendorCodeName: [String!], workflowIds: [String!]!): TeachableMomentRulesPayload

  """List threat rule dropdown conditions (IS, IS NOT, CONTAINS)"""
  securityCoachThreatRuleDropdownConditions(vendorCodeName: String!): [ThreatRuleDropdown!]

  """List threat rule dropdown left hand side values"""
  securityCoachThreatRuleDropdownLhs(vendorCodeName: String!, isVendorRequired: Boolean): [ThreatRuleDropdown!]

  """List threat rule dropdown right hand side values"""
  securityCoachThreatRuleDropdownRhs(vendorCodeName: [String!]!, lhsField: String!, search: String!): [ThreatRuleDropdown!]

  """List unlisted users"""
  securityCoachUnlistedUsers(timeframe: ReportsTimeframe!, filterData: [UnlistedUsersFilterData!]!, start: Int!, length: Int!): UnlistedUserPayload

  """Trend / count data for user discovery system"""
  securityCoachUserDiscoveryTrend(timeframe: ReportsTimeframe!): UserDiscoveryTrendData

  """Validate user mapping data"""
  securityCoachValidateUserMapping(checkDuplicateValue: String!, submitType: String!, editedUser: Int, editIdentifier: String!): ValidateUserMappingData

  """Retrieve activity status for all vendors"""
  securityCoachVendorActivity(hours: Int): VendorActivityData

  """Retrieve registration details and status for a vendor"""
  securityCoachVendorStatus(vendor: Vendors!, endpoint: String): VendorStatusData

  """Find a specific security role"""
  securityRole(id: Int!): SecurityRole!

  """Find all security roles for an account"""
  securityRoles(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    sortDescending: Boolean
    search: String
  ): SecurityRolesCursor!

  """Find a SiteAdmin by ID"""
  siteAdmin(id: Int): SiteAdmin

  """Get data for site admin dashboard graphs"""
  siteAdminDashboardGraphs: JSON

  """Find all Site Admins"""
  siteAdmins(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    search: String
    sortDirection: SortDirections
    sortField: SiteAdminsSortFields
  ): SiteAdminsCursor!

  """Fetch Site Settings"""
  siteSettings: SiteSettings!

  """Find a store purchase"""
  storePurchase(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    id: Int!
  ): StorePurchase

  """Find all your store purchases"""
  storePurchases(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    accountId: Int
    uuids: [String!]
    withCcm: Boolean
    sortDirection: SortDirections
    sortField: StorePurchaseSortFields
    storeItemTypes: [StoreItemTypes!]
    searchString: String
    showHidden: Boolean
  ): StorePurchasesCursor!

  """Find a subscription"""
  subscription(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    id: Int!
  ): Subscription

  """Find all subscriptions"""
  subscriptions(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    onlyActive: Boolean
  ): SubscriptionsCursor!

  """Find a PhishingTemplateCategory by ID"""
  templateCategory(id: Int!): PhishingTemplateCategory

  """Find all Template Languages"""
  templateLanguages(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    types: [EmailTemplateTypes!]
  ): TemplateLanguagesCursor!

  """Find all Template Topics"""
  templateTopics(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1
    all: Boolean
    types: [TemplateTopicTypes!]
  ): TemplateTopicsCursor!

  """Timeframe"""
  timeframe(timeframe: ReportsTimeframe!): ReportTimeframe!

  """Find a training campaign by ID"""
  trainingCampaign(id: Int!): TrainingCampaign

  """Plot users completion data for a campaign"""
  trainingCampaignCompletionGraph(id: Int!, archived: Boolean, completed: Boolean): [TimeData!]

  """Find all training campaign course surveys"""
  trainingCampaignSurveys(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    id: Int!
  ): TrainingCampaignSurveysCursor!

  """Find all users withing a training campaign"""
  trainingCampaignUsers(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    trainingCampaignId: Int!
    search: String
    sortDirection: SortDirections
    sortField: TrainingCampaignUsersSortFields
    scope: EnrollmentScopes
    asset: TrainingAsset
    includeArchived: Boolean
    userId: Int
  ): TrainingCampaignUsersCursor!

  """Find all training campaign"""
  trainingCampaigns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    trainingCampaignIds: [Int!]
    accountId: Int
    filter: TrainingCampaignFilters
    statuses: [TrainingCampaignStatuses!]
    includeDeleted: Boolean
    search: String
    sortField: TrainingCampaignSortFields
    sortDirection: SortDirections
  ): TrainingCampaignsCursor!

  """Find users who match the desired training report"""
  trainingReport(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    report: TrainingReportTypes!
    startDate: ISO8601Date!
    endDate: ISO8601Date!
    courses: [String!]!
    groups: [Int!]
    includeArchived: Boolean
  ): TrainingReportCursor!

  """Find a USB campaign by ID"""
  usbCampaign(id: Int!): UsbCampaign

  """Find all USB campaigns"""
  usbCampaigns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    ust: Boolean
  ): UsbCampaignsCursor!

  """Find a single user"""
  user(id: Int!): User

  """Fetch User Event API keys"""
  userEventApiKeys: [Key!]!

  """Fetch User Event API usage statistics"""
  userEventApiStats: Stats!

  """Fetch User Event API statuses"""
  userEventApiStatuses(page: Int, per: Int): Statuses!

  """Return the current user preference"""
  userPreference: UserSettingsPreferences!

  """Find users who match the desired user report"""
  userReport(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    report: UserReportTypes!
    includeArchived: Boolean
  ): UserReportCursor!

  """User Timeline"""
  userTimeline(eventQuery: EventQueryArguments!): TimelineEvents!

  """Find Training Campaigns for a given user"""
  userTrainingCampaigns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    userId: Int!
  ): UserTrainingCampaignsCursor!

  """Find all users for an account"""
  users(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    accountIds: [Int!]
    status: UserStatusFilters
    type: UserTypeFilters
    search: String
    searchTypes: [UserSearchTypes!]
    sortBy: UserSortFields
    sortDirection: SortDirections
    group: Int
    filterGroups: [Int!]
    filterNoGroups: Boolean
    permissionScope: GroupPermissionScopes
  ): UsersCursor!

  """Preview data for a potential merge users action"""
  usersMergePreview(targetUserId: Int!, mergeUserId: Int!): UsersMergePreview!

  """Find a vishing campaign by ID"""
  vishingCampaign(id: Int!): VishingCampaign

  """Find a vishing campaign's user enrollments"""
  vishingCampaignUsers(
    per: Int!
    page: Int!

    """Flag to request all items at once."""
    all: Boolean = false
    id: Int!
    scope: VishingCampaignUserStatuses
  ): VishingCampaignUsersCursor!

  """Find all vishing campaigns"""
  vishingCampaigns(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
    filter: VishingCampaignFilters
    sortDirection: SortDirections
    sortField: VishingCampaignsSortFields
    isOverview: Boolean
  ): VishingCampaignsCursor!

  """Find overview of all vishing campaigns call statuses"""
  vishingCampaignsOverviewCallStatuses: VishingCampaignsRecipientsCallStatuses

  """Find overview of all vishing campaign(s) status totals"""
  vishingCampaignsOverviewStatuses: VishingCampaignsStatuses

  """Find all vishing languages"""
  vishingLanguages(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1

    """Flag to request all items at once."""
    all: Boolean = false
  ): VishingLanguagesCursor!

  """Find a vishing template"""
  vishingTemplate(id: Int!): VishingTemplate

  """Find all Vishing template categories"""
  vishingTemplateCategories(type: VishingTemplateTypes, all: Boolean): VishingTemplateCategories!

  """Find all vishing template"""
  vishingTemplates(
    """Number of items in each page. Minimum 25 items/page."""
    per: Int = 25

    """The page number you want to fetch."""
    page: Int = 1
    all: Boolean
    type: VishingTemplateTypes
    categoryId: [String!]
    sort: VishingTemplateSortAttributes
    search: String
  ): VishingTemplatesCursor!

  """Lists a paginated set of webhooks"""
  webhooks: [Webhook!]
}

type Range {
  endDate: ISO8601Date
  startDate: ISO8601Date
}

enum RangeTypes {
  AFTER
  BEFORE
}

type RawBarChart {
  series: [RawBarChartSeries!]
  timeframe: ReportTimeframe
}

type RawBarChartSeries {
  data: [RawBarChartSeriesData!]
  date: ISO8601Date
  timeframe: ReportTimeframe
}

type RawBarChartSeriesData {
  timeframe: ReportTimeframe
  totalDelivered: Int
  totalFailed: Int
  totalReported: Int
}

type RawColumns {
  detectionColumns: [ReportsSecurityCoachActivityRtcRawDetectionColumns!]
  rtcCampaignColumns: [ReportsSecurityCoachActivityRtcRawRtcCampaignColumns!]
  timeframe: ReportTimeframe
  userColumns: [ReportsUserColumns!]
  userIdpDataColumns: [ReportsUserIdpDataColumns!]
}

type RawCsv {
  csv: String!
  timeframe: ReportTimeframe
}

type RawData {
  categories: [String!]
  id: String
  modified: ISO8601DateTime
  riskLevel: TmrRiskLevels
  sabUser: Int
  user: User
  vendorCodeName: String
  workflowDescription: String
  workflowName: String
}

type RawDocs {
  profile: SlackProfile
}

type RawResponse {
  columns: SecurityCoachDetectionRulesActivityRawColumns
  count: Int!
  next: String
  pageSize: Int!
  pagination: Pagination!
  previous: String
  results: [RawData!]!
  timeframe: ReportTimeframe!
  totalPages: Int!
}

type RealTimeCoachingOverview {
  campaignCounts: [CampaignCount!]
  coachingDelivered: Int
  detectionData: [DetectionData!]
  newUsersCoached: Int
  repeatedOffenders: Int
  riskiestGroups: [TopRiskyGroups!]
  riskiestUsers: [TopRiskyUsers!]
  totalUsersCoached: Int
}

type RealTimeCoachingSummary {
  coachingDelivered: Int
  coachingTrends: [RealTimeCoachingTrend!]
  currentOpportunities: Int
  riskyUsersPercentage: Float
}

type RealTimeCoachingTrend {
  count: Int
  date: ISO8601Date
}

"""A message recipient"""
type Recipient implements Identifier & Timestamps {
  campaign: Campaign!
  createdAt: ISO8601DateTime!
  id: Int!
  readAt: ISO8601DateTime
  status: MessagesCampaignRecipientStatuses!
  updatedAt: ISO8601DateTime!
  user: User!
}

type RecommendedTeachableMomentRules {
  riskLevelScore: Int
  rules: [TeachableMomentRules!]
  slug: String
}

type RedFlag {
  configurationGroups: [PiqWidgetConfigurationGroup!]!
  detection: DetectionTypes!
  groups: [Group!]!
  overtimeTimeframe: ReportTimeframe
  timeframe: ReportTimeframe
  title: String
  type: PiqWidget!
  userType: PiqUserTypes
  varianceTimeframe: ReportTimeframe
}

type Registration {
  id: Int!
}

type Relative {
  rangeType: RangeTypes!
  unit: DateUnits!
  value: Int!
}

type RemapJobCreatedMessage {
  jobId: String
  message: String
}

type RemapJobs {
  createdDate: String
  endDate: String
  jobId: String
  orgId: Int
  startDate: String
  status: String
  vendorCodeName: String
}

"""A reply email"""
type ReplyContent {
  attachments: [String!]
  contentHtml: String!
  downloadUrl: String
  from: String
  replyTo: [String!]
  subject: String
}

"""Report download"""
type Report implements ReportConfigurable {
  configuration: Configurations!
  createdAt: ISO8601DateTime!
  id: Int!
  impersonatingUser: User
  sharedBy: String
  type: DownloadablesTypes!
  updatedAt: ISO8601DateTime!
}

"""An unpaginated list of Report Categories"""
type ReportCategories {
  draftsTemplateCount: Int!
  nodes: [ReportCategory!]!
}

"""Saved Report Categories"""
type ReportCategory implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  name: String!
  ordering: Int!
  reportCount: Int!
  updatedAt: ISO8601DateTime!
}

enum ReportConfigCategories {
  ACCOUNT_PHISH_FAILURE_PERCENTAGE
  ACCOUNT_PHISH_PRONE_PERCENTAGE
  ACCOUNT_REPORT_CARD
  CULTURE_SURVEY_REPORTS
  EMAILS_SENT
  FAILURE_TYPES
  FAILURES_BY_PHISHING_TEMPLATE
  GLOBAL_PHISHING
  GLOBAL_TRAINING
  KNOWLEDGE_ASSESSMENT_REPORTS
  LEARNER_PLATFORM
  OVERALL_USER_COUNTS
  PHISH_FAILURE_PERCENTAGE
  PHISH_PRONE_PERCENTAGE
  PHISH_PRONE_PERCENTAGE_BY_USER_COUNT
  REPORT_CARDS
  RISK_SCORE
  SECURITY_COACH_ACTIVITY_RTC
  SECURITY_COACH_DETECTION_RULES_ACTIVITY
  TEMPLATE_FAILURES
  TRAINING_COMPARISON
  TRAINING_COVERAGE
  TRAINING_HOURS
  TRAINING_INTERACTIONS
  TRAINING_STATUS
  TRAINING_STATUSES_BY_CAMPAIGN
  TRAINING_SURVEYS
  USER_COUNT_BY_PHISH_PRONE_PERCENTAGE
  USER_LISTINGS
  EXEC_REPORTS
}

"""Report Config Filters"""
type ReportConfigFilters {
  accounts: [Account!]!
  categories: [ReportConfigCategories!]!
  configs: [Report!]!
  groups: [Group!]!
}

"""Fields for records that have report configurations"""
interface ReportConfigurable {
  configuration: Configurations!
  createdAt: ISO8601DateTime!
  id: Int!
  type: DownloadablesTypes!
  updatedAt: ISO8601DateTime!
}

type ReportDownloadsCursor {
  nodes: [Download!]!
  pagination: Pagination!
}

enum ReportFrequencies {
  ONETIME
  WEEK
  MONTH
  QUARTER
  ANNUAL
}

enum ReportPermissionNames {
  reports_phish_prone_percentage
  reports_failure_types
  reports_phish_failure_percentage
  reports_email_templates_sent
  reports_failures_by_phishing_template
  reports_phishing_activity
  reports_phishing_results_by_user
  reports_training_activity
  reports_training_status_overview
  reports_training_status_by_campaign
  reports_training_comparison
  reports_training_hours
  reports_training_content_survey
  reports_learner_platform
  reports_quiz_interactions
  reports_risk_score
  reports_group_and_user_cards
  reports_security_awareness_proficiency_assessment
  reports_security_culture_survey
  reports_unphished_and_untrained_user
  reports_user_count_and_login
  reports_real_time_coaching_activity
  reports_detection_rules_activity
}

type ReportsConfigurationsAccountReportCard {
  account: SnapshotReference!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsActiveRulesReport {
  from: ISO8601Date
  rule: String
  search: String
  vendor: String
}

type ReportsConfigurationsAssessmentScoreByKnowledgeArea {
  groups: [SnapshotReference!]!
  knowledgeAreas: [KnowledgeAreas!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsAssessmentScoreByKnowledgeAreaOverTime {
  groups: [SnapshotReference!]!
  knowledgeAreas: [KnowledgeAreas!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsEmailsSentByGroup {
  allUsers: Boolean
  groups: [SnapshotReference!]!
  sortDirection: SortDirections
  sortField: ReportsEmailsSentByTemplateSortFields
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsEmailsSentByTemplate {
  emailTemplates: [SnapshotReference!]
  sortDirection: SortDirections
  sortField: ReportsEmailsSentByTemplateSortFields
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsFailuresByPhishingTemplate {
  campaignType: PhishingCampaignTypes
  campaigns: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsFailureTypesBarChart {
  campaignType: PhishingCampaignTypes
  campaigns: [SnapshotReference!]!
  groups: [SnapshotReference!]!
  industryPpp: Float
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsFailureTypeUserCounts {
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsGlobalPhishingAggregate {
  accounts: [SnapshotReference!]!
  attackVectors: [ReportsPhishingAttackVectors!]
  campaignType: PhishingCampaignTypes
  campaigns: [SnapshotReference!]!
  columns: GlobalPhishingAggregateColumns
  excludeGroups: [SnapshotReference!]!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
  userStatus: UserStatusFilters!
}

type ReportsConfigurationsGlobalPhishingRaw {
  accounts: [SnapshotReference!]!
  attackVectors: [ReportsPhishingAttackVectors!]
  campaignType: PhishingCampaignTypes
  campaigns: [SnapshotReference!]!
  columns: GlobalPhishingRawColumns
  excludeGroups: [SnapshotReference!]!
  groups: [SnapshotReference!]!
  outcomeType: ReportsPhishingOutcomeTypes
  timeframe: ReportTimeframe!
  userStatus: UserStatusFilters!
}

type ReportsConfigurationsGlobalTrainingAggregate {
  accounts: [SnapshotReference!]!
  columns: GlobalTrainingAggregateColumns
  contentTypes: [ReportsStoreItemTypes!]
  enrollmentStatuses: [EnrollmentStatuses!]
  enrollmentStatusesCriteria: ReportsEnrollmentStatusesCriteria!
  excludeGroups: [SnapshotReference!]!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
  trainingCampaigns: [SnapshotReference!]!
  trainingCampaignsCriteria: ReportsTrainingCampaignsCriteria!
  userStatus: UserStatusFilters!
}

type ReportsConfigurationsGlobalTrainingRaw {
  accounts: [SnapshotReference!]!
  columns: GlobalTrainingRawColumns
  contentTypes: [ReportsStoreItemTypes!]
  enrollmentStatuses: [EnrollmentStatuses!]
  enrollmentStatusesCriteria: ReportsEnrollmentStatusesCriteria!
  excludeGroups: [SnapshotReference!]!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
  trainingCampaigns: [SnapshotReference!]!
  trainingCampaignsCriteria: ReportsTrainingCampaignsCriteria!
  userStatus: UserStatusFilters!
}

type ReportsConfigurationsGroupReportCard {
  group: SnapshotReference!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsIncompleteTraining {
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsInitialPpp {
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsLearnerPlatformRaw {
  accounts: [SnapshotReference!]!
  columns: LearnerPlatformRawColumns!
  contentTypes: [ReportsStoreItemTypes!]
  enrollmentPlatform: EnrollmentPlatformTypes
  excludeGroups: [SnapshotReference!]!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
  trainingCampaigns: [SnapshotReference!]!
  trainingCampaignsCriteria: ReportsTrainingCampaignsCriteria!
  userStatus: UserStatusFilters!
}

type ReportsConfigurationsNoTrainingAssigned {
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsOverallPppByAccount {
  accounts: [SnapshotReference!]!
  combined: Boolean!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsOverallPppByCampaign {
  campaignType: PhishingCampaignTypes
  campaigns: [SnapshotReference!]!
  combined: Boolean!
  groups: [SnapshotReference!]!
  industryPpp: Float
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsOverallPppByGroup {
  groups: [SnapshotReference!]!
  industryPpp: Float
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsOverallPppByTrainingTime {
  accounts: [SnapshotReference!]!
  combined: Boolean!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsPabUserActivity {
  activityStatus: UserHasOutlookAddinActivityTypes
  activityType: OutlookAddinActivityActivityTypes
  search: String
  userStatus: UserStatusFilters!
}

type ReportsConfigurationsPhishFailurePercentageByCampaigns {
  campaignType: PhishingCampaignTypes
  campaigns: [SnapshotReference!]!
  combined: Boolean!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsPhishFailurePercentageOverall {
  accounts: [SnapshotReference!]!
  combined: Boolean!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsPhishingSecurityTests {
  campaignRuns: [PhishingCampaignRun!]!
  comparison: String
  grouping: String
  groups: [SnapshotReference!]!
  includeNonFailures: Boolean
  includePhishFlipCampaigns: String
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsPppDistribution {
  groups: [SnapshotReference!]!
}

type ReportsConfigurationsRiskScoreByAssessment {
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsRiskScoreByGroup {
  accounts: [SnapshotReference!]!
  combined: Boolean!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsRiskScoreByLocation {
  locations: [Location!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsRiskScoreBySurvey {
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsRiskScoreByUser {
  accounts: [SnapshotReference!]!
  combined: Boolean!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsSecurityCoachActivityRtcAggregate {
  columns: AggregateColumns
  deliveryMethods: [DetectionDeliveryMethods!]!
  detectionCount: DetectionCountFilters!
  groups: [SnapshotReference!]!
  newUsersCoached: Boolean!
  rtcCampaigns: [SnapshotReference!]!
  timeframe: ReportTimeframe!
  userStatus: UserStatusFilters!
}

type ReportsConfigurationsSecurityCoachActivityRtcRaw {
  columns: RawColumns
  deliveryMethods: [DetectionDeliveryMethods!]!
  groups: [SnapshotReference!]!
  rtcCampaigns: [SnapshotReference!]!
  timeframe: ReportTimeframe!
  userStatus: UserStatusFilters!
}

type ReportsConfigurationsSecurityCoachDetectionRulesActivityAggregate {
  columns: SecurityCoachDetectionRulesActivityAggregateColumns
  detectionRules: [String!]!
  detectionRulesCategory: [String!]!
  ruleDetectionCount: RuleDetectionCountFilters!
  timeframe: ReportTimeframe!
  vendors: [Vendors!]!
}

type ReportsConfigurationsSecurityCoachDetectionRulesActivityRaw {
  columns: SecurityCoachDetectionRulesActivityRawColumns
  detectionRules: [String!]!
  detectionRulesCategory: [String!]!
  riskLevels: [TmrRiskLevels!]!
  timeframe: ReportTimeframe!
  vendors: [Vendors!]!
}

type ReportsConfigurationsSurveyScoreByDimension {
  dimensions: [SurveyDimensions!]!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsSurveyScoreByDimensionOverTime {
  dimensions: [SurveyDimensions!]!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsTrainingCampaignEnrollments {
  asset: EnrollmentItem
  includeArchived: Boolean!
  scope: EnrollmentScopes
  search: String
  trainingCampaign: TrainingCampaign!
}

type ReportsConfigurationsTrainingCampaignSurveys {
  notUsed: DownloadablesCategories
  trainingCampaign: TrainingCampaign!
}

type ReportsConfigurationsTrainingComparisonByPpp {
  accounts: [SnapshotReference!]!
  combined: Boolean!
  groups: [SnapshotReference!]!
}

type ReportsConfigurationsTrainingComparisonByRiskScore {
  accounts: [SnapshotReference!]!
  combined: Boolean!
  groups: [SnapshotReference!]!
}

type ReportsConfigurationsTrainingHours {
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsTrainingInteractionsByGroup {
  groups: [SnapshotReference!]!
  purchasedCourses: [Int!]!
  sortDirection: SortDirections!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsTrainingInteractionsByPurchasedCourse {
  purchasedCourses: [Int!]!
  sortDirection: SortDirections!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsTrainingNotStarted {
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsTrainingStatusByCampaign {
  accounts: [SnapshotReference!]!
  timeframe: ReportTimeframe!
  trainingCampaigns: [SnapshotReference!]!
}

type ReportsConfigurationsTrainingStatusByCourse {
  accounts: [SnapshotReference!]!
  timeframe: ReportTimeframe!
  trainingCampaigns: [SnapshotReference!]!
}

type ReportsConfigurationsTrainingStatusByGroup {
  accounts: [SnapshotReference!]!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsTrainingStatusesByCampaign {
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
  trainingCampaigns: [SnapshotReference!]!
}

type ReportsConfigurationsTrainingSurveysByCampaign {
  timeframe: ReportTimeframe!
  trainingCampaigns: [SnapshotReference!]!
}

type ReportsConfigurationsTrainingSurveysByCourse {
  content: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsUnphishedUsers {
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsUserCountByAssessment {
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsUserCountBySurvey {
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsUserCounts {
  accounts: [SnapshotReference!]!
  combined: Boolean!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsUserReportCard {
  timeframe: ReportTimeframe!
  user: SnapshotReference!
}

type ReportsConfigurationsUserSignIns {
  accounts: [SnapshotReference!]!
  groups: [SnapshotReference!]!
  timeframe: ReportTimeframe!
}

type ReportsConfigurationsUsersList {
  chunkNum: Int
  filterNoGroups: Boolean!
  groups: [SnapshotReference!]!
  search: String
  sortDirection: SortDirections!
  sortField: UserSortFields!
  totalChunks: Int
  userStatus: UserStatusFilters!
  userTypeFilter: UserTypeFilters!
}

"""Autogenerated return type of ReportsCreate"""
type ReportsCreatePayload {
  errors: [Error!]
  node: Report
}

enum ReportsEmailsSentByTemplateSortFields {
  CLICKED_COUNT
  DELIVERED_COUNT
  CLICKED_RATE
  FAILURE_COUNT
  REPORTED_COUNT
  SENT_COUNT
  USER_COUNT
}

enum ReportsEmailsSentSortFields {
  CLICKED_COUNT
  DELIVERED_COUNT
  CLICKED_RATE
  FAILURE_COUNT
  NAME
  REPORTED_COUNT
  SENT_COUNT
  USER_COUNT
}

enum ReportsEnrollmentStatusesCriteria {
  ALL
  PAST_DUE
}

enum ReportsEnrollmentsTimeframeCriteria {
  CREATED_AT
  STARTED_AT
  COMPLETED_AT
}

input ReportsGlobalPhishingAggregateColumns {
  userColumns: [ReportsUserColumns!] = []
  phishingTotalsColumns: [ReportsGlobalPhishingAggregatePhishingTotalsColumns!] = []
}

enum ReportsGlobalPhishingAggregatePhishingTotalsColumns {
  PPP
  SCHEDULED_COUNT
  DELIVERED_COUNT
  BOUNCED_COUNT
  OPENED_COUNT
  FAILURES_COUNT
  CLICKED_COUNT
  REPLIED_COUNT
  ATTACHMENT_OPEN_COUNT
  MACRO_ENABLED_COUNT
  QR_CODE_SCANNED_COUNT
  DATA_ENTERED_COUNT
  CALLED_COUNT
  CALLBACK_DATA_ENTERED_COUNT
  REPORTED_COUNT
  AVG_DIFF_DELIVERED
  AVG_DIFF_FAILED
}

input ReportsGlobalPhishingRawColumns {
  userColumns: [ReportsUserColumns!] = []
  phishingCampaignColumns: [ReportsGlobalPhishingRawPhishingCampaignColumns!] = []
  phishingCampaignRecipientColumns: [ReportsGlobalPhishingRawPhishingCampaignRecipientColumns!] = []
  emailTemplateColumns: [ReportsGlobalPhishingRawEmailTemplateColumns!] = []
}

enum ReportsGlobalPhishingRawEmailTemplateColumns {
  NAME
  ATTACHMENT_TYPE
  FROM
  LANGUAGE_CODE
  SOPHISTICATION
  CATEGORY_NAME
  CATEGORY_TYPE
}

enum ReportsGlobalPhishingRawPhishingCampaignColumns {
  NAME
  STATUS
  FREQUENCY_PERIOD
  LAST_RUN
  STORE_REPLY_CONTENT
  TEMPLATE_SELECTION
  PHISH_DOMAIN
  LANDING_PAGE
  IS_PHISHFLIP
  LOCALIZED_CAMPAIGN
}

enum ReportsGlobalPhishingRawPhishingCampaignRecipientColumns {
  SCHEDULED_AT
  DELIVERED
  BOUNCED
  OPENED
  CLICKED
  REPLIED
  ATTACHMENT_OPEN
  MACRO_ENABLED
  QR_CODE_SCANNED
  DATA_ENTERED
  CALLED
  CALLBACK_DATA_ENTERED
  REPORTED
  IP_ADDRESS
  BROWSER
  BROWSER_VERSION
  OS
}

input ReportsGlobalTrainingAggregateColumns {
  userColumns: [ReportsUserColumns!] = []
  enrollmentTotalsColumns: [ReportsGlobalTrainingAggregateEnrollmentTotalsColumns!] = []
}

enum ReportsGlobalTrainingAggregateEnrollmentTotalsColumns {
  ENROLLED
  COMPLETED
  COMPLETED_PAST_DUE
  IN_PROGRESS
  IN_PROGRESS_PAST_DUE
  NOT_STARTED
  NOT_STARTED_PAST_DUE
  TIME_SPENT
  TIME_SPENT_OF_COMPLETED
  SCORE_AVERAGE
}

input ReportsGlobalTrainingRawColumns {
  userColumns: [ReportsUserColumns!] = []
  trainingCampaignColumns: [ReportsGlobalTrainingRawTrainingCampaignColumns!] = []
  enrollmentColumns: [ReportsGlobalTrainingRawEnrollmentColumns!] = []
  enrollmentItemColumns: [ReportsGlobalTrainingRawEnrollmentItemColumns!] = []
  storeItemColumns: [ReportsGlobalTrainingRawStoreItemColumns!] = []
}

enum ReportsGlobalTrainingRawEnrollmentColumns {
  STATUS
  PAST_DUE
  CREATED_AT
  STARTED_AT
  COMPLETED_AT
  EXPIRES_AT
  EXTENDED_EXPIRES_AT
  LAST_STARTED_AT
  TOTAL_TIME
  TIME_REMAINING
}

enum ReportsGlobalTrainingRawEnrollmentItemColumns {
  TITLE
  ASSET_TYPE
  DURATION
  PUBLISHED_AT
}

enum ReportsGlobalTrainingRawStoreItemColumns {
  PUBLISHER
  EXPIRES_AT
  SUBSCRIPTION_LEVEL
  IS_CMP
}

enum ReportsGlobalTrainingRawTrainingCampaignColumns {
  NAME
  STATUS
  START_CAMPAIGN_AT
  END_CAMPAIGN_AT
}

input ReportsLearnerPlatformRawColumns {
  userColumns: [ReportsUserColumns!] = []
  trainingCampaignColumns: [ReportsLearnerPlatformRawTrainingCampaignColumns!] = []
  enrollmentColumns: [ReportsLearnerPlatformRawEnrollmentColumns!] = []
  enrollmentItemColumns: [ReportsLearnerPlatformRawEnrollmentItemColumns!] = []
  storeItemColumns: [ReportsLearnerPlatformRawStoreItemColumns!] = []
  enrollmentPlatformColumns: [ReportsLearnerPlatformRawEnrollmentPlatformColumns!] = []
}

enum ReportsLearnerPlatformRawEnrollmentColumns {
  STATUS
  PAST_DUE
  CREATED_AT
  STARTED_AT
  COMPLETED_AT
  EXPIRES_AT
  EXTENDED_EXPIRES_AT
  LAST_STARTED_AT
  TOTAL_TIME
  TIME_REMAINING
  ENROLLMENT_PLATFORMS
}

enum ReportsLearnerPlatformRawEnrollmentItemColumns {
  TITLE
  ASSET_TYPE
  DURATION
  PUBLISHED_AT
}

enum ReportsLearnerPlatformRawEnrollmentPlatformColumns {
  COMPLETED_PLATFORM
  STARTED_PLATFORM
}

enum ReportsLearnerPlatformRawStoreItemColumns {
  PUBLISHER
  EXPIRES_AT
  SUBSCRIPTION_LEVEL
  IS_CMP
}

enum ReportsLearnerPlatformRawTrainingCampaignColumns {
  NAME
  STATUS
  START_CAMPAIGN_AT
  END_CAMPAIGN_AT
}

enum ReportsPhishingAttackVectors {
  PDFATTACHMENTS
  WORDATTACHMENTS
  EXCELATTACHMENTS
  POWERPOINTATTACHMENTS
  MACROATTACHMENTS
  ZIPPEDATTACHMENTS
  HTMLATTACHMENTS
}

enum ReportsPhishingOutcomeTypes {
  ALL
  FAILED
  REPORTED
  BOUNCED
}

enum ReportsSecurityCoachActivityRtcAggregateAggregateDetectionColumns {
  DETECTION_COUNT
  SCHEDULED_DETECTION_COUNT
  SLACK_NOTIFICATION_COUNT
  TEAMS_NOTIFICATION_COUNT
  EMAIL_NOTIFICATION_COUNT
  UNIQUE_CAMPAIGN_DETECTION_COUNT
}

input ReportsSecurityCoachActivityRtcAggregateColumns {
  userColumns: [ReportsUserColumns!] = []
  userIdpDataColumns: [ReportsUserIdpDataColumns!] = []
  aggregateDetectionColumns: [ReportsSecurityCoachActivityRtcAggregateAggregateDetectionColumns!] = []
}

input ReportsSecurityCoachActivityRtcRawColumns {
  userColumns: [ReportsUserColumns!] = []
  userIdpDataColumns: [ReportsUserIdpDataColumns!] = []
  detectionColumns: [ReportsSecurityCoachActivityRtcRawDetectionColumns!] = []
  rtcCampaignColumns: [ReportsSecurityCoachActivityRtcRawRtcCampaignColumns!] = []
}

enum ReportsSecurityCoachActivityRtcRawDetectionColumns {
  STATUS
  CREATED_AT
  DELIVERY_METHOD
}

enum ReportsSecurityCoachActivityRtcRawRtcCampaignColumns {
  NAME
  TEMPLATE_CATEGORY_NAME
  STORE_ITEM_TITLE
}

input ReportsSecurityCoachDetectionRulesActivityAggregateColumns {
  userColumns: [ReportsUserColumns!] = []
  userIdpDataColumns: [ReportsUserIdpDataColumns!] = []
  aggregateDetectionRuleColumns: [ReportsSecurityCoachDetectionRulesActivityAggregateDetectionRuleColumns!] = []
}

enum ReportsSecurityCoachDetectionRulesActivityAggregateDetectionRuleColumns {
  WORKFLOWUSERLOG_COUNT
  MAX_RISK_LEVEL
  UNIQUE_WORKFLOW_COUNT
}

enum ReportsSecurityCoachDetectionRulesActivityDetectionRuleColumns {
  WORKFLOW_NAME
  WORKFLOW_DESCRIPTION
  VENDOR_CODE_NAME
  CATEGORIES
  RISK_LEVEL
  MODIFIED
}

input ReportsSecurityCoachDetectionRulesActivityRawColumns {
  userColumns: [ReportsUserColumns!] = []
  userIdpDataColumns: [ReportsUserIdpDataColumns!] = []
  detectionRuleColumns: [ReportsSecurityCoachDetectionRulesActivityDetectionRuleColumns!] = []
}

enum ReportsStoreItemTypes {
  COURSE
  ASSESSMENT
  POLICY
  GAME
  SCORM_VIDEO
  MOBILE_FIRST
}

input ReportsTimeframe {
  type: ReportsTimeframeTypes!
  customStart: ISO8601Date
  customEnd: ISO8601Date
  criteria: ReportsEnrollmentsTimeframeCriteria
  relativeUnit: ReportsTimeframeRelativeUnits
  relativeValue: Int
}

enum ReportsTimeframeRelativeUnits {
  WEEK
  MONTH
}

enum ReportsTimeframeTypes {
  ENTIRE_HISTORY
  WEEK_TO_DATE
  MONTH_TO_DATE
  LAST_YEAR
  LAST_QUARTER
  LAST_MONTH
  LAST_6_MONTHS
  YEAR_TO_DATE
  LAST_24_HOURS
  LAST_7_DAYS
  LAST_30_DAYS
  LAST_90_DAYS
  CUSTOM
}

enum ReportsTrainingCampaignsCriteria {
  CAMPAIGN_TRAINING
  OPTIONAL_TRAINING
  AIDA_OPTIONAL_TRAINING
}

enum ReportsTypes {
  ASSESSMENT_SCORE_BY_KNOWLEDGE_AREA_OVER_TIME
  OVERALL_PPP_BY_ACCOUNT
  OVERALL_PPP_BY_GROUP
  OVERALL_PPP_BY_TRAINING_TIME
  OVERALL_PPP_BY_CAMPAIGN
  TRAINING_COMPARISON_BY_PPP
  TRAINING_STATUS_BY_CAMPAIGN
  USER_COUNT_BY_ASSESSMENT
  USER_COUNT_BY_SURVEY
  ASSESSMENT_SCORE_BY_KNOWLEDGE_AREA
  SURVEY_SCORE_BY_DIMENSION
  SURVEY_SCORE_BY_DIMENSION_OVER_TIME
  PPP_DISTRIBUTION
  TRAINING_COMPARISON_BY_RISK_SCORE
  TRAINING_STATUS_BY_COURSE
  FAILURES_BY_PHISHING_TEMPLATE
  RISK_SCORE_BY_GROUP
  RISK_SCORE_BY_LOCATION
  RISK_SCORE_BY_USER
  RISK_SCORE_BY_ASSESSMENT
  RISK_SCORE_BY_SURVEY
  FAILURE_TYPE_USER_COUNTS
  TRAINING_STATUS_BY_GROUP
  USER_COUNTS
  INITIAL_PPP
  TRAINING_HOURS
  TRAINING_INTERACTIONS_BY_PURCHASED_COURSE
  TRAINING_INTERACTIONS_BY_GROUP
  UNPHISHED_USERS
  INCOMPLETE_TRAINING
  NO_TRAINING_ASSIGNED
  TRAINING_NOT_STARTED
  USER_SIGN_INS
  TRAINING_STATUSES_BY_CAMPAIGN
  PHISH_FAILURE_PERCENTAGE_OVERALL
  PHISH_FAILURE_PERCENTAGE_BY_CAMPAIGNS
  EMAILS_SENT_BY_GROUP
  EMAILS_SENT_BY_TEMPLATE
  FAILURE_TYPES_BAR_CHART
  USER_REPORT_CARD
  GROUP_REPORT_CARD
  ACCOUNT_REPORT_CARD
  TRAINING_CAMPAIGN_SURVEYS
  TRAINING_CAMPAIGN_ENROLLMENTS
  PHISHING_SECURITY_TESTS
  USERS_LIST
  GLOBAL_PHISHING_RAW
  GLOBAL_PHISHING_AGGREGATE
  GLOBAL_TRAINING_RAW
  GLOBAL_TRAINING_AGGREGATE
  LEARNER_PLATFORM_RAW
  ACTIVE_RULES_REPORT
  SECURITY_COACH_ACTIVITY_RTC_RAW
  SECURITY_COACH_DETECTION_RULES_ACTIVITY_RAW
  SECURITY_COACH_DETECTION_RULES_ACTIVITY_AGGREGATE
  SECURITY_COACH_ACTIVITY_RTC_AGGREGATE
  TRAINING_SURVEYS_BY_CAMPAIGN
  TRAINING_SURVEYS_BY_COURSE
  PAB_USER_ACTIVITY
  EXEC_REPORTS_PDF
}

input ReportsTypesAccountReportCard {
  timeframe: ReportsTimeframe!
  accountId: Int!
}

input ReportsTypesActiveRulesReport {
  search: String
  from: ISO8601Date
  vendor: String
  rule: String
}

input ReportsTypesAssessmentScoreByKnowledgeArea {
  groups: [Int!] = []
  knowledgeAreas: [KnowledgeAreas!] = []
  timeframe: ReportsTimeframe!
}

input ReportsTypesAssessmentScoreByKnowledgeAreaOverTime {
  groups: [Int!] = []
  knowledgeAreas: [KnowledgeAreas!] = []
  timeframe: ReportsTimeframe!
}

input ReportsTypesEmailsSentByGroup {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
  sortDirection: SortDirections
  sortField: ReportsEmailsSentSortFields
}

input ReportsTypesEmailsSentByTemplate {
  timeframe: ReportsTimeframe!
  emailTemplates: [Int!] = []
  sortDirection: SortDirections
  sortField: ReportsEmailsSentByTemplateSortFields
}

input ReportsTypesFailuresByPhishingTemplate {
  timeframe: ReportsTimeframe!
  campaigns: [Int!] = []
  campaignType: PhishingCampaignTypes
}

input ReportsTypesFailureTypesBarChart {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
  campaigns: [Int!] = []
  campaignType: PhishingCampaignTypes
  industryPpp: Float
}

input ReportsTypesFailureTypeUserCounts {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
}

input ReportsTypesGlobalPhishingAggregate {
  groups: [Int!]
  accounts: [Int!]
  excludeGroups: [Int!]
  timeframe: ReportsTimeframe!
  campaigns: [Int!] = []
  campaignType: PhishingCampaignTypes
  userStatus: UserStatusFilters!
  attackVectors: [ReportsPhishingAttackVectors!] = []
  columns: ReportsGlobalPhishingAggregateColumns
}

input ReportsTypesGlobalPhishingRaw {
  groups: [Int!]
  accounts: [Int!]
  excludeGroups: [Int!]
  timeframe: ReportsTimeframe!
  campaigns: [Int!] = []
  campaignType: PhishingCampaignTypes
  userStatus: UserStatusFilters!
  outcomeType: ReportsPhishingOutcomeTypes!
  attackVectors: [ReportsPhishingAttackVectors!] = []
  columns: ReportsGlobalPhishingRawColumns
}

input ReportsTypesGlobalTrainingAggregate {
  timeframe: ReportsTimeframe!
  trainingCampaigns: [Int!] = []
  trainingCampaignsCriteria: ReportsTrainingCampaignsCriteria
  accounts: [Int!] = []
  groups: [Int!] = []
  excludeGroups: [Int!] = []
  contentTypes: [ReportsStoreItemTypes!] = []
  enrollmentStatuses: [EnrollmentStatuses!] = []
  enrollmentStatusesCriteria: ReportsEnrollmentStatusesCriteria
  userStatus: UserStatusFilters = ALL
  columns: ReportsGlobalTrainingAggregateColumns
}

input ReportsTypesGlobalTrainingRaw {
  timeframe: ReportsTimeframe!
  trainingCampaigns: [Int!] = []
  trainingCampaignsCriteria: ReportsTrainingCampaignsCriteria
  accounts: [Int!] = []
  groups: [Int!] = []
  excludeGroups: [Int!] = []
  contentTypes: [ReportsStoreItemTypes!] = []
  enrollmentStatuses: [EnrollmentStatuses!] = []
  enrollmentStatusesCriteria: ReportsEnrollmentStatusesCriteria
  userStatus: UserStatusFilters = ALL
  columns: ReportsGlobalTrainingRawColumns
}

input ReportsTypesGroupReportCard {
  timeframe: ReportsTimeframe!
  groupId: Int!
}

input ReportsTypesIncompleteTraining {
  timeframe: ReportsTimeframe!
}

input ReportsTypesInitialPpp {
  timeframe: ReportsTimeframe!
}

input ReportsTypesLearnerPlatformRaw {
  timeframe: ReportsTimeframe!
  trainingCampaigns: [Int!] = []
  trainingCampaignsCriteria: ReportsTrainingCampaignsCriteria
  accounts: [Int!] = []
  groups: [Int!] = []
  excludeGroups: [Int!] = []
  contentTypes: [ReportsStoreItemTypes!] = []
  userStatus: UserStatusFilters = ALL
  enrollmentPlatform: EnrollmentPlatformTypes = ALL
  columns: ReportsLearnerPlatformRawColumns
}

input ReportsTypesMostClickedEmailTemplates {
  timeframe: ReportsTimeframe!
  userId: Int
  groupId: Int
  accountId: Int
}

input ReportsTypesNoTrainingAssigned {
  timeframe: ReportsTimeframe!
}

input ReportsTypesOverallPppByAccount {
  accounts: [Int!] = []
  combined: Boolean
  groups: [Int!] = []
  timeframe: ReportsTimeframe!
  industryPpp: Float
}

input ReportsTypesOverallPppByCampaign {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
  campaigns: [Int!] = []
  combined: Boolean
  industryPpp: Float
  campaignType: PhishingCampaignTypes
}

input ReportsTypesOverallPppByGroup {
  groups: [Int!] = []
  timeframe: ReportsTimeframe!
  industryPpp: Float
}

input ReportsTypesOverallPppByTrainingTime {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
  accounts: [Int!] = []
  combined: Boolean = false
}

input ReportsTypesOverallPppByUser {
  timeframe: ReportsTimeframe!
  userId: Int!
}

input ReportsTypesPabUserActivity {
  search: String
  userStatus: UserStatusFilters
  activityStatus: UserHasOutlookAddinActivityTypes
  activityType: OutlookAddinActivityActivityTypes
}

input ReportsTypesPhishFailurePercentageByCampaigns {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
  campaigns: [Int!] = []
  campaignType: PhishingCampaignTypes
  combined: Boolean = false
}

input ReportsTypesPhishFailurePercentageOverall {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
  accounts: [Int!] = []
  combined: Boolean = false
}

input ReportsTypesPhishingSecurityTests {
  comparison: String
  grouping: String
  groups: [Int!] = []
  includeNonFailures: Boolean
  campaignRuns: [Int!] = []
  timeframe: ReportsTimeframe!
  includePhishFlipCampaigns: String
}

input ReportsTypesPppDistribution {
  groups: [Int!] = []
}

input ReportsTypesRiskScoreByAssessment {
  groups: [Int!] = []
  timeframe: ReportsTimeframe!
}

input ReportsTypesRiskScoreByGroup {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
  accounts: [Int!] = []
  combined: Boolean = false
  isAccountReportCard: Boolean = false
}

input ReportsTypesRiskScoreByLocation {
  timeframe: ReportsTimeframe!
  locations: [String!] = []
}

input ReportsTypesRiskScoreBySurvey {
  groups: [Int!] = []
  timeframe: ReportsTimeframe!
}

input ReportsTypesRiskScoreByUser {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
  accounts: [Int!] = []
}

input ReportsTypesRiskScoreHistoryByUser {
  timeframe: ReportsTimeframe!
  userId: Int!
}

input ReportsTypesSecurityCoachActivityRtcAggregate {
  rtcCampaigns: [Int!] = []
  timeframe: ReportsTimeframe!
  groups: [Int!]
  deliveryMethods: [DetectionDeliveryMethods!]
  userStatus: UserStatusFilters = ALL
  detectionCount: DetectionCountFilters = ANY
  newUsersCoached: Boolean = false
  columns: ReportsSecurityCoachActivityRtcAggregateColumns
}

input ReportsTypesSecurityCoachActivityRtcRaw {
  rtcCampaigns: [Int!] = []
  timeframe: ReportsTimeframe!
  groups: [Int!]
  deliveryMethods: [DetectionDeliveryMethods!]
  userStatus: UserStatusFilters = ALL
  columns: ReportsSecurityCoachActivityRtcRawColumns
}

input ReportsTypesSecurityCoachDetectionRulesActivityAggregate {
  detectionRules: [String!] = []
  vendors: [Vendors!] = []
  detectionRulesCategory: [String!] = []
  timeframe: ReportsTimeframe!
  ruleDetectionCount: RuleDetectionCountFilters = ANY
  columns: ReportsSecurityCoachDetectionRulesActivityAggregateColumns
}

input ReportsTypesSecurityCoachDetectionRulesActivityRaw {
  detectionRules: [String!] = []
  vendors: [Vendors!] = []
  detectionRulesCategory: [String!] = []
  timeframe: ReportsTimeframe!
  riskLevels: [TmrRiskLevels!]
  columns: ReportsSecurityCoachDetectionRulesActivityRawColumns
}

input ReportsTypesSurveyScoreByDimension {
  groups: [Int!] = []
  dimensions: [SurveyDimensions!] = []
  timeframe: ReportsTimeframe!
}

input ReportsTypesSurveyScoreByDimensionOverTime {
  groups: [Int!] = []
  dimensions: [SurveyDimensions!] = []
  timeframe: ReportsTimeframe!
}

input ReportsTypesTrainingCampaignEnrollments {
  trainingCampaignId: Int!
  assetId: Int
  assetType: String
  scope: EnrollmentScopes
  search: String
  includeArchived: Boolean
}

input ReportsTypesTrainingCampaignSurveys {
  trainingCampaignId: Int!
}

input ReportsTypesTrainingComparisonByPpp {
  groups: [Int!] = []
  accounts: [Int!] = []
  combined: Boolean = false
}

input ReportsTypesTrainingComparisonByRiskScore {
  groups: [Int!] = []
  accounts: [Int!] = []
  combined: Boolean = false
}

input ReportsTypesTrainingHours {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
}

input ReportsTypesTrainingInteractionsByGroup {
  groups: [Int!] = []
  purchasedCourses: [Int!]!
  sortDirection: SortDirections
  timeframe: ReportsTimeframe!
}

input ReportsTypesTrainingInteractionsByPurchasedCourse {
  purchasedCourses: [Int!]!
  timeframe: ReportsTimeframe!
  sortDirection: SortDirections
}

input ReportsTypesTrainingNotStarted {
  timeframe: ReportsTimeframe!
}

input ReportsTypesTrainingStatusByCampaign {
  timeframe: ReportsTimeframe!
  trainingCampaigns: [Int!] = []
  userId: Int
  groupId: Int
  accounts: [Int!] = []
}

input ReportsTypesTrainingStatusByCourse {
  timeframe: ReportsTimeframe!
  trainingCampaigns: [Int!] = []
  accounts: [Int!] = []
}

input ReportsTypesTrainingStatusByGroup {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
  accounts: [Int!] = []
}

input ReportsTypesTrainingStatusesByCampaign {
  timeframe: ReportsTimeframe!
  trainingCampaigns: [Int!] = []
  groups: [Int!] = []
}

input ReportsTypesTrainingSurveysByCampaign {
  timeframe: ReportsTimeframe!
  trainingCampaigns: [Int!] = []
}

input ReportsTypesTrainingSurveysByCourse {
  timeframe: ReportsTimeframe!
  content: [Int!]
}

input ReportsTypesUnphishedUsers {
  timeframe: ReportsTimeframe!
}

input ReportsTypesUserCountByAssessment {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
}

input ReportsTypesUserCountBySurvey {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
}

input ReportsTypesUserCounts {
  timeframe: ReportsTimeframe!
  accounts: [Int!] = []
  combined: Boolean = false
  groups: [Int!] = []
}

input ReportsTypesUserReportCard {
  timeframe: ReportsTimeframe!
  userId: Int!
}

input ReportsTypesUserSignIns {
  timeframe: ReportsTimeframe!
  groups: [Int!] = []
  accounts: [Int!] = []
}

input ReportsTypesUsersList {
  userStatus: UserStatusFilters!
  userType: UserTypeFilters!
  search: String
  sortField: String!
  sortDirection: String!
  filterNoGroups: Boolean!
  groups: [Int!]
  groupStatus: GroupStatuses
  singleGroup: Boolean
  chunkNum: Int
  totalChunks: Int
}

enum ReportsUserColumns {
  EMAIL
  ACCOUNT
  FIRST_NAME
  LAST_NAME
  CURRENT_PPP
  RISK_SCORE
  JOB_TITLE
  DIVISION
  LOCATION
  MANAGER_NAME
  MANAGER_EMAIL
  EMPLOYEE_NUMBER
  ORGANIZATION
  DEPARTMENT
  CUSTOM_FIELD_1
  CUSTOM_FIELD_2
  CUSTOM_FIELD_3
  CUSTOM_FIELD_4
  GROUPS
  TIME_ZONE
  CUSTOM_DATE_1
  CUSTOM_DATE_2
  CREATED_AT
  EMPLOYEE_START_DATE
  LAST_SIGN_IN_AT
  ARCHIVED_AT
}

enum ReportsUserIdpDataColumns {
  COMPANY_NAME
  COUNTRY
  EMPLOYEE_TYPE
  LAST_PASSWORD_CHANGE_DATE_TIME
  MAIL_NICKNAME
  ON_PREMISES_SAM_ACCOUNT_NAME
  ON_PREMISES_SECURITY_IDENTIFIER
  USER_PRINCIPAL_NAME
}

type ReportTimeframe {
  calculatedEnd: ISO8601Date
  calculatedStart: ISO8601Date
  criteria: ReportsEnrollmentsTimeframeCriteria
  customEnd: ISO8601Date
  customStart: ISO8601Date
  relativeUnit: ReportsTimeframeRelativeUnits
  relativeValue: Int
  type: ReportsTimeframeTypes!
}

"""Password IQ requested scan"""
type RequestedScan {
  accountId: Int
  id: Int
  requestedAt: ISO8601DateTime
}

"""Restricted domain"""
type RestrictedDomain implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  name: String!
  notes: String
  tld: Boolean!
  updatedAt: ISO8601DateTime!
}

input RestrictedDomainAttributes {
  name: String
  notes: String
}

"""Autogenerated return type of RestrictedDomainsCreate"""
type RestrictedDomainsCreatePayload {
  errors: [Error!]
  node: RestrictedDomain
}

type RestrictedDomainsCursor {
  nodes: [RestrictedDomain!]!
  pagination: Pagination!
}

"""Autogenerated return type of RestrictedDomainsDelete"""
type RestrictedDomainsDeletePayload {
  errors: [Error!]
  node: RestrictedDomain
}

enum RestrictedDomainSortFields {
  NAME
  NOTES
  UPDATED_AT
}

"""Autogenerated return type of RestrictedDomainsUpdate"""
type RestrictedDomainsUpdatePayload {
  errors: [Error!]
  node: RestrictedDomain
}

"""A User Event"""
type Risk {
  decayMode: String
  expireDate: String
  level: Int
}

enum RiskBoosterLevels {
  LOW
  NORMAL
  HIGH
  HIGHEST
}

type RiskScoreByUser {
  csv: String!
  timeframe: ReportTimeframe
  users: [UserRiskScore!]!
}

"""Risk score for a user"""
type RiskScoreHistory implements Identifier {
  createdAt: ISO8601DateTime!
  id: Int!
  riskScore: Float
  user: User!
}

"""The Account Risk Score Stats"""
type RiskScoreStats {
  riskHistories: [TimeData!]
  riskScore: Float
}

type RiskStatistics {
  detectionsPerUser: Int
  totalCategories: Int
  totalDetections: Int
  uniqueUsers: Int
}

"""Attributes for creating or updating a rtc Campaign"""
input RtcCampaignAttributes {
  name: String!
  criterions: [GroupCriterionAttributes!]!
  contentId: String!
  notificationId: String!
  notificationType: NotificationTypes!
  deliveryMethod: DeliveryMethods
  fallbackEmail: Boolean!
  limitDeliveries: Boolean!
  useGif: Boolean!
}

enum RuleDetectionCountFilters {
  ANY
  eq1
  gt1
  gt5
}

type RuleOptionData {
  delimiters: [SelectOption!]!
  leftHand: [SelectOption!]!
  rightHand: [SelectOption!]!
}

type RulesSummary {
  activeRulesCount: Int
  availableRulesCount: Int
  ruleDetections: Int
  totalUsers: Int
}

enum RuleStatus {
  enabled
  disabled
  maintenance
}

enum RuleVerb {
  is
  contains
}

"""A message campaign run"""
type Run implements Identifier & Timestamps {
  activeRecipients: [Recipient!]
  allUsers: Boolean!
  archived: Boolean!
  campaign: Campaign
  createdAt: ISO8601DateTime!
  groups: [Group!]
  id: Int!
  messageContents: [MessageContent!]
  messagesCampaignsId: Int
  name: String
  runTopics: [MessageTopic!]
  sendEmail: Boolean!
  statistics: Statistics
  updatedAt: ISO8601DateTime!
}

type RunRecipientsCursor {
  nodes: [Recipient!]!
  pagination: Pagination!
}

type RunsCursor {
  nodes: [Run!]!
  pagination: Pagination!
}

"""The Salesforce Account Settings"""
type Salesforce implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  fetchFromBothSfid: Boolean!
  id: Int!
  lastFetchAt: ISO8601DateTime
  lastFetchBy: PartnerAdmin
  nextFetchAt: ISO8601DateTime
  nextFetchBy: PartnerAdmin
  updatedAt: ISO8601DateTime!
}

input SalesforceAttributes {
  id: Int
  lastFetchAt: ISO8601DateTime
  lastFetchById: Int
  fetchFromBothSfid: Boolean
}

input SamlSettingsAttributes {
  id: Int
  signSamlRequests: Boolean
  disableNonSamlLogins: Boolean
  allowAdminWithMfaLoginBypass: Boolean
}

"""Saved Report"""
type SavedReport implements ReportConfigurable {
  category: ReportCategory
  categoryId: Int
  configuration: Configurations!
  createdAt: ISO8601DateTime!
  creator: User
  id: Int!
  impersonated: Boolean
  name: String!
  type: DownloadablesTypes!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated return type of SavedReportsCategoriesCreate"""
type SavedReportsCategoriesCreatePayload {
  errors: [Error!]
  node: ReportCategory
}

"""Autogenerated return type of SavedReportsCategoriesDelete"""
type SavedReportsCategoriesDeletePayload {
  errors: [Error!]
  node: ReportCategory
}

"""Autogenerated return type of SavedReportsCategoriesReorder"""
type SavedReportsCategoriesReorderPayload {
  errors: [Error!]
  nodes: [ReportCategory!]
}

"""Autogenerated return type of SavedReportsCategoriesUpdate"""
type SavedReportsCategoriesUpdatePayload {
  errors: [Error!]
  node: ReportCategory
}

"""Autogenerated return type of SavedReportsClone"""
type SavedReportsClonePayload {
  errors: [Error!]
  node: SavedReport
}

"""Autogenerated return type of SavedReportsDelete"""
type SavedReportsDeletePayload {
  errors: [Error!]
  nodes: [Int!]!
}

"""Autogenerated return type of SavedReportsDownload"""
type SavedReportsDownloadPayload {
  errors: [Error!]
  node: SavedReport
}

type SavedReportsFiltersCursor {
  nodes: [Group!]!
  pagination: Pagination!
}

input SavedReportsList {
  categoryId: Int = null
  type: ReportsTypes = null
  default: Boolean = false
  includeOthers: Boolean = false
  search: String = null
  reportTypes: [ReportsTypes!] = null
  searchReportTypes: [String!] = null
  groupIds: [Int] = null
  sortDirection: SortDirections = DESCENDING
  sortField: SavedReportsSortFields = CREATED_AT
}

"""Autogenerated return type of SavedReportsMove"""
type SavedReportsMovePayload {
  error: Error
  nodes: [SavedReport!]
}

"""Autogenerated return type of SavedReportsSave"""
type SavedReportsSavePayload {
  errors: [Error!]
  node: SavedReport
}

enum SavedReportsSortFields {
  REPORT_CATEGORY_ID
  UPDATED_AT
  CREATED_AT
  NAME
}

enum Schedulable {
  SavedReport
  ExecReport
}

"""Password IQ Schedule Data"""
type Schedule {
  days: [Weekdays!]
  isDefault: Boolean
  startTime: String
}

"""Configuration for scheduling a report"""
type ScheduledReport implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  creator: User
  execReports: [ExecReportsExecReport!]!
  format: DownloadFileTypes!
  frequencyPeriod: ReportFrequencies!
  groups: [Group!]!
  id: Int!
  impersonated: Boolean
  lastSentAt: ISO8601DateTime
  name: String!
  nextSendAt: ISO8601DateTime!
  partnerAdmins: [PartnerAdmin!]!
  savedReports: [SavedReport!]!
  sendToCreator: Boolean!
  startDate: ISO8601Date!
  status: ScheduledReportStatuses!
  time: Time!
  timeZone: TimeZones!
  updatedAt: ISO8601DateTime!
}

input ScheduledReportAttributes {
  name: String!
  sendTo: [Int!]!
  frequencyPeriod: ReportFrequencies!
  startDate: ISO8601Date!
  time: Time!
  timeZone: TimeZones!
  schedulableId: String
  format: DownloadFileTypes!
  sendToCreator: Boolean
}

"""Autogenerated return type of ScheduledReportsDeactivate"""
type ScheduledReportsDeactivatePayload {
  errors: [Error!]
  node: ScheduledReport!
}

"""Autogenerated return type of ScheduledReportsDelete"""
type ScheduledReportsDeletePayload {
  errors: [Error!]
  node: ScheduledReport!
}

input ScheduledReportsList {
  type: ReportsTypes = null
  search: String = null
  reportTypes: [ReportsTypes!] = null
  searchReportTypes: [ReportsTypes!] = null
  sortDirection: SortDirections = DESCENDING
  sortField: ScheduledReportsSortFields = CREATED_AT
  status: ScheduledReportStatuses = ACTIVE
  includeOthers: Boolean = false
  accountIds: [Int!] = null
}

type ScheduledReportsListCursor {
  nodes: [ScheduledReport!]!
  pagination: Pagination!
}

"""Autogenerated return type of ScheduledReportsSave"""
type ScheduledReportsSavePayload {
  errors: [Error!]
  node: ScheduledReport
}

"""Autogenerated return type of ScheduledReportsSend"""
type ScheduledReportsSendPayload {
  errors: [Error!]
  node: ScheduledReport
}

enum ScheduledReportsSortFields {
  CREATED_AT
  UPDATED_AT
  NEXT_SEND_AT
  FREQUENCY_PERIOD
  FORMAT
  NAME
}

enum ScheduledReportStatuses {
  READY
  PROCESSING
  INACTIVE
  ACTIVE
}

"""Security Coach metadata for an event"""
type SchMetadata {
  campaignName: String
  source: String
  uuid: String
}

enum ScimPurgeTypes {
  ALL
  GROUPS
  USERS
}

"""Autogenerated return type of SecondChanceAddToOrionList"""
type SecondChanceAddToOrionListPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecondChanceBulkDeleteDomains"""
type SecondChanceBulkDeleteDomainsPayload {
  errors: [Error!]
  node: Boolean
}

"""A Device from Second Chance"""
type SecondChanceDevice {
  abortedCount: Int!
  abortedCount24: Int!
  agentVersion: String!
  continuedCount: Int!
  continuedCount24: Int!
  createdAt: ISO8601DateTime!
  id: Int!
  lastActionDate: ISO8601DateTime
  lastUserId: Int
  lastUserName: String
  name: String!
  overviewDays: Int!
  uuid: String!
}

type SecondChanceDevicesCursor {
  nodes: [SecondChanceDevice!]!
  pagination: Pagination!
}

enum SecondChanceDeviceSortFields {
  NAME
  LAST_ACTION
  AGENT_VERSION
  LAST_USER
}

"""A No Prompt Domain from Second Chance"""
type SecondChanceDomain {
  createdAt: ISO8601DateTime!
  id: Int!
  name: String!
  unicodeName: String
}

"""A Domain Prompt from Second Chance/Orion"""
type SecondChanceDomainPrompt {
  count: Int!
  name: String!
}

type SecondChanceDomainPromptsCursor {
  nodes: [SecondChanceDomainPrompt!]!
  pagination: Pagination!
}

type SecondChanceDomainsCursor {
  nodes: [SecondChanceDomain!]!
  pagination: Pagination!
}

enum SecondChanceDomainSortFields {
  NAME
  UNICODE_NAME
  DATE_ADDED
}

"""Autogenerated return type of SecondChanceImportDomains"""
type SecondChanceImportDomainsPayload {
  errors: [Error!]
  node: Int
}

"""The Stats & info for the SC Overview Page"""
type SecondChanceOverview {
  abortedCount: Int!
  abortedCount24: Int!
  continuedCount: Int!
  continuedCount24: Int!
  deviceCount: Int!
  installerDownloadUrl: String
  licenseKey: String!
  overviewDays: Int!
}

"""A PostAction from Second Chance"""
type SecondChancePostAction {
  actionDate: ISO8601DateTime!
  actionTaken: String!
  deviceId: Int!
  deviceName: String!
  url: String!
  userId: Int!
  userName: String!
}

type SecondChancePostActionsCursor {
  nodes: [SecondChancePostAction!]!
  pagination: Pagination!
}

enum SecondChancePostActionSortFields {
  URL
  USER
  DEVICE
  ACTIONTAKEN
  DATE
}

input SecondChanceSettingAttributes {
  id: Int
  overviewDays: Int
}

"""The settings for Second Chance"""
type SecondChanceSettings {
  attachmentPromptText: String!
  doNotPromptForPhishingTests: Boolean!
  doNotPromptOnInternalHosts: Boolean!
  unknownAllowButtonText: String!
  unknownMessageBannerText: String!
  unknownMessagePromptText: String!
  unknownPunycodeText: String!
  unknownTurnBackTimeButtonText: String!
  unwindingPromptText: String!
  unwrapRewriters: Boolean!
  unwrapShorteners: Boolean!
  useOrion: Boolean!
}

input SecondChanceSettingsAttributes {
  unknownMessageBannerText: String
  unknownMessagePromptText: String
  unknownTurnBackTimeButtonText: String
  unknownAllowButtonText: String
  unknownPunycodeText: String
  attachmentPromptText: String
  unwrapShorteners: Boolean
  unwrapRewriters: Boolean
  unwindingPromptText: String
  useOrion: Boolean
  doNotPromptForPhishingTests: Boolean
  doNotPromptOnInternalHosts: Boolean
}

"""Autogenerated return type of SecondChanceUpdateSettings"""
type SecondChanceUpdateSettingsPayload {
  errors: [Error!]
  node: Boolean
}

"""A URL from Second Chance"""
type SecondChanceUrl {
  abortedCount: Int!
  abortedCount24: Int!
  continuedCount: Int!
  continuedCount24: Int!
  encodedUrl: String!
  lastVisit: ISO8601DateTime!
  overviewDays: Int!
  url: String!
}

type SecondChanceUrlsCursor {
  nodes: [SecondChanceUrl!]!
  pagination: Pagination!
}

enum SecondChanceUrlSortFields {
  URL
  CONTINUED
  ABORTED
  LAST_VISIT_DATE
}

"""A User from Second Chance"""
type SecondChanceUser {
  abortedCount: Int!
  abortedCount24: Int!
  actionCount: Int!
  continuedCount: Int!
  continuedCount24: Int!
  displayName: String!
  id: Int!
  lastActionDate: ISO8601DateTime
  lastDeviceId: Int
  lastDeviceName: String
  overviewDays: Int!
}

type SecondChanceUsersCursor {
  nodes: [SecondChanceUser!]!
  pagination: Pagination!
}

enum SecondChanceUserSortFields {
  DISPLAY_NAME
  LAST_ACTION
  ACTION_COUNT
  LAST_DEVICE
}

type SecurityCoach implements Identifier {
  boolean: Booleans!
  comparison: EventComparisons!
  count: Int!
  id: Int!
  ruleIds: [String!]!
  timeframe: Timeframe!
}

type SecurityCoachActivityRtcAggregate {
  detectionCount: Int
  emailNotificationCount: Int
  scheduledDetectionCount: Int
  slackNotificationCount: Int
  teamsNotificationCount: Int
  uniqueCampaignDetectionCount: Int
  user: User
}

type SecurityCoachActivityRtcAggregateCsv {
  csv: String!
  timeframe: ReportTimeframe
}

type SecurityCoachActivityRtcAggregateCursor {
  columns: Columns
  nodes: [SecurityCoachActivityRtcAggregate!]!
  pagination: Pagination!
  timeframe: ReportTimeframe
}

type SecurityCoachActivityRtcRawCsv {
  csv: String!
  timeframe: ReportTimeframe
}

type SecurityCoachActivityRtcRawCursor {
  columns: Columns
  nodes: [SecurityCoachDetection!]!
  pagination: Pagination!
  timeframe: ReportTimeframe
}

"""
Autogenerated return type of SecurityCoachAnalyticsCreateRemapJobForUnmappedEvents
"""
type SecurityCoachAnalyticsCreateRemapJobForUnmappedEventsPayload {
  errors: [Error!]
  node: RemapJobCreatedMessage
}

"""
Autogenerated return type of SecurityCoachApproveUserMappingRecommendation
"""
type SecurityCoachApproveUserMappingRecommendationPayload {
  errors: [Error!]
  node: Boolean
}

input SecurityCoachArgument {
  bool: Booleans!
  ruleIds: [String!]!
  countType: EventComparisons!
  count: Int!
  timeframe: TimeframeArgument!
}

"""A Real Time Coaching Campaign"""
type SecurityCoachCampaign {
  createdAt: ISO8601DateTime!
  deliveryMethod: DeliveryMethods
  fallbackEmail: Boolean!
  group: Group!
  id: Int!
  limitDeliveries: Boolean!
  name: String!
  notificationTemplate: SystemCustomNotification!
  notificationTemplateType: String!
  notificationTemplateUuid: String!
  rules: [TeachableMomentRules!]
  smartGroupCriterions: [GroupCriterion!]!
  status: CampaignStatuses!
  storeItem: StoreItem!
}

"""Autogenerated return type of SecurityCoachCampaignsCreate"""
type SecurityCoachCampaignsCreatePayload {
  errors: [Error!]
  node: Boolean
}

type SecurityCoachCampaignsCursor {
  nodes: [SecurityCoachCampaign!]!
  pagination: Pagination!
}

"""Autogenerated return type of SecurityCoachCampaignsDelete"""
type SecurityCoachCampaignsDeletePayload {
  errors: [Error!]
  node: SecurityCoachCampaign
}

"""Autogenerated return type of SecurityCoachCampaignsSetStatus"""
type SecurityCoachCampaignsSetStatusPayload {
  errors: [Error!]
  node: SecurityCoachCampaign
}

"""Autogenerated return type of SecurityCoachCampaignsUpdate"""
type SecurityCoachCampaignsUpdatePayload {
  errors: [Error!]
  node: SecurityCoachCampaign
}

"""Autogenerated return type of SecurityCoachCdrmsCreateCategory"""
type SecurityCoachCdrmsCreateCategoryPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsCreateRule"""
type SecurityCoachCdrmsCreateRulePayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsCreateTopic"""
type SecurityCoachCdrmsCreateTopicPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsCreateVendor"""
type SecurityCoachCdrmsCreateVendorPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsDeleteCategory"""
type SecurityCoachCdrmsDeleteCategoryPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsDeleteRule"""
type SecurityCoachCdrmsDeleteRulePayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsDeleteTopic"""
type SecurityCoachCdrmsDeleteTopicPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsDeleteVendor"""
type SecurityCoachCdrmsDeleteVendorPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsReleaseRule"""
type SecurityCoachCdrmsReleaseRulePayload {
  errors: [Error!]
  node: Boolean
}

"""
Autogenerated return type of SecurityCoachCdrmsReleaseVendorToProduction
"""
type SecurityCoachCdrmsReleaseVendorToProductionPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsUpdateCategory"""
type SecurityCoachCdrmsUpdateCategoryPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsUpdatePartialCategory"""
type SecurityCoachCdrmsUpdatePartialCategoryPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsUpdatePartialRule"""
type SecurityCoachCdrmsUpdatePartialRulePayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsUpdatePartialTopic"""
type SecurityCoachCdrmsUpdatePartialTopicPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsUpdatePartialVendor"""
type SecurityCoachCdrmsUpdatePartialVendorPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsUpdateRule"""
type SecurityCoachCdrmsUpdateRulePayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsUpdateTopic"""
type SecurityCoachCdrmsUpdateTopicPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachCdrmsUpdateVendor"""
type SecurityCoachCdrmsUpdateVendorPayload {
  errors: [Error!]
  node: Boolean
}

"""SecurityCoach content type"""
type SecurityCoachContent {
  contentOptions: [AssetProperty!]
  coverImage: String!
  id: String!
  title: String!
}

enum SecurityCoachCsvUploadStatus {
  processing
  successful
  failed
  partially_failed
}

"""Autogenerated return type of SecurityCoachCustomNotificationsClone"""
type SecurityCoachCustomNotificationsClonePayload {
  errors: [Error!]
  node: CustomNotification
}

"""Autogenerated return type of SecurityCoachCustomNotificationsCreate"""
type SecurityCoachCustomNotificationsCreatePayload {
  errors: [Error!]
  node: CustomNotification
}

"""Autogenerated return type of SecurityCoachCustomNotificationsDelete"""
type SecurityCoachCustomNotificationsDeletePayload {
  errors: [Error!]
  node: CustomNotification
}

"""Autogenerated return type of SecurityCoachCustomNotificationsUpdate"""
type SecurityCoachCustomNotificationsUpdatePayload {
  errors: [Error!]
  node: CustomNotification
}

"""Autogenerated return type of SecurityCoachCustomTranslationsCreate"""
type SecurityCoachCustomTranslationsCreatePayload {
  errors: [Error!]
  node: CustomTranslation
}

"""Autogenerated return type of SecurityCoachCustomTranslationsDelete"""
type SecurityCoachCustomTranslationsDeletePayload {
  errors: [Error!]
  node: CustomTranslation
}

"""Autogenerated return type of SecurityCoachCustomTranslationsUpdate"""
type SecurityCoachCustomTranslationsUpdatePayload {
  errors: [Error!]
  node: CustomTranslation
}

"""Autogenerated return type of SecurityCoachDeliveryPreview"""
type SecurityCoachDeliveryPreviewPayload {
  error: String
}

"""
Autogenerated return type of SecurityCoachDeliverySlackSendSampleMessage
"""
type SecurityCoachDeliverySlackSendSampleMessagePayload {
  error: String
  messageData: MessageSentData
}

type SecurityCoachDeliverySlackSetup {
  setupUrl: String!
}

"""
Autogenerated return type of SecurityCoachDeliverySlackWorkspacesDelete
"""
type SecurityCoachDeliverySlackWorkspacesDeletePayload {
  deleted: Boolean
  errors: [Error!]
}

"""Autogenerated return type of SecurityCoachDeliveryTeamsCallback"""
type SecurityCoachDeliveryTeamsCallbackPayload {
  errors: [Error!]
  registered: Boolean
}

"""Autogenerated return type of SecurityCoachDeliveryTeamsDelete"""
type SecurityCoachDeliveryTeamsDeletePayload {
  deleted: Boolean
  errors: [Error!]
}

"""
Autogenerated return type of SecurityCoachDeliveryTeamsSendSampleMessage
"""
type SecurityCoachDeliveryTeamsSendSampleMessagePayload {
  error: String
  messageData: MessageSentData
}

type SecurityCoachDeliveryTeamsSetup {
  setupUrl: String!
}

"""Detection in the account"""
type SecurityCoachDetection implements Timestamps {
  createdAt: ISO8601DateTime!
  deliveryMethod: DetectionDeliveryMethods
  rtcCampaign: SecurityCoachCampaign
  status: String
  updatedAt: ISO8601DateTime!
  user: User
}

type SecurityCoachDetectionRulesActivityAggregateColumns {
  aggregateDetectionRuleColumns: [ReportsSecurityCoachDetectionRulesActivityAggregateDetectionRuleColumns!]
  timeframe: ReportTimeframe
  userColumns: [ReportsUserColumns!]
  userIdpDataColumns: [ReportsUserIdpDataColumns!]
}

type SecurityCoachDetectionRulesActivityAggregateCsv {
  csv: String!
  timeframe: ReportTimeframe
}

type SecurityCoachDetectionRulesActivityRawColumns {
  detectionRuleColumns: [ReportsSecurityCoachDetectionRulesActivityDetectionRuleColumns!]
  timeframe: ReportTimeframe
  userColumns: [ReportsUserColumns!]
  userIdpDataColumns: [ReportsUserIdpDataColumns!]
}

type SecurityCoachDetectionRulesActivityRawCsv {
  csv: String!
  timeframe: ReportTimeframe
}

"""SecurityCoach packages"""
type SecurityCoachDownloadablePackages {
  assetDetails: String
  previewImagePath: String!
}

"""Autogenerated return type of SecurityCoachEditUserMapping"""
type SecurityCoachEditUserMappingPayload {
  errors: [Error!]
  node: Boolean
}

"""SecurityCoach Event Type"""
type SecurityCoachEvent implements EventTypeInterface {
  description: String
  eventName: SecurityCoachTimelineEventTypes!
  id: BigInt!
}

"""SecurityCoach language"""
type SecurityCoachLanguage {
  code: String!
}

"""SecurityCoach notification type"""
type SecurityCoachNotification {
  id: String!
  name: String!
  templateTranslations: [SecurityCoachNotificationTranslation!]!
}

"""SecurityCoach notification type"""
type SecurityCoachNotificationTranslation {
  attachmentFilename: String
  contentHtml: String!
  from: String
  fromDisplayName: String
  id: String!
  language: Language
  name: String!
  replyTo: [String!]
  replyToDisplayName: String
  status: String
  subject: String
  uuid: String!
}

"""Autogenerated return type of SecurityCoachOrchestrationCloneTmr"""
type SecurityCoachOrchestrationCloneTmrPayload {
  errors: [Error!]
  results: CloneRuleResponse
}

"""
Autogenerated return type of SecurityCoachOrchestrationCreateTeachableMomentRule
"""
type SecurityCoachOrchestrationCreateTeachableMomentRulePayload {
  errors: [Error!]
  results: TeachableMomentRules
}

"""
Autogenerated return type of SecurityCoachOrchestrationDeleteTeachableMomentRule
"""
type SecurityCoachOrchestrationDeleteTeachableMomentRulePayload {
  errors: [Error!]
  node: Boolean
}

"""
Autogenerated return type of SecurityCoachOrchestrationEditTeachableMomentRule
"""
type SecurityCoachOrchestrationEditTeachableMomentRulePayload {
  errors: [Error!]
  node: Boolean
}

"""
Autogenerated return type of SecurityCoachOrchestrationEnableTeachableMomentRule
"""
type SecurityCoachOrchestrationEnableTeachableMomentRulePayload {
  errors: [Error!]
  rule: TeachableMomentRules
}

"""Autogenerated return type of SecurityCoachPreview"""
type SecurityCoachPreviewPayload {
  errors: [Error!]
  preview: Boolean
}

"""Autogenerated return type of SecurityCoachQuote"""
type SecurityCoachQuotePayload {
  errors: [Error!]
  quote: Boolean
}

type SecurityCoachRealTimeCoaching implements Identifier {
  boolean: Booleans!
  comparison: EventComparisons!
  count: Int!
  id: Int!
  rtcCampaignIds: [Int!]!
  timeframe: Timeframe!
}

input SecurityCoachRealTimeCoachingArgument {
  bool: Booleans!
  rtcCampaignIds: [Int!]!
  countType: EventComparisons!
  count: Int!
  timeframe: TimeframeArgument!
}

"""
Autogenerated return type of SecurityCoachRejectUserMappingRecommendation
"""
type SecurityCoachRejectUserMappingRecommendationPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachResetPreview"""
type SecurityCoachResetPreviewPayload {
  reset: Boolean
}

"""Autogenerated return type of SecurityCoachRulesCreate"""
type SecurityCoachRulesCreatePayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachRulesDelete"""
type SecurityCoachRulesDeletePayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachRulesToggle"""
type SecurityCoachRulesTogglePayload {
  errors: [Error!]
  node: Boolean
}

enum SecurityCoachTimelineEventTypes {
  graphene_tm_event
  graphene_rtc_received
}

"""Autogenerated return type of SecurityCoachToggleEngineStatus"""
type SecurityCoachToggleEngineStatusPayload {
  errors: [Error!]
  node: EngineStatus
}

"""SecurityCoach content type"""
type SecurityCoachTranslatedSecurityTip {
  altText: String
  downloadablePackages: [SecurityCoachDownloadablePackages!]!
  language: SecurityCoachLanguage!
  title: String!
}

"""Report download"""
type SecurityCoachUnmappedEventsReport {
  category: DownloadablesCategories!
  configuration: SecurityCoachUnmappedEventsReportConfiguration!
  createdAt: ISO8601DateTime!
  id: Int!
  impersonatingUser: User
  type: DownloadablesTypes!
  updatedAt: ISO8601DateTime!
}

type SecurityCoachUnmappedEventsReportConfiguration {
  endDate: ISO8601Date
  startDate: ISO8601Date!
  vendorId: String
}

"""Autogenerated return type of SecurityCoachUserMappingCsvUpload"""
type SecurityCoachUserMappingCsvUploadPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of SecurityCoachVendorsBitdefenderConnect"""
type SecurityCoachVendorsBitdefenderConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsCarbonBlackConnect"""
type SecurityCoachVendorsCarbonBlackConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsCiscoConnect"""
type SecurityCoachVendorsCiscoConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsCiscoUmbrellaConnect"""
type SecurityCoachVendorsCiscoUmbrellaConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsCiscoUmbrellaUpdate"""
type SecurityCoachVendorsCiscoUmbrellaUpdatePayload {
  errors: [Error!]
  node: Registration
}

"""
Autogenerated return type of SecurityCoachVendorsCloudflareArea1Connect
"""
type SecurityCoachVendorsCloudflareArea1ConnectPayload {
  errors: [Error!]
  key: String
  node: Registration
}

"""
Autogenerated return type of SecurityCoachVendorsCloudflareZeroTrustConnect
"""
type SecurityCoachVendorsCloudflareZeroTrustConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsCodeFourTwoConnect"""
type SecurityCoachVendorsCodeFourTwoConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsCrowdstrikeConnect"""
type SecurityCoachVendorsCrowdstrikeConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsCylanceConnect"""
type SecurityCoachVendorsCylanceConnectPayload {
  errors: [Error!]
  key: String
}

"""Autogenerated return type of SecurityCoachVendorsDelete"""
type SecurityCoachVendorsDeletePayload {
  deleted: Boolean
  errors: [Error!]
}

"""Autogenerated return type of SecurityCoachVendorsGoogleConnect"""
type SecurityCoachVendorsGoogleConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsMalwarebytesConnect"""
type SecurityCoachVendorsMalwarebytesConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsMicrosoftConnect"""
type SecurityCoachVendorsMicrosoftConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsNetskopeConnect"""
type SecurityCoachVendorsNetskopeConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsNetskopeUpdate"""
type SecurityCoachVendorsNetskopeUpdatePayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsOktaConnect"""
type SecurityCoachVendorsOktaConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsPaloaltoConnect"""
type SecurityCoachVendorsPaloaltoConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsProofpointConnect"""
type SecurityCoachVendorsProofpointConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsSentinelOneConnect"""
type SecurityCoachVendorsSentinelOneConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsSonicwallConnect"""
type SecurityCoachVendorsSonicwallConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsSophosConnect"""
type SecurityCoachVendorsSophosConnectPayload {
  errors: [Error!]
  node: Registration
}

"""Autogenerated return type of SecurityCoachVendorsZscalerConnect"""
type SecurityCoachVendorsZscalerConnectPayload {
  errors: [Error!]
  node: ZscalerKeys
}

"""An Security Role"""
type SecurityRole implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  groups: [Group!]!
  id: Int!
  name: String!
  permissions: SecurityRolePermission!
  updatedAt: ISO8601DateTime!
  userCount: Int!
}

input SecurityRoleAttributes {
  name: String!
  groupIds: [Int!]!
  permissions: SecurityRolePermissionAttributes!
}

"""A Security Role Permission"""
type SecurityRolePermission implements Identifier & Timestamps {
  accountSettings: Int!
  advancedReporting: Int!
  asap: Int!
  brandedContents: Int!
  createdAt: ISO8601DateTime!
  dashboardPhishing: Int!
  dashboardTraining: Int!
  executiveReports: Int!
  id: Int!
  passwordIq: Int!
  phishingCampaigns: Int!
  phishingLandingPages: Int!
  phishingReports: Int!
  phishingTemplates: Int!
  physicalQrCampaigns: Int!
  reportsDetectionRulesActivity: Int!
  reportsEmailTemplatesSent: Int!
  reportsFailureTypes: Int!
  reportsFailuresByPhishingTemplate: Int!
  reportsGroupAndUserCards: Int!
  reportsLearnerPlatform: Int!
  reportsPhishFailurePercentage: Int!
  reportsPhishPronePercentage: Int!
  reportsPhishingActivity: Int!
  reportsPhishingResultsByUser: Int!
  reportsQuizInteractions: Int!
  reportsRealTimeCoachingActivity: Int!
  reportsRiskScore: Int!
  reportsSecurityAwarenessProficiencyAssessment: Int!
  reportsSecurityCultureSurvey: Int!
  reportsTrainingActivity: Int!
  reportsTrainingComparison: Int!
  reportsTrainingContentSurvey: Int!
  reportsTrainingHours: Int!
  reportsTrainingStatusByCampaign: Int!
  reportsTrainingStatusOverview: Int!
  reportsUnphishedAndUntrainedUser: Int!
  reportsUserCountAndLogin: Int!
  scopes: [SecurityRolePermissionScope!]!
  secondChanceSettings: Int!
  securityCoachDashboardAndReports: Int!
  securityCoachDetectionRules: Int!
  securityCoachRtcAndCatalog: Int!
  securityCoachSetup: Int!
  sendReports: Int!
  storeItems: Int!
  trainingCampaigns: Int!
  trainingPolicies: Int!
  trainingPurchases: Int!
  trainingReports: Int!
  trainingTemplates: Int!
  trainingUploadedContent: Int!
  updatedAt: ISO8601DateTime!
  usbCampaigns: Int!
  users: Int!
}

input SecurityRolePermissionAttributes {
  accountSettings: Int!
  advancedReporting: Int!
  asap: Int!
  brandedContents: Int!
  dashboardPhishing: Int!
  dashboardTraining: Int!
  executiveReports: Int!
  passwordIq: Int!
  phishingCampaigns: Int!
  phishingLandingPages: Int!
  phishingReports: Int!
  phishingTemplates: Int!
  physicalQrCampaigns: Int!
  reportsDetectionRulesActivity: Int!
  reportsEmailTemplatesSent: Int!
  reportsFailureTypes: Int!
  reportsFailuresByPhishingTemplate: Int!
  reportsGroupAndUserCards: Int!
  reportsLearnerPlatform: Int!
  reportsPhishFailurePercentage: Int!
  reportsPhishPronePercentage: Int!
  reportsPhishingActivity: Int!
  reportsPhishingResultsByUser: Int!
  reportsQuizInteractions: Int!
  reportsRealTimeCoachingActivity: Int!
  reportsRiskScore: Int!
  reportsSecurityAwarenessProficiencyAssessment: Int!
  reportsSecurityCultureSurvey: Int!
  reportsTrainingActivity: Int!
  reportsTrainingComparison: Int!
  reportsTrainingContentSurvey: Int!
  reportsTrainingHours: Int!
  reportsTrainingStatusByCampaign: Int!
  reportsTrainingStatusOverview: Int!
  reportsUnphishedAndUntrainedUser: Int!
  reportsUserCountAndLogin: Int!
  secondChanceSettings: Int!
  securityCoachDashboardAndReports: Int!
  securityCoachDetectionRules: Int!
  securityCoachRtcAndCatalog: Int!
  securityCoachSetup: Int!
  sendReports: Int!
  storeItems: Int!
  trainingCampaigns: Int!
  trainingPolicies: Int!
  trainingPurchases: Int!
  trainingReports: Int!
  trainingTemplates: Int!
  trainingUploadedContent: Int!
  usbCampaigns: Int!
  users: Int!
  scopes: [SecurityRoleScopeAttributes!]!
}

"""An Security Role Permission"""
type SecurityRolePermissionScope implements Identifier {
  groups: [Group!]!
  id: Int!
  permission: SecurityRoleScopeables!
}

enum SecurityRoleScopeables {
  USERS
  TRAINING_CAMPAIGNS
  TRAINING_REPORTS
  PHISHING_CAMPAIGNS
  PHISHING_REPORTS
  ADVANCED_REPORTING
}

input SecurityRoleScopeAttributes {
  permission: SecurityRoleScopeables!
  groups: [Int!]!
}

"""Autogenerated return type of SecurityRolesCreate"""
type SecurityRolesCreatePayload {
  errors: [Error!]
  node: SecurityRole
}

type SecurityRolesCursor {
  nodes: [SecurityRole!]!
  pagination: Pagination!
}

"""Autogenerated return type of SecurityRolesDelete"""
type SecurityRolesDeletePayload {
  errors: [Error!]
  node: SecurityRole
}

"""Autogenerated return type of SecurityRolesUpdate"""
type SecurityRolesUpdatePayload {
  errors: [Error!]
  node: SecurityRole
}

type SelectOption {
  id: ID!
  text: String!
  vendorCodeName: String
}

"""Autogenerated return type of SignInAsAccount"""
type SignInAsAccountPayload {
  errors: [Error!]
  node: Boolean!
}

"""Autogenerated return type of SignInAsAdmin"""
type SignInAsAdminPayload {
  errors: [Error!]
  node: Boolean!
}

"""Autogenerated return type of SignInAsChildPartner"""
type SignInAsChildPartnerPayload {
  errors: [Error!]
  node: Boolean!
}

"""Autogenerated return type of SignInAsPartner"""
type SignInAsPartnerPayload {
  errors: [Error!]
  node: Boolean!
}

"""Current Site Admin account"""
type SiteAdmin implements Timestamps {
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  currentSignInAt: ISO8601DateTime
  defaultLandingPage: LandingPage!
  disabled: Boolean!
  email: String!
  firstName: String
  fullAdmin: Boolean!
  id: Int!
  lastName: String
  mfaEnabled: Boolean
  otpCode: String!
  otpSecretKey: String!
  qrCodeImageData: String!
  sessionTimeout: Int!
  siteAdminPermission: SiteAdminPermission
  timeZone: TimeZones
  updatedAt: ISO8601DateTime!
}

input SiteAdminAttributes {
  fullAdmin: Boolean
  firstName: String
  lastName: String
  email: String
  timeZone: TimeZones
  mfaEnabled: Boolean
  sessionTimeout: Int
  password: String
  passwordConfirmation: String
  siteAdminPermission: SiteAdminPermissionAttributes
}

"""Permissions for a Site Admin"""
type SiteAdminPermission implements Timestamps {
  accounts: Int!
  callbackPhishingPhoneNumbers: Int!
  centralizedDetectionRules: Int!
  clickwrap: Int!
  contentAttributes: Int!
  courses: Int!
  createdAt: ISO8601DateTime!
  demoSeeds: Int!
  domains: Int!
  emailTemplates: Int!
  featureReleases: Int!
  id: Int!
  ipRanges: Int!
  landingPages: Int!
  modStore: Int!
  ols: Int!
  partners: Int!
  privilegedModstore: Int!
  secondChance: Int!
  subscriptions: Int!
  trademarks: Int!
  updatedAt: ISO8601DateTime!
}

input SiteAdminPermissionAttributes {
  id: Int
  accounts: Int
  centralizedDetectionRules: Int
  clickwrap: Int
  contentAttributes: Int
  courses: Int
  demoSeeds: Int
  domains: Int
  emailTemplates: Int
  featureReleases: Int
  ipRanges: Int
  landingPages: Int
  modStore: Int
  ols: Int
  privilegedModstore: Int
  partners: Int
  secondChance: Int
  subscriptions: Int
  trademarks: Int
  callbackPhishingPhoneNumbers: Int
}

"""Autogenerated return type of SiteAdminsCreate"""
type SiteAdminsCreatePayload {
  errors: [Error!]
  node: SiteAdmin
}

type SiteAdminsCursor {
  nodes: [SiteAdmin!]!
  pagination: Pagination!
}

"""Autogenerated return type of SiteAdminsDeactivateMfa"""
type SiteAdminsDeactivateMfaPayload {
  errors: [Error!]
  node: SiteAdmin
}

"""Autogenerated return type of SiteAdminsDelete"""
type SiteAdminsDeletePayload {
  errors: [Error!]
  node: SiteAdmin
}

"""Autogenerated return type of SiteAdminsDisableMfa"""
type SiteAdminsDisableMfaPayload {
  errors: [Error!]
  node: SiteAdmin
}

"""Autogenerated return type of SiteAdminsDisable"""
type SiteAdminsDisablePayload {
  errors: [Error!]
  node: SiteAdmin
}

"""Autogenerated return type of SiteAdminsEnableMfa"""
type SiteAdminsEnableMfaPayload {
  errors: [Error!]
  node: SiteAdmin
}

enum SiteAdminsSortFields {
  FULL_NAME
  EMAIL
  CONFIRMED_AT
  CURRENT_SIGN_IN_AT
  MFA_ENABLED
  FULL_ADMIN
}

"""Autogenerated return type of SiteAdminsToggleFullAdmin"""
type SiteAdminsToggleFullAdminPayload {
  errors: [Error!]
  node: SiteAdmin
}

"""Autogenerated return type of SiteAdminsUpdate"""
type SiteAdminsUpdatePayload {
  errors: [Error!]
  node: SiteAdmin
}

"""Autogenerated return type of SiteAdminsUpdateSelf"""
type SiteAdminsUpdateSelfPayload {
  errors: [Error!]
  node: SiteAdmin
}

"""The Site Settings"""
type SiteSettings implements Timestamps {
  createdAt: ISO8601DateTime!
  disableNonSamlLogins: Boolean
  ensureSameSessionIp: Boolean
  idpCertFingerprint: String
  idpCertFormat: IdpCertificationFormats
  idpSsoTargetUrl: String
  ipAllowList: String
  restrictConsoleSession: Boolean!
  samlEnabled: Boolean
  signSamlRequests: Boolean
  ssoCallback: String
  ssoEntity: String
  ssoIn: String
  ssoMetadata: String
  ssoOut: String
  updatedAt: ISO8601DateTime!
}

input SiteSettingsAttributes {
  disableNonSamlLogins: Boolean
  ensureSameSessionIp: Boolean
  idpCertFingerprint: String
  idpCertFormat: IdpCertificationFormats
  idpSsoTargetUrl: String
  samlEnabled: Boolean
  signSamlRequests: Boolean
  ipAllowList: String
  restrictConsoleSession: Boolean
}

"""Autogenerated return type of SiteSettingsUpdate"""
type SiteSettingsUpdatePayload {
  errors: [Error!]
  node: SiteSettings
}

type SlackProfile {
  email: String
}

type SnapshotReference {
  id: Int!
  name: String
  timeframe: ReportTimeframe
}

type SocialMediaLink {
  createdAt: ISO8601DateTime
  icon: String
  id: Int
  linkText: String
  linkUrl: String
  platform: String
  updatedAt: ISO8601DateTime
}

input SocialMediaLinkAttributes {
  platform: SocialMediaPlatforms!
  linkUrl: String!
  linkText: String!
}

enum SocialMediaPlatforms {
  facebook
  instagram
  twitter
  youtube
  linkedin
  snapchat
  pinterest
  slack
}

enum SortDirections {
  ASCENDING
  DESCENDING
}

enum SortFields {
  AD_PW_WEAK
  AD_PW_SHARED
  AD_PW_EMPTY
  AD_PW_CLEAR_TEXT
  AD_PW_NOT_REQD
  AD_PW_NEVER_EXPIRES
  AD_USER_USES_LM_HASH
  AD_USER_AES_ENCRYPTION_NOT_SET
  AD_USER_DES_ONLY_ENCRYPTION
  AD_USER_HAS_PREAUTHENTICATION
  AD_PW_FOUND_IN_BREACH
  EMAIL
}

type States {
  expandedIds: [Int!]!
  page: Int
  per: Int
  search: String
  selectedDetections: [DetectionTypes!]!
  sort: SortFields
  sortDirection: SortDirections
  title: String
  type: PiqWidget!
  userType: PiqUserTypes
}

"""Message run statistics"""
type Statistics {
  percentageRead: Int
  totalActiveRecipients: Int
  totalRead: Int
}

"""User Event API usage stats"""
type Stats {
  annualQuota: Int!
  usage: [Int!]!
}

"""User Event API call status"""
type Status {
  apiKey: String
  details: StatusDetails!
  id: String!
  processedAt: ISO8601DateTime!
}

"""User Event API call status details"""
type StatusDetails {
  events: [String!]!
  failures: [StatusError!]!
}

"""User Event API status error"""
type StatusError {
  errors: JSON!
  payload: JSON
}

"""User Event API call status"""
type Statuses {
  pagination: Pagination!
  statuses: [Status!]!
}

"""Modstore store item"""
type StoreItem implements StoreItemInterface {
  accessLevel: String!
  alternates: [StoreItem!]!
  artwork: Artwork!
  contentOptions: [AssetProperty!]
  contentThemable: Boolean!
  contentType: Content
  coverImage: String
  description: String
  expectedDurationInMinutes: Int
  expiresAt: ISO8601DateTime
  expiryMessage: String
  id: Int!
  isCmp: Boolean
  jwt: String
  numTranslations: Int
  publishedAt: ISO8601DateTime
  publisher: Publisher
  status: String
  subscriptionLevel: String
  subscriptions: [Subscription!]
  suitableForMobileDownload: Boolean!
  title: String!
  topics: [Topic!]
  translations: [Translation!]!
  type: String!
  uuid: String!
}

"""Common fields between ccm and modstore store_items"""
interface StoreItemInterface {
  artwork: Artwork!
  description: String
  expectedDurationInMinutes: Int
  id: Int!
  publishedAt: ISO8601DateTime
  title: String!
  translations: [Translation!]!
  type: String!
  uuid: String!
}

enum StoreItemSource {
  KMSAT
  CCM
  MODSTORE
}

enum StoreItemTypes {
  COURSE
  GAME
  VIDEO
  IMAGE
  NEWSLETTER
  SCORM_VIDEO
  ASSESSMENT
  MOBILE_FIRST
  COACHING_CONTENT
}

"""An Enrollment Item"""
union StoreItemUnion = CcmItem | StoreItem

"""Store Purchase"""
type StorePurchase implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  enrollmentCount: Int!
  hasAssociatedSoftDeletedTrainingCampaigns: Boolean
  hidden: Boolean
  id: Int!
  policyLocation: String
  policyRequired: Boolean
  purchasedAt: ISO8601Date
  purchasedContentOptions: PurchasedContentOptions
  purchasedCourse: PurchasedCourse
  purchasedCourseId: Int
  storeItem: StoreItemUnion
  trainingCampaigns: [TrainingCampaign!]
  updatedAt: ISO8601DateTime!
}

input StorePurchaseAttributes {
  hidden: Boolean
  policyRequired: Boolean
  policyLocation: String
  purchasedContentOptionsAttributes: PurchasedContentOptionsAttributes
}

"""Autogenerated return type of StorePurchaseCreate"""
type StorePurchaseCreatePayload {
  errors: [Error!]
  node: StorePurchase
}

"""Common fields between purchased_courses and managed_store_purchases"""
interface StorePurchaseInterface {
  alternatives: [CourseAlternative!]!
  archived: Boolean
  assessment: Boolean
  assessmentType: AssessmentTypes
  assetType: String!
  description: String
  duration: Int
  publishedAt: ISO8601DateTime
  retired: Boolean
  retiringSoon: Boolean
  title: String!
  uploaded: Boolean
}

"""Autogenerated return type of StorePurchaseRemove"""
type StorePurchaseRemovePayload {
  errors: [Error!]
  node: StorePurchase
}

type StorePurchasesCursor {
  nodes: [StorePurchase!]!
  pagination: Pagination!
}

enum StorePurchaseSortFields {
  ID
  CONTENT_TITLE
  DATE_ADDED
  DURATION
}

"""Autogenerated return type of StorePurchaseUpdate"""
type StorePurchaseUpdatePayload {
  errors: [Error!]
  node: StorePurchase
}

"""A subscription"""
type Subscription implements Identifier & Timestamps {
  active: Boolean!
  aidaRecommendedTrainingEnabled: Boolean
  aidaSelectedEnabled: Boolean
  callbackPhishingEnabled: Boolean!
  code: String!
  createdAt: ISO8601DateTime!
  eecEnabled: Boolean
  friendlyName: String
  hasApi: Boolean
  hasPasswordIq: Boolean
  hasPermissions: Boolean!
  hasUserEventApi: Boolean!
  id: Int!
  numAccounts: Int!
  paid: Boolean!
  phishAlertEnabled: Boolean!
  phishingEnabled: Boolean
  physicalQrEnabled: Boolean
  seiEnabled: Boolean!
  smartGroupsEnabled: Boolean!
  subscriptionLevel: String!
  trainingEnabled: Boolean
  updatedAt: ISO8601DateTime!
  usbEnabled: Boolean
  vishingEnabled: Boolean
}

input SubscriptionAttributes {
  subscriptionLevel: String
  friendlyName: String
  active: Boolean
  paid: Boolean
  aidaRecommendedTrainingEnabled: Boolean
  aidaSelectedEnabled: Boolean
  callbackPhishingEnabled: Boolean
  eecEnabled: Boolean
  hasApi: Boolean
  hasPasswordIq: Boolean
  hasPermissions: Boolean
  hasUserEventApi: Boolean
  phishAlertEnabled: Boolean
  phishingEnabled: Boolean
  physicalQrEnabled: Boolean
  seiEnabled: Boolean
  smartGroupsEnabled: Boolean
  trainingEnabled: Boolean
  usbEnabled: Boolean
  vishingEnabled: Boolean
}

"""Autogenerated return type of SubscriptionsCreate"""
type SubscriptionsCreatePayload {
  errors: [Error!]
  node: Subscription
}

type SubscriptionsCursor {
  nodes: [Subscription!]!
  pagination: Pagination!
}

"""Autogenerated return type of SubscriptionsDelete"""
type SubscriptionsDeletePayload {
  errors: [Error!]
  node: Subscription
}

"""Autogenerated return type of SubscriptionsUpdate"""
type SubscriptionsUpdatePayload {
  errors: [Error!]
  node: Subscription
}

"""Enrollment Survey"""
type Survey implements Identifier & Timestamps {
  comments: String
  createdAt: ISO8601DateTime!
  id: Int!
  lengthRating: Int
  styleRating: Int
  updatedAt: ISO8601DateTime!
  valueRating: Int
}

input SurveyAttributes {
  comments: String
  lengthRating: Int
  styleRating: Int
  valueRating: Int
}

enum SurveyDimensions {
  ATTITUDES
  COGNITION
  BEHAVIOR
  COMMUNICATION
  RESPONSIBILITY
  NORMS
  COMPLIANCE
}

"""Autogenerated return type of SurveysCreate"""
type SurveysCreatePayload {
  errors: [Error!]
  node: Survey
}

union SystemCustomNotification = CustomNotification | SecurityCoachNotification

type TeachableMomentCategoriesPayload {
  count: Int!
  next: Int!
  pageSize: Int!
  previous: Int!
  results: [TeachableMomentTopics!]
  totalPages: Int!
}

input TeachableMomentCriteria {
  field: String!
  operator: String!
  value: [String!]!
}

input TeachableMomentCriteriaPayload {
  AND: [TeachableMomentCriteria!]
  OR: [TeachableMomentCriteria!]
}

type TeachableMomentRule {
  config: TeachableMomentRuleConfig
  criteria: TeachableMomentRuleCriteria
}

type TeachableMomentRuleConfig {
  aggregate: Boolean
  count: Int
  lookbackDays: Int
}

type TeachableMomentRuleCriteria {
  AND: [TeachableMomentRuleCriterion!]
  OR: [TeachableMomentRuleCriterion!]
}

type TeachableMomentRuleCriterion {
  field: String!
  operator: String!
  value: [String!]!
}

type TeachableMomentRules {
  categories: [TeachableMomentTopics!]
  description: String
  enabled: Boolean
  id: String
  modified: ISO8601DateTime!
  name: String
  riskLevel: TmrRiskLevels
  rule: TeachableMomentRule
  severity: String
  stage: String
  status: String
  systemWorkflow: String
  tmrType: Tmr
  vendorCodeName: String
}

type TeachableMomentRulesPayload {
  count: Int!
  next: Int!
  pageSize: Int!
  previous: Int!
  results: [TeachableMomentRules!]
  totalPages: Int!
}

type TeachableMomentTopics {
  name: String!
  slug: String!
}

type TemplateLanguagesCursor {
  nodes: [Language!]!
  pagination: Pagination!
}

"""Shallow mirror of Centralized Topics for EmailTemplates"""
type TemplateTopic implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  modstoreId: Int
  name: String!
  topicType: TemplateTopicTypes!
  translationKey: String
  updatedAt: ISO8601DateTime!
}

input TemplateTopicAttributes {
  name: String!
}

"""Autogenerated return type of TemplateTopicsCreate"""
type TemplateTopicsCreatePayload {
  errors: [Error!]
  node: TemplateTopic
}

type TemplateTopicsCursor {
  nodes: [TemplateTopic!]!
  pagination: Pagination!
}

"""Autogenerated return type of TemplateTopicsDelete"""
type TemplateTopicsDeletePayload {
  errors: [Error!]
  node: TemplateTopic
}

"""Autogenerated return type of TemplateTopicsUpdate"""
type TemplateTopicsUpdatePayload {
  errors: [Error!]
  node: TemplateTopic
}

enum TemplateTopicTypes {
  PHISHING_SYSTEM
  PHISHING_USER
  PHISHING_COMMUNITY
  TRAINING_USER
  TRAINING_SYSTEM
  PHISHING_MANAGED
  TRAINING_MANAGED
  PHYSICAL_QR
  PHYSICAL_QR_SYSTEM
  CALLBACK_PHISHING
  CALLBACK_PHISHING_SYSTEM
}

type TestEmail implements Identifier {
  bounceCode: String
  bounceReason: String
  bounced: ISO8601DateTime
  createdAt: ISO8601DateTime!
  delivered: ISO8601DateTime
  id: Int!
  subject: String
}

"""Autogenerated return type of TestEmailsCreate"""
type TestEmailsCreatePayload {
  errors: [Error!]
  node: TestEmail
}

type ThemeSlide {
  createdAt: ISO8601DateTime
  heading: String!
  id: Int
  imageDataUrl: String!
  imageUrl: String!
  subHeading: String!
  themeTranslation: ThemeTranslation!
  updatedAt: ISO8601DateTime
}

input ThemeSlideAttributes {
  heading: String!
  subHeading: String!
  image: File
}

type ThemeTranslation {
  createdAt: ISO8601DateTime
  documentLinks: [DocumentLink!]
  email: String
  id: Int
  introSlide: ThemeSlide
  languageCode: String!
  outroSlide: ThemeSlide
  phoneNumber: String
  socialMediaLinks: [SocialMediaLink!]
  updatedAt: ISO8601DateTime
}

type ThreatCategory {
  properties: ThreatProperties
  type: String
}

type ThreatDistribution {
  percentage: Float
}

type ThreatProperties {
  eventsCount: Int
  uniqueUsers: Int
}

type ThreatRuleDropdown {
  displayName: String!
  value: String!
}

type ThreatSeverity {
  label: String
  value: Float
}

"""An hour in 24h format"""
scalar Time

type TimeData {
  x: BigInt!
  y: Int!
}

"""A group criterion argument"""
union Timeframe = Ever | Latest | Range | Relative

input TimeframeArgument {
  type: TimeframeTypes!
  rangeType: RangeTypes
  relativeUnit: DateUnits
  relativeValue: Int
  startDate: ISO8601Date
  endDate: ISO8601Date
}

enum TimeframeTypes {
  EVER
  ABSOLUTE
  RELATIVE
  LATEST
}

"""Timeline Events"""
type TimelineEvents {
  account: Account!
  events: [UserEvent!]!
  pagination: EventPagination!
}

enum TimelineEventTypes {
  kmsat_campaign_attachment_open
  kmsat_campaign_clicked
  kmsat_campaign_data_entered
  kmsat_campaign_qr_code_scanned
  kmsat_campaign_macro_enabled
  kmsat_campaign_called
  kmsat_campaign_callback_data_entered
  kmsat_campaign_replied
  kmsat_breach
  kmsat_campaign_passed
  kmsat_failed_vishing
  kmsat_passed_vishing
  kmsat_campaign_reported
  kmsat_campaign_delivered
  kmsat_campaign_bounced
  kmsat_campaign_spamreport
  kmsat_all_enrolled
  kmsat_purchase_completed
  kmsat_purchase_started
  kmsat_purchase_enrolled
  kmsat_assessment_started
  kmsat_assessment_completed
  kmsat_assessment_enrolled
  kmsat_policy_enrolled
  kmsat_policy_started
  kmsat_policy_completed
  kmsat_audit_log
  kmsat_user_created
}

"""Autogenerated return type of TimelineExternalEventDelete"""
type TimelineExternalEventDeletePayload {
  errors: [Error!]
  node: UserEvent
}

type TimePoint {
  date: ISO8601Date
  timeframe: ReportTimeframe
  value: Float
}

type TimePointCollection {
  csv: String!
  timeframe: ReportTimeframe
  timeseries: [TimePoint!]!
}

type TimeSeries {
  data: [TimePoint!]!
  name: String!
  timeframe: ReportTimeframe
}

type TimeSeriesCollection {
  csv: String!
  timeframe: ReportTimeframe
  timeseries: [TimeSeries!]!
}

type TimeSeriesCollectionOverallPppWithCount {
  csv: String!
  currentPpp: Float!
  timeframe: ReportTimeframe
  timeseries: [TimeSeries!]!
}

type TimeSeriesCollectionWithOptionalDate {
  csv: String!
  timeframe: ReportTimeframe
  timeseries: [TimeSeries!]!
}

"""The database level timestamps for tracking created/updated"""
interface Timestamps {
  createdAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
}

enum TimeZones {
  INTERNATIONAL_DATE_LINE_WEST
  AMERICAN_SAMOA
  MIDWAY_ISLAND
  HAWAII
  ALASKA
  PACIFIC_TIME_US_CANADA
  TIJUANA
  ARIZONA
  CHIHUAHUA
  MAZATLAN
  MOUNTAIN_TIME_US_CANADA
  CENTRAL_AMERICA
  CENTRAL_TIME_US_CANADA
  GUADALAJARA
  MEXICO_CITY
  MONTERREY
  SASKATCHEWAN
  BOGOTA
  EASTERN_TIME_US_CANADA
  INDIANA_EAST
  LIMA
  QUITO
  ATLANTIC_TIME_CANADA
  CARACAS
  GEORGETOWN
  LA_PAZ
  PUERTO_RICO
  SANTIAGO
  NEWFOUNDLAND
  BRASILIA
  BUENOS_AIRES
  GREENLAND
  MONTEVIDEO
  MID_ATLANTIC
  AZORES
  CAPE_VERDE_IS
  EDINBURGH
  LISBON
  LONDON
  MONROVIA
  UTC
  AMSTERDAM
  BELGRADE
  BERLIN
  BERN
  BRATISLAVA
  BRUSSELS
  BUDAPEST
  CASABLANCA
  COPENHAGEN
  DUBLIN
  LJUBLJANA
  MADRID
  PARIS
  PRAGUE
  ROME
  SARAJEVO
  SKOPJE
  STOCKHOLM
  VIENNA
  WARSAW
  WEST_CENTRAL_AFRICA
  ZAGREB
  ZURICH
  ATHENS
  BUCHAREST
  CAIRO
  HARARE
  HELSINKI
  JERUSALEM
  KALININGRAD
  KYIV
  PRETORIA
  RIGA
  SOFIA
  TALLINN
  VILNIUS
  BAGHDAD
  ISTANBUL
  KUWAIT
  MINSK
  MOSCOW
  NAIROBI
  RIYADH
  ST_PETERSBURG
  TEHRAN
  ABU_DHABI
  BAKU
  MUSCAT
  SAMARA
  TBILISI
  VOLGOGRAD
  YEREVAN
  KABUL
  EKATERINBURG
  ISLAMABAD
  KARACHI
  TASHKENT
  CHENNAI
  KOLKATA
  MUMBAI
  NEW_DELHI
  SRI_JAYAWARDENEPURA
  KATHMANDU
  ALMATY
  ASTANA
  DHAKA
  URUMQI
  RANGOON
  BANGKOK
  HANOI
  JAKARTA
  KRASNOYARSK
  NOVOSIBIRSK
  BEIJING
  CHONGQING
  HONG_KONG
  IRKUTSK
  KUALA_LUMPUR
  PERTH
  SINGAPORE
  TAIPEI
  ULAANBAATAR
  OSAKA
  SAPPORO
  SEOUL
  TOKYO
  YAKUTSK
  ADELAIDE
  DARWIN
  BRISBANE
  CANBERRA
  GUAM
  HOBART
  MELBOURNE
  PORT_MORESBY
  SYDNEY
  VLADIVOSTOK
  MAGADAN
  NEW_CALEDONIA
  SOLOMON_IS
  SREDNEKOLYMSK
  AUCKLAND
  FIJI
  KAMCHATKA
  MARSHALL_IS
  WELLINGTON
  CHATHAM_IS
  NUKU_ALOFA
  SAMOA
  TOKELAU_IS
}

enum Tmr {
  custom
  system
}

enum TmrRiskLevels {
  medium
  high
  very_high
}

enum TmrSortFields {
  modified
}

"""ModStore Topic"""
type Topic {
  id: Int!
  name: String
  topicCategory: TopicCategory
  translationKey: String
}

"""ModStore Topic Category"""
type TopicCategory {
  id: Int!
  name: String
  translationKey: String
}

type TopRiskyGroups {
  count: Int
  name: String
}

type TopRiskyUsers {
  count: Int
  email: String
}

type Training implements Identifier {
  boolean: Booleans!
  courses: [Course!]!
  event: TrainingEvents!
  id: Int!
  inclusion: TrainingCourseInclusions!
  timeframe: Timeframe!
}

input TrainingArgument {
  bool: Booleans!
  event: TrainingEvents!
  inclusionType: TrainingCourseInclusions!
  courses: [TrainingCourseArgument!]!
  timeframe: TimeframeArgument!
}

enum TrainingAssessmentInclusions {
  ANY
  ALL
  ENTIRE
}

input TrainingAsset {
  type: EnrollmentTypes!
  id: Int!
}

"""A Training Campaign"""
type TrainingCampaign implements Identifier & Timestamps & TrainingCampaignInterface {
  active: Boolean!
  addPassedToGroups: [Int!]
  allUsers: Boolean!
  allowPastDueCompletions: Boolean!
  allowSurveyComments: Boolean!
  allowSurveys: Boolean!
  assets: [TrainingCampaignAsset!]!
  autoEnroll: Boolean
  contentTheme: ContentTheme

  """Theme with fallback to account default"""
  contentThemeWithDefault: ContentTheme
  createdAt: ISO8601DateTime!
  deleted: Boolean!
  deliverTo: TrainingCampaignDeliverTo!
  durationType: String!
  endCampaignAtDate: ISO8601Date
  endCampaignAtTime: Time
  endCampaignOption: TrainingCampaignEnd
  endsAt: ISO8601DateTime
  enrollViaCsv: String
  enrollmentDuration: Int
  enrollmentDurationType: TrainingCampaignDurations
  enrollmentEvents: [EnrollmentEvent!]!
  groups: [Group!]!
  hasCsvEnrollments: Boolean!
  hasIndividualEnrollments: Boolean!
  id: Int!
  managedTrainingCampaign: ManagedTrainingCampaign
  name: String!
  notifications: [Notification!]!
  percentComplete: Int!
  policies: [Policy!]!
  purchasedCourses(storeItemSources: [String!]): [PurchasedCourse!]!
  relativeDuration: String
  removePassedFromGroups: [Int!]
  resetAutoEnrollments: Boolean
  selectedContent: [String!]
  selectedGroups: [Int!]
  startCampaignAtDate: ISO8601Date
  startCampaignAtTime: Time
  startsAt: ISO8601DateTime!
  status: TrainingCampaignStatuses!
  storePurchases: [StorePurchase!]!
  timeZone: TimeZones
  totalUsers: Int!
  trackScores: Boolean
  updatedAt: ISO8601DateTime!
  userCounts(asset: TrainingAsset, search: String, includeArchived: Boolean): TrainingCampaignUserCount!
  userEnrollments(userId: Int!): [Enrollment!]!
  userTrainingChartData: [TimeData!]!
}

"""A training Campaign Asset"""
union TrainingCampaignAsset = ManagedStorePurchase | Policy | PurchasedCourse

input TrainingCampaignAttributes {
  name: String!
  startCampaignAtTime: Time
  startCampaignAtDate: ISO8601Date
  endCampaignAtTime: Time
  endCampaignAtDate: ISO8601Date
  enrollmentDuration: Int
  enrollmentDurationType: TrainingCampaignDurations
  autoEnroll: Boolean!
  timeZone: TimeZones
  resetAutoEnrollments: Boolean
  allowPastDueCompletions: Boolean!
  allowSurveys: Boolean!
  allowSurveyComments: Boolean!
  trackScores: Boolean
  selectedContent: [String!]
  selectedGroups: [Int!]
  enrollViaCsv: File
  removePassedFromGroups: [Int!]
  addPassedToGroups: [Int!]
  allUsers: Boolean!
  notifications: [NotificationAttributes!]!
}

enum TrainingCampaignDeliverTo {
  ALL
  SPECIFY
}

"""Training Campaign Event Details"""
type TrainingCampaignDetails {
  name: String
}

enum TrainingCampaignDurations {
  DAYS
  WEEKS
  MONTHS
}

enum TrainingCampaignEnd {
  SPECIFY_DATE
  RELATIVE
  NO_END_DATE
}

type TrainingCampaignEnrollments {
  csv: String!
  timeframe: ReportTimeframe
}

enum TrainingCampaignFilters {
  ACTIVE
  INACTIVE
  ALL
}

"""
Common fields between training_campaigns and managed_training_campaigns
"""
interface TrainingCampaignInterface {
  active: Boolean!
  allowPastDueCompletions: Boolean!
  allowSurveyComments: Boolean!
  allowSurveys: Boolean!
  autoEnroll: Boolean
  deleted: Boolean!
  endCampaignAtDate: ISO8601Date
  endCampaignAtTime: Time
  endCampaignOption: TrainingCampaignEnd
  endsAt: ISO8601DateTime
  enrollmentDuration: Int
  enrollmentDurationType: TrainingCampaignDurations
  name: String!
  percentComplete: Int!
  resetAutoEnrollments: Boolean
  selectedContent: [String!]
  startCampaignAtDate: ISO8601Date
  startCampaignAtTime: Time
  startsAt: ISO8601DateTime!
  status: TrainingCampaignStatuses!
  timeZone: TimeZones
  trackScores: Boolean
}

enum TrainingCampaignNotification {
  welcome_email
  notify_after_enrolled
  notify_before_due
  notify_on_completion
  past_due
  onetime
}

"""Autogenerated return type of TrainingCampaignsAddUser"""
type TrainingCampaignsAddUserPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of TrainingCampaignsBulkChange"""
type TrainingCampaignsBulkChangePayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of TrainingCampaignsClose"""
type TrainingCampaignsClosePayload {
  errors: [Error!]
  node: TrainingCampaign
}

"""Autogenerated return type of TrainingCampaignsCreate"""
type TrainingCampaignsCreatePayload {
  errors: [Error!]
  node: TrainingCampaign
}

"""Autogenerated return type of TrainingCampaignsCsvEnroll"""
type TrainingCampaignsCsvEnrollPayload {
  errors: [Error!]
}

type TrainingCampaignsCursor {
  nodes: [TrainingCampaign!]!
  pagination: Pagination!
}

"""Autogenerated return type of TrainingCampaignsDelete"""
type TrainingCampaignsDeletePayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of TrainingCampaignsEdit"""
type TrainingCampaignsEditPayload {
  errors: [Error!]
  node: TrainingCampaign
}

"""Autogenerated return type of TrainingCampaignsExtendDueDate"""
type TrainingCampaignsExtendDueDatePayload {
  extended: Boolean!
}

enum TrainingCampaignSortFields {
  name
  percentComplete
}

"""Autogenerated return type of TrainingCampaignsRemoveUser"""
type TrainingCampaignsRemoveUserPayload {
  removed: Boolean!
}

"""Autogenerated return type of TrainingCampaignsReopen"""
type TrainingCampaignsReopenPayload {
  errors: [Error!]
  node: Boolean
}

enum TrainingCampaignStatuses {
  CREATED
  ENROLLING
  IN_PROGRESS
  CLOSED
  COMPLETED
}

"""Survey results for training campaign course"""
type TrainingCampaignSurvey implements Identifier & Timestamps {
  contentType: String
  createdAt: ISO8601DateTime!
  duration: Int
  hasSurveys: Boolean!
  id: Int!
  surveyResults: TrainingCampaignSurveyResults!
  title: String
  updatedAt: ISO8601DateTime!
}

"""Aggregated Training Campaign Survey Results"""
type TrainingCampaignSurveyResults {
  contentLengthScore: String!
  helpfulnessScore: String!
  presentationScore: String!
  responseCount: Int!
}

type TrainingCampaignSurveys {
  csv: String!
  timeframe: ReportTimeframe
}

type TrainingCampaignSurveysCursor {
  nodes: [TrainingCampaignSurvey!]!
  pagination: Pagination!
}

"""A Training Campaign User"""
type TrainingCampaignUser implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  enrollments: [Enrollment!]!
  id: Int!
  notificationReceipts: [NotificationReceipt!]
  updatedAt: ISO8601DateTime!
  user: User!
}

"""A Training Campaign User Count"""
type TrainingCampaignUserCount implements Identifier & Timestamps {
  complete: Int!
  createdAt: ISO8601DateTime!
  id: Int!
  inProgress: Int!
  incomplete: Int!
  notStarted: Int!
  pastDue: Int!
  total: Int!
  updatedAt: ISO8601DateTime!
}

type TrainingCampaignUsersCursor {
  nodes: [TrainingCampaignUser!]!
  pagination: Pagination!
}

enum TrainingCampaignUsersSortFields {
  FIRST_NAME
  TOTAL_TIME_IN_SECONDS
  STARTED_AT
  EXPIRES_AT
  CREATED_AT
  SCORE
  EMAIL
  STATUS
}

type TrainingComparison {
  groupName: String!
  timeframe: ReportTimeframe
  trained: Float
  untrained: Float
}

type TrainingComparisonSeries {
  csv: String!
  data: [TrainingComparison!]!
  timeframe: ReportTimeframe
}

input TrainingCourseArgument {
  uuid: String
  id: Int
  type: CourseTypes!
  label: String
}

enum TrainingCourseInclusions {
  ANY
  ALL
  AVAILABLE
}

enum TrainingEvents {
  ENROLLED
  STARTED
  COMPLETED
}

type TrainingInteractionsAnswers {
  correct: Boolean
  label: String
  learnersWhoPickedThis: Int
  timeframe: ReportTimeframe
}

type TrainingInteractionsByGroup {
  allInteractions: [TrainingInteractionsDetails!]
  contentTitle: String
  timeframe: ReportTimeframe
}

type TrainingInteractionsByGroupCsv {
  csv: String!
  timeframe: ReportTimeframe
}

type TrainingInteractionsByPurchasedCourse {
  allInteractions: TrainingInteractionsDetails
  contentTitle: String
  enrollmentStats: EnrollmentStats
  timeframe: ReportTimeframe
}

type TrainingInteractionsCsv {
  csv: String!
  timeframe: ReportTimeframe
}

type TrainingInteractionsDetails {
  createdAt: ISO8601DateTime
  group: Group
  questions: [TrainingInteractionsQuestions!]
  timeframe: ReportTimeframe
}

type TrainingInteractionsQuestions {
  numberOfCorrect: Int
  numberOfIncorrect: Int
  questionTitle: String
  responses: [TrainingInteractionsAnswers!]
  timeframe: ReportTimeframe
}

enum TrainingNotificationDeliveryMethods {
  email
  slack
  teams
}

"""A Training Report"""
type TrainingReport implements Identifier & Timestamps {
  courses: [TrainingReportCourse!]!
  createdAt: ISO8601DateTime!
  id: Int!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""A Training Report Course"""
type TrainingReportCourse {
  acknowledgeable: Boolean!
  acknowledged: Boolean!
  passed: Boolean!
  pastDue: Boolean!
  status: EnrollmentStatuses!
  uuid: String!
}

type TrainingReportCursor {
  nodes: [TrainingReport!]!
  pagination: Pagination!
}

enum TrainingReportTypes {
  STARTED_COURSES
  NOT_STARTED_COURSES
  INCOMPLETE_COURSES
  NOT_STARTED_OR_FINISHED
  COMPLETED
  ACKNOWLEDGED_POLICY
  NOT_ACKNOWLEDGED_POLICY
}

"""User in the account"""
type TrainingStatFailureTypes {
  percent: Float!
  type: CampaignRecipientStatuses!
}

"""User in the account"""
type TrainingStats {
  emailReported: Int!
  totalDelivered: Int!
  totalFailures: Int!
  trainingFailures: [TrainingStatFailureTypes!]!
}

type TrainingStatuses {
  csv: String!
  data: [TrainingStatusesData!]!
  timeframe: ReportTimeframe
}

type TrainingStatusesByCampaign {
  csv: String!
  data: [TrainingStatusesByCampaignData!]!
  timeframe: ReportTimeframe
}

type TrainingStatusesByCampaignData {
  assigned: Int
  completed: Int
  completedAt: String
  completedPastDue: Int
  createdAt: String
  email: String
  groups: String
  id: Int
  inProgress: Int
  location: String
  name: String
  notStarted: Int
  pastDue: Int
  timeframe: ReportTimeframe
  totalTimeSpent: String
  trainingStatus: String!
}

type TrainingStatusesData {
  accountAccess: ISO8601DateTime
  accountId: Int
  completed: Int
  completedPastDue: Int
  id: Int
  inProgress: Int
  name: String!
  notStarted: Int
  timeframe: ReportTimeframe
}

type TransitData {
  confidenceScore: Float
  id: String
  sabUser: TransitUserData
}

type TransitUserData {
  antiPhishingScore: Int
  awarenessScore: Int
  createdDate: ISO8601DateTime
  department: String
  email: String
  employeeTitle: String
  firstName: String
  id: Int
  isActive: Boolean
  lastName: String
  location: String
  managerEmail: String
  managerId: Int
  modifiedDate: ISO8601DateTime
  orgUserId: Int
  organizationId: Int
  phishingReportScore: Int
  source: String
  trainingScore: Int
}

"""Modstore translation"""
type Translation {
  activePackage: Package
  altText: String
  description: String
  language: Language
  title: String
}

enum Types {
  USER_FIELD
  USER_DATE
  PHISH_EVENT
  PHISH_FLIP_EVENT
  VISH_EVENT
  BREACH_EVENT
  TRAINING
  POST_TRAINING
  ASSESSMENTS
  CUSTOM_EVENT
  PASSWORD_IQ_EVENT
  PASSWORD_IQ_STATE
  SECURITY_COACH
  SECURITY_COACH_REAL_TIME_COACHING
}

type UnlistedUserData {
  alias: String
  createdDate: String
  vendor: [UnlistedUserVendorData!]
}

type UnlistedUserPayload {
  data: [UnlistedUserData!]
  recordsFiltered: Int!
  recordsTotal: Int!
}

input UnlistedUsersFilterData {
  keyword: String!
  condition: String!
  value: String!
}

type UnlistedUserVendorData {
  displayName: String
  vendorCodeName: String
}

type UnmappedData {
  error: String
  total: Int
  unmappedEvents: [UnmappedEvents!]
}

type UnmappedEvents {
  detectionDatetime: String
  detectionFilepath: String
  detectionThreatCategory: String
  detectionUserId: String
  deviceId: String
  hostIpAddress: String
  hostName: String
  userEmail: String
  userName: String
  visitedUrl: String
}

type UnphishedAndUntrainedUserNodes {
  email: String
  groups: String
  id: Int
  name: String
  timeframe: ReportTimeframe
}

type UnphishedAndUntrainedUsers {
  csv: String!
  nodes: [UnphishedAndUntrainedUserNodes!]!
  timeframe: ReportTimeframe
}

type UploadedCsv {
  createdDate: String!
  fileName: String!
  id: ID!
  status: SecurityCoachCsvUploadStatus!
  uploadedBy: UploadingUser
}

type UploadedCsvs {
  nodes: [UploadedCsv!]
  pagination: Pagination!
}

type UploadingUser {
  email: String
  firstName: String
  id: Int
  lastName: String
}

"""A valid URL, transported as a string"""
scalar Url

"""A USB Campaign"""
type UsbCampaign implements Identifier & Timestamps {
  completedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  displayStatus: String
  fileTypes: [UsbCampaignFile!]
  freeUst: Boolean
  geoLocation: UsbCampaignGeoLocation
  id: Int!
  location: String
  macroEnabledCountDocm: Int
  macroEnabledCountDocx: Int
  macroEnabledCountPdf: Int
  macroEnabledCountPpsm: Int
  macroEnabledCountPptx: Int
  macroEnabledCountTotal: Int
  macroEnabledCountXlsm: Int
  macroEnabledCountXlsx: Int
  name: String!
  notes: String
  openCountDocm: Int
  openCountDocx: Int
  openCountPdf: Int
  openCountPpsm: Int
  openCountPptx: Int
  openCountXlsm: Int
  openCountXlsx: Int
  openedCountTotal: Int
  slug: String
  startedAt: ISO8601DateTime
  status: UsbCampaignStatuses!
  totalFailures: Int!
  updatedAt: ISO8601DateTime!
  usbCampaignResults: [UsbCampaignResult!]
}

input UsbCampaignAttributes {
  id: Int
  name: String!
  location: String
  notes: String
  status: UsbCampaignStatuses
}

"""A USB Campaign file type"""
type UsbCampaignFile {
  meta: UsbCampaignFileTypeMeta!
  name: String!
}

type UsbCampaignFileTypeMeta {
  ext: String
  icon: String
  name: String
}

"""Geolocation data for a USB Campaign"""
type UsbCampaignGeoLocation {
  mapData: String!
  mapSubtitle: String!
  mapSuffix: String!
}

"""A USB Campaign Result"""
type UsbCampaignResult implements Identifier & Timestamps {
  computerName: String
  createdAt: ISO8601DateTime!
  displayName: String
  fileType: String!
  id: Int!
  ipAddress: String
  ipLocation: String
  macroEnabledAt: ISO8601DateTime
  openedAt: ISO8601DateTime
  updatedAt: ISO8601DateTime!
  userName: String
}

"""Autogenerated return type of UsbCampaignsCreate"""
type UsbCampaignsCreatePayload {
  errors: [Error!]
  node: UsbCampaign
}

type UsbCampaignsCursor {
  nodes: [UsbCampaign!]!
  pagination: Pagination!
}

"""Autogenerated return type of UsbCampaignsDestroy"""
type UsbCampaignsDestroyPayload {
  errors: [Error!]
  node: UsbCampaign
}

"""Autogenerated return type of UsbCampaignsEnd"""
type UsbCampaignsEndPayload {
  errors: [Error!]
  node: UsbCampaign
}

"""Autogenerated return type of UsbCampaignsRestart"""
type UsbCampaignsRestartPayload {
  errors: [Error!]
  node: UsbCampaign
}

"""Autogenerated return type of UsbCampaignsStart"""
type UsbCampaignsStartPayload {
  errors: [Error!]
  node: UsbCampaign
}

enum UsbCampaignStatuses {
  created
  started
  completed
}

"""Autogenerated return type of UsbCampaignsUpdate"""
type UsbCampaignsUpdatePayload {
  errors: [Error!]
  node: UsbCampaign
}

"""User in the account"""
type User implements Timestamps {
  account: Account!
  accountDomain: String
  accountId: String
  accountLanguageSettings: AccountSettingsLanguageDefault
  admin: Boolean!
  adminLocale: String
  aidaOptionalTrainingEnabled: Boolean!
  allowAnalytics: Boolean!
  alreadyEnrolled(trainingCampaignId: Int!): Boolean
  apiTokens: [ApiToken!]
  archivable: Boolean!
  archived: Boolean
  archivedAt: ISO8601DateTime
  billingType: String
  campaignRecipientsReportableActive: [PhishingCampaignRecipient!]!
  campaignRecipientsReportableDeliveredCount: Int!
  comment: String
  companyName: String
  confirmationLink: String
  confirmationSentAt: ISO8601DateTime
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  currentEnrollments: [Enrollment!] @deprecated(reason: "Moved to mandatory_enrollments")
  currentPpp: Float
  currentSignInIp: String
  customDate1: ISO8601Date
  customDate2: ISO8601Date
  customField1: String
  customField2: String
  customField3: String
  customField4: String
  customHelpEnabled: Boolean
  customHelpUrl: String
  deliveryChannels: [DeliveryChannel!]!
  department: String
  deviceLinkToken: String
  disableNonSamlLogins: Boolean
  division: String
  domain: String
  electedEnrollments(per: Int = 10, page: Int = 1): [Enrollment!]
  email: String!
  emailAliases: [EmailAlias!]!
  employeeNumber: String
  employeeStartDate: ISO8601DateTime
  enrollmentLanguageSelections: [String!]!
  enrollmentsCount: UserEnrollmentsCount!
  extension: String
  firstName: String
  gamification: UserGamification
  groupIds: [Int!]!
  groups: [Group!]!
  id: Int!
  idpData: IdpData
  jobTitle: String
  language: String
  languageSettings: UserSettingsLanguages
  lastName: String
  lastSignInAt: ISO8601DateTime
  latestOutlookAddinActivity(activityType: OutlookAddinActivityActivityTypes = ALL): OutlookAddinActivity
  ldapEnabled: Boolean!
  ldapObjectGuid: String
  learnerMessages: [LearnerMessage!]
  linkedDevices: [DeviceDetails!]
  locale: String
  location: String
  lxContinueLearning: [Enrollment!]
  lxDisableTour: Boolean!
  lxRecommendations(per: Int = 10, page: Int = 1, query: JSON): [ModstoreRecommendation!]
  managerEmail: String
  managerName: String
  managerPhishingEnabled: Boolean
  managerReport: ManagerReport
  managerRiskScoreEnabled: Boolean
  managerTrainingEnabled: Boolean
  managerUserInfoEnabled: Boolean
  mandatoryEnrollments: [Enrollment!]
  membership(groupId: Int!): Membership
  messagesCampaignRecipients: [Recipient!]
  messagesEnabled: Boolean
  mfaEnabled: Boolean!
  mobileAppEnabled: Boolean
  mobilePhoneNumber: String
  optionalEnrollments(per: Int = 10, page: Int = 1, search: String = null): [Enrollment!]
  optionalTrainingEnabled: Boolean!
  organization: String
  outOfOfficeUntil: ISO8601Date
  outlookAddinActivityCount(activityType: OutlookAddinActivityActivityTypes = ALL): Int!
  passlessEnabled: Boolean!
  passlessExpiresIn: Int!
  passlessTokenGeneratedAt: ISO8601DateTime
  phisherEnabled: Boolean!
  phishingLocale: String
  phoneNumber: String
  popcornTheaterReduceMotion: Boolean!
  riskBooster: RiskBoosterLevels
  riskHistories: [TimeData!]
  riskScore: Float
  riskScoreFactors(date: ISO8601Date = null): [Int!]
  riskScoreHistories(fullHistory: Boolean = false): [RiskScoreHistory!]!
  samlEnabled: Boolean!
  securityRoles: [SecurityRole!]!
  signInCount: Int
  slackEnabled: Boolean
  statistics: UserStatistics
  subscriptionLevel: String
  teamsEnabled: Boolean
  timeZone: TimeZones
  trainingLocale: String
  trainingStats: TrainingStats!
  updatedAt: ISO8601DateTime!
  userUrl: String!
}

"""Autogenerated return type of UserAcceptClickwrap"""
type UserAcceptClickwrapPayload {
  errors: [Error!]
  node: User
}

input UserAttributes {
  comment: String
  customDate1: ISO8601Date
  customDate2: ISO8601Date
  customField1: String
  customField2: String
  customField3: String
  customField4: String
  department: String
  division: String
  email: String
  employeeNumber: String
  employeeStartDate: String
  extension: String
  firstName: String
  jobTitle: String
  language: String
  languageSettings: UserLanguages
  lastName: String
  ldapEnabled: Boolean
  location: String
  managerEmail: String
  managerName: String
  mfaEnabled: Boolean
  mobilePhoneNumber: String
  organization: String
  phisherEnabled: Boolean
  phoneNumber: String
  riskBooster: RiskBoosterLevels
  timeZone: TimeZones
  locale: String
  password: String
  passwordConfirmation: String
  outOfOfficeUntil: ISO8601Date
  idpData: UserIdpAttributes
}

type UserData {
  docs: [Docs!]
}

type UserDate implements Identifier {
  boolean: Booleans!
  id: Int!
  name: DateFields!
  timeframe: Timeframe!
}

input UserDateArgument {
  bool: Booleans!
  field: DateFields!
  timeframe: TimeframeArgument!
}

"""Autogenerated return type of UserDeleteAll"""
type UserDeleteAllPayload {
  errors: [Error!]
  node: [User!]
}

"""Autogenerated return type of UserDeleteByEmail"""
type UserDeleteByEmailPayload {
  errors: [Error!]
  node: [User!]
}

type UserDiscoveryTrendData {
  data: [Int!]
  startTime: String
}

"""A User Enrollments Count"""
type UserEnrollmentsCount implements Identifier & Timestamps {
  complete: Int!
  createdAt: ISO8601DateTime!
  id: Int!
  inProgress: Int!
  notStarted: Int!
  pastDue: Int!
  total: Int!
  updatedAt: ISO8601DateTime!
}

"""A User Enrollments Statistics"""
type UserEnrollmentsStatistics implements Identifier & Timestamps {
  complete: Int!
  createdAt: ISO8601DateTime!
  id: Int!
  inProgress: Int!
  lastFiveEnrollments: [Enrollment!]
  notStarted: Int!
  pastDue: Int!
  total: Int!
  updatedAt: ISO8601DateTime!
}

"""A User Event"""
type UserEvent {
  accountId: Int!
  description: String
  eventType: EventTypeUnion!
  externalId: String
  flipped: Boolean
  id: String!
  metadata: Metadata!
  occurredDate: String!
  risk: Risk!
  source: String
  user: EventUser!
}

type UserField implements Identifier {
  boolean: Booleans!
  comparison: Comparisons!
  id: Int!
  name: UserFields!
  values: [UserFieldValue!]!
}

input UserFieldArgument {
  bool: Booleans!
  name: UserFields!
  comparison: Comparisons!
  values: [UserFieldValueArgument!]!
}

enum UserFields {
  FIRST_NAME
  LAST_NAME
  LOCATION
  MANAGER_NAME
  MANAGER_EMAIL
  EMAILS
  PRIMARY_EMAIL
  JOB_TITLE
  PHONE_NUMBER
  EXTENSION
  MOBILE_PHONE_NUMBER
  DIVISION
  EMPLOYEE_NUMBER_LONG
  EMPLOYEE_NUMBER_STRING
  PHISH_PRONE_PERCENTAGE
  RISK_SCORE
  RISK_BOOSTER
  GROUPS
  ORGANIZATION
  DEPARTMENT
  LANGUAGE
  COMMENT
  CUSTOM_FIELD_1
  CUSTOM_FIELD_2
  CUSTOM_FIELD_3
  CUSTOM_FIELD_4
  COMPANY_NAME
  COUNTRY
  EMPLOYEE_TYPE
  MAIL_NICKNAME
  ON_PREMISES_SAM_ACCOUNT_NAME
  ON_PREMISES_SECURITY_IDENTIFIER
  USER_PRINCIPAL_NAME
}

type UserFieldValue {
  id: String!
  label: String
}

input UserFieldValueArgument {
  id: String!
  label: String
}

"""The Gamification for a User"""
type UserGamification implements GamificationInterface {
  badges: Boolean
  badgesEarned: [Badges!]
  badgesEnabled: Boolean
  badgesEnabledList: [Badges!]!
  badgesList: [Badge!]
  leaderboard: Leaderboard @deprecated(reason: "To be deprecated once multiple leaderboards are supported")
  leaderboardGroups: [Group!]!
  leaderboardTimeWindow: LeaderboardPeriods!
  leaderboardType: LeaderboardTypes @deprecated(reason: "Please use the leaderboard field")
  leaderboardTypes: [LeaderboardTypes!]
  leaderboards: [LeaderboardNew!]
  leaderboardsEnabled: Boolean
}

enum UserHasOutlookAddinActivityTypes {
  HAS_ACTIVITY
  NO_ACTIVITY
  ALL
}

input UserIdpAttributes {
  companyName: String
  country: String
  employeeType: String
  externalId: String
  lastPasswordChangeDateTime: ISO8601DateTime
  mailNickname: String
  onPremisesSamAccountName: String
  onPremisesSecurityIdentifier: String
  userPrincipalName: String
}

input UserLanguages {
  adminLocale: String
  phishingLocale: String
  trainingLocale: String
}

type UserMappingRecommendationData {
  alias: [AliasData!]
  id: String
  transits: [TransitData!]
}

type UserMappingRecommendationList {
  data: [UserMappingRecommendationData!]!
  recordsFiltered: Int!
  recordsTotal: Int!
}

input UserMovesSettingAttributes {
  id: Int
  autofixUserDupError: Boolean
}

"""Phishing statistics for a user"""
type UserPhishingStatistics {
  emailReported: Int!
  totalDelivered: Int!
  totalFailures: Int!
  totalMisses: Int!
}

"""The User Provisioning Account Settings"""
type UserProvisioning implements Identifier & Timestamps {
  adiToken: String
  allowed: Boolean
  createdAt: ISO8601DateTime!
  enabled: Boolean
  id: Int!
  scimLastClearedAt: ISO8601DateTime
  scimLastClearedType: ScimPurgeTypes
  scimPendingClearType: ScimPurgeTypes
  scimPublicKeyExists: Boolean!
  scimStatus: UserProvisioningScimStatuses!
  scimStatusChangedAt: ISO8601DateTime
  scimV2TenantUrl: String!
  showGroupDomain: Boolean
  source: UserProvisioningSources!
  testMode: Boolean
  transientScimToken: String
  updatedAt: ISO8601DateTime!
}

input UserProvisioningAttributes {
  allowed: Boolean
  enabled: Boolean
  scimVersion: Int
  showGroupDomain: Boolean
  source: UserProvisioningSources
  testMode: Boolean
}

"""The User Provisioning Notification Account Settings"""
type UserProvisioningNotification implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  emailToNotify: String
  enabled: Boolean!
  id: Int!
  timeframeDuration: Int
  updatedAt: ISO8601DateTime!
}

input UserProvisioningNotificationAttributes {
  enabled: Boolean
  timeframeDuration: Int
  emailToNotify: String
}

enum UserProvisioningScimStatuses {
  DISCONNECTED
  CONNECTED
  PROCESSING
}

enum UserProvisioningSources {
  ADI
  SCIM
  SCIM_V2
}

type UserReportCursor {
  nodes: [User!]!
  pagination: Pagination!
}

enum UserReportTypes {
  SIGNED_UP
  NOT_SIGNED_UP
}

type UserRiskScore {
  accountAccess: ISO8601DateTime
  accountId: Int!
  accountName: String!
  email: String!
  groupNames: [String!]!
  id: Int!
  name: String
  riskScore: Float!
  timeframe: ReportTimeframe
}

"""Current User`s risk statistics"""
type UserRiskStatistics implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  id: Int!
  riskHistories: [TimeData!]
  riskScore: Float
  updatedAt: ISO8601DateTime!
}

"""The Users Account Settings"""
type Users implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  forcePasswordChangeOnFirstLogin: Boolean
  id: Int!
  updatedAt: ISO8601DateTime!
}

"""Autogenerated return type of UsersAddToGroups"""
type UsersAddToGroupsPayload {
  errors: [Error!]
  node: [User!]
}

"""Autogenerated return type of UsersArchive"""
type UsersArchivePayload {
  errors: [Error!]
  node: [User!]
}

input UsersAttributes {
  id: Int
  forcePasswordChangeOnFirstLogin: Boolean
}

"""Autogenerated return type of UsersBulkArchive"""
type UsersBulkArchivePayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of UsersBulkChangeDomainEmails"""
type UsersBulkChangeDomainEmailsPayload {
  errors: [Error!]
  node: [Int!]!
}

"""Autogenerated return type of UsersBulkChangeDomain"""
type UsersBulkChangeDomainPayload {
  errors: [Error!]
  node: Int!
}

"""Autogenerated return type of UsersBulkDelete"""
type UsersBulkDeletePayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of UsersCreate"""
type UsersCreatePayload {
  errors: [Error!]
  node: User
}

"""Autogenerated return type of UsersCreateUpsideDown"""
type UsersCreateUpsideDownPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of UsersCsvImport"""
type UsersCsvImportPayload {
  errors: [Error!]
}

type UsersCursor {
  nodes: [User!]!
  pagination: Pagination!
}

"""Autogenerated return type of UsersDeleteMemberships"""
type UsersDeleteMembershipsPayload {
  errors: [Error!]
  node: [User!]
}

"""Autogenerated return type of UsersDelete"""
type UsersDeletePayload {
  errors: [Error!]
  node: [User!]
}

enum UserSearchTypes {
  ALL
  EMAIL
  EMAIL_ALIAS
  FIRST_NAME
  LAST_NAME
  FIRST_AND_LAST_NAME
}

"""Autogenerated return type of UsersEdit"""
type UsersEditPayload {
  errors: [Error!]
  node: User
}

"""Autogenerated return type of UsersEditProfile"""
type UsersEditProfilePayload {
  errors: [Error!]
  node: User
}

"""Autogenerated return type of UsersEditUpsideDown"""
type UsersEditUpsideDownPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of UserSetDefaultExecReportsDashboard"""
type UserSetDefaultExecReportsDashboardPayload {
  errors: [Error!]
  node: UserSettingsPreferences
}

"""Autogenerated return type of UserSetDefaultPiqDashboard"""
type UserSetDefaultPiqDashboardPayload {
  errors: [Error!]
  node: UserSettingsPreferences
}

"""User languages"""
type UserSettingsLanguages {
  adminLocale: String
  lastAcceptLanguageHeader: String
  osLocale: String
  phishingLocale: String
  trainingLocale: String
}

"""User Preferences"""
type UserSettingsPreferences {
  defaultExecReportsDashboard: ExecReportsExecReportsDashboard
  defaultPiqDashboard: PiqDashboard
}

"""Autogenerated return type of UsersEventResync"""
type UsersEventResyncPayload {
  node: Boolean
}

"""Autogenerated return type of UsersGrantAdmin"""
type UsersGrantAdminPayload {
  errors: [Error!]
  node: [User!]
}

type UserSignInData {
  name: String!
  notSignedIn: Int!
  signedIn: Int!
  timeframe: ReportTimeframe
}

type UserSignIns {
  csv: String!
  series: [UserSignInData!]!
  timeframe: ReportTimeframe
}

type UsersList {
  csv: String!
  timeframe: ReportTimeframe
}

"""A Users Merge Preview"""
type UsersMergePreview implements Identifier & Timestamps {
  campaignRecipients: [PhishingCampaignRecipient!]
  createdAt: ISO8601DateTime!
  displayNameWithEmail: String
  enrollments: [Enrollment!]
  errors: [Error!]
  groups: [Group!]
  id: Int!
  updatedAt: ISO8601DateTime!
  vishingCampaignRecipients: [VishingCampaignRecipient!]
}

"""Autogenerated return type of UsersMergeProcess"""
type UsersMergeProcessPayload {
  errors: [Error!]
  node: Boolean
}

enum UserSortFields {
  USER
  EMPLOYEE_NUMBER
  FIRST_NAME
  LAST_NAME
  JOB_TITLE
  CURRENT_PPP
  RISK_SCORE
  RISK_BOOSTER
  PHONE_NUMBER
  EXTENSION
  CELL_PHONE
  LOCATION
  DIVISION
  MANAGER_EMAIL
  MANAGER_NAME
  CREATED_AT
  LAST_SIGN_IN_AT
  ORGANIZATION
  DEPARTMENT
  LANGUAGE
  START_DATE
  ARCHIVED_AT
  CUSTOM_FIELD_1
  CUSTOM_FIELD_2
  CUSTOM_FIELD_3
  CUSTOM_FIELD_4
  CUSTOM_DATE_1
  CUSTOM_DATE_2
  MFA_ENABLED
  LDAP_ENABLED
  ADDED_ON
  SLACK_ENABLED
  TEAMS_ENABLED
  CONFIRMED_AT
  CONFIRMATION_SENT_AT
}

"""Autogenerated return type of UsersQuickImport"""
type UsersQuickImportPayload {
  errors: [Error!]
  nodes: [User!]
}

"""Autogenerated return type of UsersResendConfirmationEmail"""
type UsersResendConfirmationEmailPayload {
  errors: [Error!]
  node: Boolean
}

"""Autogenerated return type of UsersRevokeAdmin"""
type UsersRevokeAdminPayload {
  errors: [Error!]
  node: [User!]
}

"""Password IQ User Detection States"""
type UserStates {
  pagination: PiqPagination!
  users: [PiqUser!]!
}

input UserStatesSort {
  field: SortFields!
  direction: SortDirections!
}

"""Current User`s statistics"""
type UserStatistics implements Identifier & Timestamps {
  createdAt: ISO8601DateTime!
  enrollmentsStatistics: UserEnrollmentsStatistics
  id: Int!
  phishingStatistics: UserPhishingStatistics
  riskStatistics: UserRiskStatistics
  updatedAt: ISO8601DateTime!
}

enum UserStatusFilters {
  ALL
  ACTIVE
  ARCHIVED
}

"""Autogenerated return type of UsersUnarchive"""
type UsersUnarchivePayload {
  errors: [Error!]
  node: [User!]
}

type UserTrainingCampaignsCursor {
  nodes: [TrainingCampaign!]!
  pagination: Pagination!
}

enum UserTypeFilters {
  ALL
  USER
  ADMIN
}

"""Autogenerated return type of UstCreate"""
type UstCreatePayload {
  errors: [Error!]
  node: UsbCampaign
}

"""Autogenerated return type of UstStart"""
type UstStartPayload {
  errors: [Error!]
  node: UsbCampaign
}

type ValidateUserMappingData {
  errors: [String!]
  success: Boolean
}

type Variance {
  configurationGroups: [PiqWidgetConfigurationGroup!]!
  detection: DetectionTypes!
  groups: [Group!]!
  timeframe: ReportTimeframe
  title: String
  type: PiqWidget!
  userType: PiqUserTypes
}

type VendorActivityData {
  activeVendors: [String!]
  inactiveVendors: [String!]
  integratedVendors: [String!]
}

type VendorDetails {
  displayName: String
  id: Int!
  logType: VendorLog!
  vendorCodeName: Vendors!
  vendorType: String
}

enum VendorLog {
  web
  email
  endpoint
}

type VendorRegistrationErrors {
  errorMessage: String
  errorType: String
}

type VendorRegistrationStatus {
  broken: Boolean!
  configured: Boolean!
  createdAt: ISO8601DateTime
  errors: VendorRegistrationErrors
  id: Int
  name: String
}

enum Vendors {
  sentinelone
  bitdefender__gravityzone
  crowdstrike
  cloudflare__area1
  cloudflare__zero_trust
  sophos
  netskope
  malwarebytes
  carbonblack
  microsoft__office365
  microsoft__defender_atp
  microsoft__mcas
  microsoft__aad
  code42
  proofpoint
  paloalto
  zscaler
  cylance
  okta
  google__drive
  google__iam
  google__gmail
  sonicwall__captureclient
  cisco__esa
  cisco__umbrella
  mcafee_endpoint
}

enum VendorStatus {
  valid
  invalid
  invalid_credentials
}

type VendorStatusData {
  apiKey: String
  id: Int
  status: VendorStatus
}

type VishEvent implements Identifier {
  boolean: Booleans!
  comparison: EventComparisons!
  count: Int!
  event: VishEvents!
  id: Int!
  timeframe: Timeframe!
}

input VishEventArgument {
  bool: Booleans!
  event: VishEvents!
  countType: EventComparisons!
  count: Int!
  timeframe: TimeframeArgument!
}

enum VishEvents {
  FAILED
  PASSED
}

"""A Vishing Campaign"""
type VishingCampaign implements Identifier {
  campaignDays: [VishingCampaignDay!]!
  categories: [VishingTemplateCategory!]
  deliveryHourEnd: String
  deliveryHourStart: String
  fullRandom: Boolean
  groups: [Group!]!
  id: Int!
  name: String
  phoneOption: VishingPhoneOptions!
  sendingDuration: Int
  sendingDurationUnit: Durations
  startAt: ISO8601DateTime
  startedAt: ISO8601DateTime
  status: VishingCampaignStatuses
  statusCounts: VishingCampaignStatusCounts!
  template: VishingTemplate
  timezone: TimeZones
  vishPronePercentage: Float
  vishingCampaignRecipients: [VishingCampaignRecipient!]
}

input VishingCampaignAttributes {
  name: String!
  groupIds: [Int!]
  startAt: ISO8601DateTime!
  timezone: TimeZones!
  sendingDuration: Int
  sendingDurationUnits: Durations
  businessHoursStartHour: String
  businessHoursEndHour: String
  businessDays: [Int!]
  fullRandom: Boolean!
  selectedCategories: [Int!]!
  selectedTemplate: Int
  phoneOption: VishingPhoneOptions!
}

"""A Vishing Campaign Day"""
type VishingCampaignDay implements Identifier {
  day: Int!
  id: Int!
}

enum VishingCampaignFilters {
  ACTIVE
  INACTIVE
  ALL
}

"""A Vishing Campaign Recipient"""
type VishingCampaignRecipient implements Identifier & Timestamps {
  callDuration: Int
  callFrom: String
  callNumber: String
  callStatus: String
  createdAt: ISO8601DateTime!
  failedReason: String
  failedTest: Boolean
  id: Int!
  mobilePhoneNumber: String
  phoneNumber: String
  scheduledDate: ISO8601DateTime
  template: VishingTemplate
  updatedAt: ISO8601DateTime!
  user: User!
  vishingCampaign: VishingCampaign
}

"""Autogenerated return type of VishingCampaignsCreate"""
type VishingCampaignsCreatePayload {
  errors: [Error!]
  node: VishingCampaign
}

type VishingCampaignsCursor {
  nodes: [VishingCampaign!]!
  pagination: Pagination!
}

"""Autogenerated return type of VishingCampaignsDelete"""
type VishingCampaignsDeletePayload {
  errors: [Error!]
  node: VishingCampaign
}

"""Autogenerated return type of VishingCampaignsEdit"""
type VishingCampaignsEditPayload {
  errors: [Error!]
  node: VishingCampaign
}

"""A Vishing Campaign's status counts"""
type VishingCampaignsRecipientsCallStatuses implements Identifier {
  callBusy: Int!
  callFailed: Int!
  callNoAnswer: Int!
  called: Int!
  failed: Int!
  id: Int!
  passed: Int!
  scheduled: Int!
  total: Int!
}

enum VishingCampaignsSortFields {
  NAME
  VISH_PRONE_PERCENTAGE
  STARTED_AT
}

"""All Vishing Campaigns Statuses"""
type VishingCampaignsStatuses implements Identifier {
  active: Int!
  id: Int!
  inactive: Int!
  total: Int!
}

"""A Vishing Campaign's status counts"""
type VishingCampaignStatusCounts implements Identifier {
  callFailed: Int!
  called: Int!
  failed: Int!
  id: Int!
  passed: Int!
  scheduled: Int!
  total: Int!
}

enum VishingCampaignStatuses {
  CREATED
  STARTING
  STARTED
  NOT_STARTED
  IN_PROGRESS
  NO_USERS
  COMPLETED
  SCHEDULING
}

type VishingCampaignUsersCursor {
  nodes: [VishingCampaignRecipient!]!
  pagination: Pagination!
}

enum VishingCampaignUserStatuses {
  scheduled
  called
  callFailed
  failed
  passed
}

enum VishingGenders {
  MAN
  ALICE
}

"""Vishing Templates category"""
type VishingLanguage implements Identifier {
  code: String!
  gender: VishingGenders!
  id: Int!
  name: String!
}

type VishingLanguagesCursor {
  nodes: [VishingLanguage!]!
  pagination: Pagination!
}

"""Vishing metadata for an event"""
type VishingMetadata implements EventMetadataInterface {
  failedReason: String
  templateId: Int
  templateName: String
  templateType: String
  templateUuid: String
}

enum VishingPhoneOptions {
  LANDLINE
  MOBILE_PHONE_NUMBER
  FALLBACK_MOBILE
  FALLBACK_LANDLINE
}

"""Vishing Templates for Vishing"""
type VishingTemplate implements Identifier {
  accountId: Int
  category: VishingTemplateCategory
  id: Int!
  language: VishingLanguage!
  name: String!
  steps: [VishingTemplateStep!]!
  type: VishingTemplateTypes!
  updatedAt: ISO8601DateTime!
}

input VishingTemplateAttributes {
  name: String!
  categoryId: Int
  languageId: Int!
  stepsAttributes: [VishingTemplateStepAttributes!]!
}

"""An unpaginated list of Vishing Template Categories"""
type VishingTemplateCategories {
  draftsTemplateCount: Int!
  nodes: [VishingTemplateCategory!]!
}

"""Vishing Template category"""
type VishingTemplateCategory implements Identifier {
  accountId: Int
  id: Int!
  name: String!
  ordering: Int!
  templateCount: Int!
  type: VishingTemplateTypes!
}

input VishingTemplateCategoryAttributes {
  name: String
  hidden: Boolean
}

"""Autogenerated return type of VishingTemplatesCall"""
type VishingTemplatesCallPayload {
  errors: [Error!]
}

"""Autogenerated return type of VishingTemplatesCategoryCreate"""
type VishingTemplatesCategoryCreatePayload {
  errors: [Error!]
  node: VishingTemplateCategory
}

"""Autogenerated return type of VishingTemplatesCategoryDelete"""
type VishingTemplatesCategoryDeletePayload {
  errors: [Error!]
  node: VishingTemplateCategory
}

"""Autogenerated return type of VishingTemplatesCategoryReorder"""
type VishingTemplatesCategoryReorderPayload {
  errors: [Error!]
  nodes: [VishingTemplateCategory!]!
}

"""Autogenerated return type of VishingTemplatesCategoryUpdate"""
type VishingTemplatesCategoryUpdatePayload {
  errors: [Error!]
  node: VishingTemplateCategory
}

"""Autogenerated return type of VishingTemplatesClone"""
type VishingTemplatesClonePayload {
  success: Boolean
}

"""Autogenerated return type of VishingTemplatesCreate"""
type VishingTemplatesCreatePayload {
  errors: [Error!]
  node: VishingTemplate
}

type VishingTemplatesCursor {
  nodes: [VishingTemplate!]!
  pagination: Pagination!
}

"""Autogenerated return type of VishingTemplatesDelete"""
type VishingTemplatesDeletePayload {
  success: Boolean
}

"""Autogenerated return type of VishingTemplatesEdit"""
type VishingTemplatesEditPayload {
  errors: [Error!]
  node: VishingTemplate
}

"""Autogenerated return type of VishingTemplatesMove"""
type VishingTemplatesMovePayload {
  success: Boolean
}

input VishingTemplateSortAttributes {
  order: SortDirections!
  column: VishingTemplateSortFields!
}

enum VishingTemplateSortFields {
  NAME
  CATEGORY
  UPDATED_AT
}

"""Vishing Template Step"""
union VishingTemplateStep = VishingTemplateStepAudio | VishingTemplateStepPause | VishingTemplateStepText

input VishingTemplateStepAttributes {
  id: Int
  type: VishingTemplateStepTypes!
  gatherCount: Int
  isFailure: Boolean!
  text: String
  pause: Int
  audioFile: File
  description: String
  position: Int!
}

"""Vishing Template Step: Audio"""
type VishingTemplateStepAudio implements VishingTemplateStepInterface {
  audioFile: String
  audioFileName: String
  description: String
  gatherCount: Int
  id: Int!
  isFailure: Boolean!
  type: VishingTemplateStepTypes!
}

"""Common Vishing Template Step Fields"""
interface VishingTemplateStepInterface {
  gatherCount: Int
  id: Int!
  isFailure: Boolean!
  type: VishingTemplateStepTypes!
}

"""Vishing Template Step: Pause"""
type VishingTemplateStepPause implements VishingTemplateStepInterface {
  gatherCount: Int
  id: Int!
  isFailure: Boolean!
  pause: Int
  type: VishingTemplateStepTypes!
}

"""Vishing Template Step: Text"""
type VishingTemplateStepText implements VishingTemplateStepInterface {
  gatherCount: Int
  id: Int!
  isFailure: Boolean!
  text: String
  type: VishingTemplateStepTypes!
}

enum VishingTemplateStepTypes {
  TEXT
  AUDIO
  PAUSE
}

enum VishingTemplateTypes {
  SYSTEM
  USER
}

"""A Webhook definition"""
type Webhook implements Identifier & Timestamps {
  authMethod: AuthMethod
  createdAt: ISO8601DateTime!
  customData: [KeyValue!]!
  customHeaders: [KeyValue!]!
  events: [Event!]!
  id: Int!
  name: String!
  status: WebhookStatuses!
  updatedAt: ISO8601DateTime!
  url: String!
}

input WebhooksAuthApiKeyAttributes {
  key: String!
  value: String!
  type: ApiKeyTypes!
}

input WebhooksAuthBasicAttributes {
  username: String!
  password: String!
}

input WebhooksAuthBearerAttributes {
  token: String!
}

input WebhooksCreateAttributes {
  name: String!
  url: Url!
  status: WebhookStatuses!
  customHeaders: [WebhooksKeyValue!]!
  customData: [WebhooksKeyValue!]!
  events: [Int!]!
  apiKey: WebhooksAuthApiKeyAttributes
  bearer: WebhooksAuthBearerAttributes
  basic: WebhooksAuthBasicAttributes
}

"""Autogenerated return type of WebhooksCreate"""
type WebhooksCreatePayload {
  errors: [Error!]
  node: Webhook
}

"""Autogenerated return type of WebhooksDelete"""
type WebhooksDeletePayload {
  deleted: Boolean
}

input WebhooksKeyValue {
  key: String!
  value: String!
}

enum WebhookStatuses {
  active
  disabled
  inactive
}

"""Autogenerated return type of WebhooksUpdate"""
type WebhooksUpdatePayload {
  errors: [Error!]
  node: Webhook
}

enum Weekdays {
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

enum WidgetDetectionTypes {
  AD_PW_WEAK
  AD_PW_SHARED
  AD_PW_EMPTY
  AD_PW_CLEAR_TEXT
  AD_PW_NOT_REQD
  AD_PW_NEVER_EXPIRES
  AD_USER_USES_LM_HASH
  AD_USER_AES_ENCRYPTION_NOT_SET
  AD_USER_DES_ONLY_ENCRYPTION
  AD_USER_HAS_PREAUTHENTICATION
  AD_PW_FOUND_IN_BREACH
  ALL_DETECTION_TYPES
}

type Workspace {
  id: String
  workspace: String
}

type ZscalerKeys {
  gatewayKey: String
  orgKey: String
}

